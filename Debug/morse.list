
morse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005204  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08005398  08005398  00006398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e0  080056e0  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080056e0  080056e0  000066e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056e8  080056e8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e8  080056e8  000066e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056ec  080056ec  000066ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080056f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  0800574c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  0800574c  000071cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c36  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fd  00000000  00000000  00018cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  0001a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ace  00000000  00000000  0001b528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018887  00000000  00000000  0001bff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008560  00000000  00000000  0003487d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000986ea  00000000  00000000  0003cddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d54c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004744  00000000  00000000  000d550c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d9c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005380 	.word	0x08005380

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	08005380 	.word	0x08005380

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	4618      	mov	r0, r3
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
      _M_reset();
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 f805 	bl	80004fa <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4618      	mov	r0, r3
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
    }
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f000 faca 	bl	8000ac8 <_ZNSaISt6vectorIPcSaIS0_EEED1Ev>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 faad 	bl	8000aa8 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE12_Vector_implC1Ev>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ffeb 	bl	800053e <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EEC1Ev>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4618      	mov	r0, r3
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <_ZNSt12_Vector_baseIPcSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 faf9 	bl	8000b72 <_ZNSaIPcED1Ev>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <_ZNSt12_Vector_baseIPcSaIS0_EEC1Ev>:
      _Vector_base() = default;
 800058a:	b580      	push	{r7, lr}
 800058c:	b082      	sub	sp, #8
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fadc 	bl	8000b52 <_ZNSt12_Vector_baseIPcSaIS0_EE12_Vector_implC1Ev>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <_ZNSt6vectorIPcSaIS0_EEC1Ev>:
      vector() = default;
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ffeb 	bl	800058a <_ZNSt12_Vector_baseIPcSaIS0_EEC1Ev>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4618      	mov	r0, r3
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 80005be:	b580      	push	{r7, lr}
 80005c0:	b082      	sub	sp, #8
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fb66 	bl	8000c9a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <_Z15TextToMorseCodePc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
vector<vector<char*>> TextToMorseCode(char *text) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0da      	sub	sp, #360	@ 0x168
 80005dc:	af02      	add	r7, sp, #8
 80005de:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80005e2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80005e6:	6018      	str	r0, [r3, #0]
 80005e8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80005ec:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80005f0:	6019      	str	r1, [r3, #0]
	vector<vector<char*>> result;
 80005f2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80005f6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	f7ff ffac 	bl	8000558 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EEC1Ev>
	vector<char*> word;
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ffcd 	bl	80005a4 <_ZNSt6vectorIPcSaIS0_EEC1Ev>
		{'h',"...."}, {'i',".."}, {'j',".---"}, {'k',"-.-"}, {'l',".-.."}, {'m',"--"}, {'n',"-."},
		{'o',"---"}, {'p',".--."}, {'q',"--.-"}, {'r',".-."}, {'s',"..."}, {'t',"-"},
		{'u',"..-"}, {'v',"...-"}, {'w',".--"}, {'x',"-..-"}, {'y',"-.--"}, {'z',"--.."},													// W - Z
		{'0',"-----"}, {'1',".----"}, {'2',"..---"}, {'3',"...--"}, {'4',"....-"}, 													// numbers
		{'5',"....."}, {'6',"-...."}, {'7',"--..."}, {'8',"---.."}, {'9',"----."}
	};
 800060a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800060e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000612:	4a4a      	ldr	r2, [pc, #296]	@ (800073c <_Z15TextToMorseCodePc+0x164>)
 8000614:	4618      	mov	r0, r3
 8000616:	4611      	mov	r1, r2
 8000618:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800061c:	461a      	mov	r2, r3
 800061e:	f004 fe57 	bl	80052d0 <memcpy>
 8000622:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000626:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800062a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000634:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000638:	2224      	movs	r2, #36	@ 0x24
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fad6 	bl	8000bf2 <_ZNSaISt4pairIKcPcEEC1Ev>
 8000646:	f507 71aa 	add.w	r1, r7, #340	@ 0x154
 800064a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800064e:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 8000652:	f107 0008 	add.w	r0, r7, #8
 8000656:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	460b      	mov	r3, r1
 800065e:	ca06      	ldmia	r2, {r1, r2}
 8000660:	f000 fadf 	bl	8000c22 <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 8000664:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000668:	4618      	mov	r0, r3
 800066a:	f000 face 	bl	8000c0a <_ZNSaISt4pairIKcPcEED1Ev>

	for (char *c = text; *c != '\0'; c++) {
 800066e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000672:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800067c:	e03b      	b.n	80006f6 <_Z15TextToMorseCodePc+0x11e>
		if (isalpha(*c) || isdigit(*c))
 800067e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	f004 fd79 	bl	800517c <isalpha>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10a      	bne.n	80006a6 <_Z15TextToMorseCodePc+0xce>
 8000690:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	3b30      	subs	r3, #48	@ 0x30
 8000698:	2b09      	cmp	r3, #9
 800069a:	bf94      	ite	ls
 800069c:	2301      	movls	r3, #1
 800069e:	2300      	movhi	r3, #0
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00e      	beq.n	80006c4 <_Z15TextToMorseCodePc+0xec>
			word.push_back(morse[*c]);
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	f8d7 115c 	ldr.w	r1, [r7, #348]	@ 0x15c
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fb08 	bl	8000cc4 <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEEixERS4_>
 80006b4:	4602      	mov	r2, r0
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	4611      	mov	r1, r2
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fb5d 	bl	8000d7c <_ZNSt6vectorIPcSaIS0_EE9push_backERKS0_>
 80006c2:	e013      	b.n	80006ec <_Z15TextToMorseCodePc+0x114>
		else if (*c == ' ') {
 80006c4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b20      	cmp	r3, #32
 80006cc:	d10e      	bne.n	80006ec <_Z15TextToMorseCodePc+0x114>
			result.push_back(word);
 80006ce:	f107 0220 	add.w	r2, r7, #32
 80006d2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80006d6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80006da:	4611      	mov	r1, r2
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	f000 fb72 	bl	8000dc6 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE9push_backERKS2_>
			word.clear();
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fb93 	bl	8000e12 <_ZNSt6vectorIPcSaIS0_EE5clearEv>
	for (char *c = text; *c != '\0'; c++) {
 80006ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80006f0:	3301      	adds	r3, #1
 80006f2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80006f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1be      	bne.n	800067e <_Z15TextToMorseCodePc+0xa6>
			//cout << "unrecognized character" << endl;
			//break;
		}

	}
	return result;
 8000700:	bf00      	nop
}
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff59 	bl	80005be <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEED1Ev>
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fa53 	bl	8000bbc <_ZNSt6vectorIPcSaIS0_EED1Ev>
	return result;
 8000716:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800071a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800071e:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8000722:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8000726:	6812      	ldr	r2, [r2, #0]
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800072e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08005480 	.word	0x08005480

08000740 <_Z11blinkLetterPc>:
 * space between dits and dahs within a letter = 200ms
 * space between letters = 200 * 3 = 600ms
 * space between words = 200 * 7 = 1400ms
 *
*/
void blinkLetter(char* word) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	for (char *letter = word; *letter != '\0'; letter++) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	e022      	b.n	8000794 <_Z11blinkLetterPc+0x54>
		switch (*letter) {
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b2d      	cmp	r3, #45	@ 0x2d
 8000754:	d00d      	beq.n	8000772 <_Z11blinkLetterPc+0x32>
 8000756:	2b2e      	cmp	r3, #46	@ 0x2e
 8000758:	d118      	bne.n	800078c <_Z11blinkLetterPc+0x4c>
			case '.':
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800075a:	2120      	movs	r1, #32
 800075c:	4812      	ldr	r0, [pc, #72]	@ (80007a8 <_Z11blinkLetterPc+0x68>)
 800075e:	f003 ff24 	bl	80045aa <HAL_GPIO_TogglePin>
				HAL_Delay(200);
 8000762:	20c8      	movs	r0, #200	@ 0xc8
 8000764:	f003 fc62 	bl	800402c <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000768:	2120      	movs	r1, #32
 800076a:	480f      	ldr	r0, [pc, #60]	@ (80007a8 <_Z11blinkLetterPc+0x68>)
 800076c:	f003 ff1d 	bl	80045aa <HAL_GPIO_TogglePin>
				break;
 8000770:	e00d      	b.n	800078e <_Z11blinkLetterPc+0x4e>
			case '-':
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000772:	2120      	movs	r1, #32
 8000774:	480c      	ldr	r0, [pc, #48]	@ (80007a8 <_Z11blinkLetterPc+0x68>)
 8000776:	f003 ff18 	bl	80045aa <HAL_GPIO_TogglePin>
				HAL_Delay(600);
 800077a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800077e:	f003 fc55 	bl	800402c <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000782:	2120      	movs	r1, #32
 8000784:	4808      	ldr	r0, [pc, #32]	@ (80007a8 <_Z11blinkLetterPc+0x68>)
 8000786:	f003 ff10 	bl	80045aa <HAL_GPIO_TogglePin>
				break;
 800078a:	e000      	b.n	800078e <_Z11blinkLetterPc+0x4e>
			default:
				break;
 800078c:	bf00      	nop
	for (char *letter = word; *letter != '\0'; letter++) {
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3301      	adds	r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1d8      	bne.n	800074e <_Z11blinkLetterPc+0xe>
			HAL_Delay(200);
		}
	}
}
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40020000 	.word	0x40020000

080007ac <_Z9blinkWordSt6vectorIPcSaIS0_EE>:

void blinkWord(vector<char*> words) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	for (char *word : words)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	6978      	ldr	r0, [r7, #20]
 80007ba:	f000 fb38 	bl	8000e2e <_ZNSt6vectorIPcSaIS0_EE5beginEv>
 80007be:	4603      	mov	r3, r0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f000 fb43 	bl	8000e4e <_ZNSt6vectorIPcSaIS0_EE3endEv>
 80007c8:	4603      	mov	r3, r0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	e013      	b.n	80007f6 <_Z9blinkWordSt6vectorIPcSaIS0_EE+0x4a>
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fb74 	bl	8000ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEEdeEv>
 80007d8:	4603      	mov	r3, r0
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	613b      	str	r3, [r7, #16]
	{
		blinkLetter(word);
 80007de:	6938      	ldr	r0, [r7, #16]
 80007e0:	f7ff ffae 	bl	8000740 <_Z11blinkLetterPc>
		HAL_Delay(1200);
 80007e4:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80007e8:	f003 fc20 	bl	800402c <HAL_Delay>
	for (char *word : words)
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fb55 	bl	8000ea0 <_ZN9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEEppEv>
 80007f6:	f107 0208 	add.w	r2, r7, #8
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fb35 	bl	8000e70 <_ZN9__gnu_cxxneIPPcSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1e0      	bne.n	80007ce <_Z9blinkWordSt6vectorIPcSaIS0_EE+0x22>
	}
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_Z8blinkLEDSt6vectorIS_IPcSaIS0_EESaIS2_EE>:

void blinkLED(vector<vector<char*>> morse) {
 8000816:	b580      	push	{r7, lr}
 8000818:	b08c      	sub	sp, #48	@ 0x30
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	for (vector<char*> words : morse) {
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000822:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000824:	f000 fb58 	bl	8000ed8 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE5beginEv>
 8000828:	4603      	mov	r3, r0
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800082e:	f000 fb63 	bl	8000ef8 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE3endEv>
 8000832:	4603      	mov	r3, r0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	e027      	b.n	8000888 <_Z8blinkLEDSt6vectorIS_IPcSaIS0_EESaIS2_EE+0x72>
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fb95 	bl	8000f6c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEdeEv>
 8000842:	4602      	mov	r2, r0
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fb9a 	bl	8000f84 <_ZNSt6vectorIPcSaIS0_EEC1ERKS2_>
		blinkWord(words);
 8000850:	f107 0214 	add.w	r2, r7, #20
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fb92 	bl	8000f84 <_ZNSt6vectorIPcSaIS0_EEC1ERKS2_>
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ffa1 	bl	80007ac <_Z9blinkWordSt6vectorIPcSaIS0_EE>
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f9a4 	bl	8000bbc <_ZNSt6vectorIPcSaIS0_EED1Ev>
	}
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4618      	mov	r0, r3
 800087a:	f000 f99f 	bl	8000bbc <_ZNSt6vectorIPcSaIS0_EED1Ev>
	for (vector<char*> words : morse) {
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fb61 	bl	8000f4a <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEppEv>
 8000888:	f107 020c 	add.w	r2, r7, #12
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fb41 	bl	8000f1a <_ZN9__gnu_cxxneIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1cc      	bne.n	8000838 <_Z8blinkLEDSt6vectorIS_IPcSaIS0_EESaIS2_EE+0x22>
}
 800089e:	bf00      	nop
 80008a0:	bf00      	nop
 80008a2:	3730      	adds	r7, #48	@ 0x30
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ae:	f003 fb4b 	bl	8003f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b2:	f000 f837 	bl	8000924 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b6:	f000 f89f 	bl	80009f8 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */
  char val[] = "hello world";
 80008ba:	4a18      	ldr	r2, [pc, #96]	@ (800091c <main+0x74>)
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80008c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 80008c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ca:	4815      	ldr	r0, [pc, #84]	@ (8000920 <main+0x78>)
 80008cc:	f003 fe3c 	bl	8004548 <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	bf0c      	ite	eq
 80008d6:	2301      	moveq	r3, #1
 80008d8:	2300      	movne	r3, #0
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d0f2      	beq.n	80008c6 <main+0x1e>
		vector<vector<char*>> morse = TextToMorseCode(val);
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	f107 0210 	add.w	r2, r7, #16
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fe75 	bl	80005d8 <_Z15TextToMorseCodePc>
		blinkLED(morse);
 80008ee:	1d3a      	adds	r2, r7, #4
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fb81 	bl	8000ffe <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EEC1ERKS4_>
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff88 	bl	8000816 <_Z8blinkLEDSt6vectorIS_IPcSaIS0_EESaIS2_EE>
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f906 	bl	8000b1c <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EED1Ev>
	}
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f902 	bl	8000b1c <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EED1Ev>
  }
 8000918:	e7d5      	b.n	80008c6 <main+0x1e>
 800091a:	bf00      	nop
 800091c:	080055a0 	.word	0x080055a0
 8000920:	40020800 	.word	0x40020800

08000924 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b094      	sub	sp, #80	@ 0x50
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	2230      	movs	r2, #48	@ 0x30
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f004 fc44 	bl	80051c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <_Z18SystemClock_Configv+0xcc>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	4a27      	ldr	r2, [pc, #156]	@ (80009f0 <_Z18SystemClock_Configv+0xcc>)
 8000952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000956:	6413      	str	r3, [r2, #64]	@ 0x40
 8000958:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <_Z18SystemClock_Configv+0xcc>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	4b22      	ldr	r3, [pc, #136]	@ (80009f4 <_Z18SystemClock_Configv+0xd0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000970:	4a20      	ldr	r2, [pc, #128]	@ (80009f4 <_Z18SystemClock_Configv+0xd0>)
 8000972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1e      	ldr	r3, [pc, #120]	@ (80009f4 <_Z18SystemClock_Configv+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000988:	2301      	movs	r3, #1
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098c:	2310      	movs	r3, #16
 800098e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000990:	2300      	movs	r3, #0
 8000992:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	4618      	mov	r0, r3
 800099a:	f003 fe21 	bl	80045e0 <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	bf14      	ite	ne
 80009a4:	2301      	movne	r3, #1
 80009a6:	2300      	moveq	r3, #0
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 80009ae:	f000 f875 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b2:	230f      	movs	r3, #15
 80009b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f004 f87f 	bl	8004ad0 <HAL_RCC_ClockConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	bf14      	ite	ne
 80009d8:	2301      	movne	r3, #1
 80009da:	2300      	moveq	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80009e2:	f000 f85b 	bl	8000a9c <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	3750      	adds	r7, #80	@ 0x50
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <_ZL12MX_GPIO_Initv+0x98>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a1e      	ldr	r2, [pc, #120]	@ (8000a90 <_ZL12MX_GPIO_Initv+0x98>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <_ZL12MX_GPIO_Initv+0x98>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <_ZL12MX_GPIO_Initv+0x98>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a17      	ldr	r2, [pc, #92]	@ (8000a90 <_ZL12MX_GPIO_Initv+0x98>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <_ZL12MX_GPIO_Initv+0x98>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2120      	movs	r1, #32
 8000a4a:	4812      	ldr	r0, [pc, #72]	@ (8000a94 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a4c:	f003 fd94 	bl	8004578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	4619      	mov	r1, r3
 8000a64:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <_ZL12MX_GPIO_Initv+0xa0>)
 8000a66:	f003 fbeb 	bl	8004240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a6a:	2320      	movs	r3, #32
 8000a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a82:	f003 fbdd 	bl	8004240 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a86:	bf00      	nop
 8000a88:	3720      	adds	r7, #32
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020800 	.word	0x40020800

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <Error_Handler+0x8>

08000aa8 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 fae1 	bl	8001078 <_ZNSaISt6vectorIPcSaIS0_EEEC1Ev>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fae9 	bl	8001090 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE17_Vector_impl_dataC1Ev>
	{ }
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <_ZNSaISt6vectorIPcSaIS0_EEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 faf1 	bl	80010b8 <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEED1Ev>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689a      	ldr	r2, [r3, #8]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	109b      	asrs	r3, r3, #2
 8000af8:	4a07      	ldr	r2, [pc, #28]	@ (8000b18 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EED1Ev+0x38>)
 8000afa:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8000afe:	461a      	mov	r2, r3
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 fae4 	bl	80010ce <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE13_M_deallocateEPS3_j>
      }
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fd0c 	bl	8000526 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE12_Vector_implD1Ev>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	aaaaaaab 	.word	0xaaaaaaab

08000b1c <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8000b1c:	b5b0      	push	{r4, r5, r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681c      	ldr	r4, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fae0 	bl	80010f4 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE19_M_get_Tp_allocatorEv>
 8000b34:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000b36:	461a      	mov	r2, r3
 8000b38:	4629      	mov	r1, r5
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f000 fae5 	bl	800110a <_ZSt8_DestroyIPSt6vectorIPcSaIS1_EES3_EvT_S5_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ffcc 	bl	8000ae0 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EED1Ev>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bdb0      	pop	{r4, r5, r7, pc}

08000b52 <_ZNSt12_Vector_baseIPcSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 fae3 	bl	8001126 <_ZNSaIPcEC1Ev>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 faeb 	bl	800113e <_ZNSt12_Vector_baseIPcSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_ZNSaIPcED1Ev>:
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 faf3 	bl	8001166 <_ZNSt15__new_allocatorIPcED1Ev>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_ZNSt12_Vector_baseIPcSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fae9 	bl	800117c <_ZNSt12_Vector_baseIPcSaIS0_EE13_M_deallocateEPS0_j>
      }
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fce0 	bl	8000572 <_ZNSt12_Vector_baseIPcSaIS0_EE12_Vector_implD1Ev>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_ZNSt6vectorIPcSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8000bbc:	b5b0      	push	{r4, r5, r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681c      	ldr	r4, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fae7 	bl	80011a2 <_ZNSt12_Vector_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 8000bd4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4629      	mov	r1, r5
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f000 faec 	bl	80011b8 <_ZSt8_DestroyIPPcS0_EvT_S2_RSaIT0_E>
      }
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ffd1 	bl	8000b8a <_ZNSt12_Vector_baseIPcSaIS0_EED1Ev>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bdb0      	pop	{r4, r5, r7, pc}

08000bf2 <_ZNSaISt4pairIKcPcEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 faea 	bl	80011d4 <_ZNSt15__new_allocatorISt4pairIKcPcEEC1Ev>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <_ZNSaISt4pairIKcPcEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f000 fae9 	bl	80011ea <_ZNSt15__new_allocatorISt4pairIKcPcEED1Ev>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
      map(initializer_list<value_type> __l,
 8000c22:	b5b0      	push	{r4, r5, r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	1d38      	adds	r0, r7, #4
 8000c2c:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c30:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8000c32:	68fc      	ldr	r4, [r7, #12]
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fae0 	bl	8001200 <_ZNSaISt4pairIKcPcEEC1ERKS3_>
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	461a      	mov	r2, r3
 8000c46:	6839      	ldr	r1, [r7, #0]
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f000 fae7 	bl	800121c <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffd9 	bl	8000c0a <_ZNSaISt4pairIKcPcEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8000c58:	68fc      	ldr	r4, [r7, #12]
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 fafb 	bl	8001258 <_ZNKSt16initializer_listISt4pairIKcPcEE5beginEv>
 8000c62:	4605      	mov	r5, r0
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fb02 	bl	8001270 <_ZNKSt16initializer_listISt4pairIKcPcEE3endEv>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4629      	mov	r1, r5
 8000c72:	4620      	mov	r0, r4
 8000c74:	f000 fb0e 	bl	8001294 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bdb0      	pop	{r4, r5, r7, pc}

08000c82 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 fb2f 	bl	80012ee <_ZNSaISt13_Rb_tree_nodeISt4pairIKcPcEEED1Ev>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 fb4f 	bl	8001346 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4619      	mov	r1, r3
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f000 fb2a 	bl	8001306 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ffe4 	bl	8000c82 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEEixERS4_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b08b      	sub	sp, #44	@ 0x2c
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 8000cce:	6839      	ldr	r1, [r7, #0]
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f000 fb44 	bl	800135e <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEE11lower_boundERS4_>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 fb4e 	bl	800137c <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEE3endEv>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	f107 020c 	add.w	r2, r7, #12
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fb51 	bl	8001396 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKcPcEES6_>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d112      	bne.n	8000d20 <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEEixERS4_+0x5c>
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 fb5f 	bl	80013be <_ZNKSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEE8key_compEv>
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 fb67 	bl	80013d8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKcPcEEdeEv>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	6839      	ldr	r1, [r7, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 fb6d 	bl	80013f4 <_ZNKSt4lessIcEclERKcS2_>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEEixERS4_+0x60>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEEixERS4_+0x62>
 8000d24:	2300      	movs	r3, #0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d01b      	beq.n	8000d62 <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEEixERS4_+0x9e>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000d2a:	687c      	ldr	r4, [r7, #4]
 8000d2c:	f107 0208 	add.w	r2, r7, #8
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4611      	mov	r1, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fb80 	bl	800143c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKcPcEEC1ERKSt17_Rb_tree_iteratorIS3_E>
					    std::tuple<const key_type&>(__k),
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	6839      	ldr	r1, [r7, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fb6b 	bl	800141e <_ZNSt5tupleIJRKcEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000d48:	f107 0218 	add.w	r2, r7, #24
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	4613      	mov	r3, r2
 8000d54:	4a08      	ldr	r2, [pc, #32]	@ (8000d78 <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEEixERS4_+0xb4>)
 8000d56:	6979      	ldr	r1, [r7, #20]
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f000 fb7f 	bl	800145c <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fb36 	bl	80013d8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKcPcEEdeEv>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	3304      	adds	r3, #4
      }
 8000d70:	4618      	mov	r0, r3
 8000d72:	3724      	adds	r7, #36	@ 0x24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	080055c8 	.word	0x080055c8

08000d7c <_ZNSt6vectorIPcSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d00c      	beq.n	8000dac <_ZNSt6vectorIPcSaIS0_EE9push_backERKS0_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f000 fba4 	bl	80014e8 <_ZNSt16allocator_traitsISaIPcEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	1d1a      	adds	r2, r3, #4
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8000daa:	e008      	b.n	8000dbe <_ZNSt6vectorIPcSaIS0_EE9push_backERKS0_+0x42>
	  _M_realloc_insert(end(), __x);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f84e 	bl	8000e4e <_ZNSt6vectorIPcSaIS0_EE3endEv>
 8000db2:	4603      	mov	r3, r0
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	4619      	mov	r1, r3
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 fbbf 	bl	800153c <_ZNSt6vectorIPcSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d00d      	beq.n	8000df8 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE9push_backERKS2_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f000 fc65 	bl	80016b4 <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f103 020c 	add.w	r2, r3, #12
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	605a      	str	r2, [r3, #4]
      }
 8000df6:	e008      	b.n	8000e0a <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE9push_backERKS2_+0x44>
	  _M_realloc_insert(end(), __x);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f87d 	bl	8000ef8 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE3endEv>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	4619      	mov	r1, r3
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 fc7f 	bl	8001708 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_ZNSt6vectorIPcSaIS0_EE5clearEv>:
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      void
      clear() _GLIBCXX_NOEXCEPT
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f000 fd39 	bl	8001898 <_ZNSt6vectorIPcSaIS0_EE15_M_erase_at_endEPS0_>
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_ZNSt6vectorIPcSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fd59 	bl	80018f6 <_ZN9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_ZNSt6vectorIPcSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	1d1a      	adds	r2, r3, #4
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 fd48 	bl	80018f6 <_ZN9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_ZN9__gnu_cxxneIPPcSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 fd4b 	bl	8001916 <_ZNK9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEE4baseEv>
 8000e80:	4603      	mov	r3, r0
 8000e82:	681c      	ldr	r4, [r3, #0]
 8000e84:	6838      	ldr	r0, [r7, #0]
 8000e86:	f000 fd46 	bl	8001916 <_ZNK9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEE4baseEv>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429c      	cmp	r4, r3
 8000e90:	bf14      	ite	ne
 8000e92:	2301      	movne	r3, #1
 8000e94:	2300      	moveq	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd90      	pop	{r4, r7, pc}

08000ea0 <_ZN9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	++_M_current;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	1d1a      	adds	r2, r3, #4
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	601a      	str	r2, [r3, #0]
	return *this;
 8000eb2:	687b      	ldr	r3, [r7, #4]
      }
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fd1f 	bl	800192c <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEC1ERKS5_>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	1d1a      	adds	r2, r3, #4
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fd0e 	bl	800192c <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEC1ERKS5_>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_ZN9__gnu_cxxneIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000f1a:	b590      	push	{r4, r7, lr}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 fd11 	bl	800194c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEE4baseEv>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	681c      	ldr	r4, [r3, #0]
 8000f2e:	6838      	ldr	r0, [r7, #0]
 8000f30:	f000 fd0c 	bl	800194c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEE4baseEv>
 8000f34:	4603      	mov	r3, r0
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	429c      	cmp	r4, r3
 8000f3a:	bf14      	ite	ne
 8000f3c:	2301      	movne	r3, #1
 8000f3e:	2300      	moveq	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd90      	pop	{r4, r7, pc}

08000f4a <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
	++_M_current;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f103 020c 	add.w	r2, r3, #12
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	601a      	str	r2, [r3, #0]
	return *this;
 8000f5e:	687b      	ldr	r3, [r7, #4]
      }
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <_ZNSt6vectorIPcSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
 8000f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8000f8e:	687c      	ldr	r4, [r7, #4]
 8000f90:	6838      	ldr	r0, [r7, #0]
 8000f92:	f000 fce6 	bl	8001962 <_ZNKSt6vectorIPcSaIS0_EE4sizeEv>
 8000f96:	4605      	mov	r5, r0
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fcf1 	bl	8001982 <_ZNKSt12_Vector_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fcf5 	bl	8001998 <_ZN9__gnu_cxx14__alloc_traitsISaIPcES1_E17_S_select_on_copyERKS2_>
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4629      	mov	r1, r5
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f000 fcfc 	bl	80019b4 <_ZNSt12_Vector_baseIPcSaIS0_EEC1EjRKS1_>
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fdd6 	bl	8000b72 <_ZNSaIPcED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8000fc6:	6838      	ldr	r0, [r7, #0]
 8000fc8:	f000 fd08 	bl	80019dc <_ZNKSt6vectorIPcSaIS0_EE5beginEv>
 8000fcc:	4605      	mov	r5, r0
 8000fce:	6838      	ldr	r0, [r7, #0]
 8000fd0:	f000 fd14 	bl	80019fc <_ZNKSt6vectorIPcSaIS0_EE3endEv>
 8000fd4:	4606      	mov	r6, r0
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f8e0 	bl	80011a2 <_ZNSt12_Vector_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 8000fe2:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8000fe4:	4622      	mov	r2, r4
 8000fe6:	4631      	mov	r1, r6
 8000fe8:	4628      	mov	r0, r5
 8000fea:	f000 fd18 	bl	8001a1e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E>
 8000fee:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	605a      	str	r2, [r3, #4]
      }
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ffe <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EEC1ERKS4_>:
      vector(const vector& __x)
 8000ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001000:	b085      	sub	sp, #20
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8001008:	687c      	ldr	r4, [r7, #4]
 800100a:	6838      	ldr	r0, [r7, #0]
 800100c:	f000 fd18 	bl	8001a40 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE4sizeEv>
 8001010:	4605      	mov	r5, r0
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 fd29 	bl	8001a6c <_ZNKSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE19_M_get_Tp_allocatorEv>
 800101a:	4602      	mov	r2, r0
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	4611      	mov	r1, r2
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fd2d 	bl	8001a82 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIPcSaIS2_EEES4_E17_S_select_on_copyERKS5_>
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	461a      	mov	r2, r3
 800102e:	4629      	mov	r1, r5
 8001030:	4620      	mov	r0, r4
 8001032:	f000 fd34 	bl	8001a9e <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EEC1EjRKS4_>
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fd44 	bl	8000ac8 <_ZNSaISt6vectorIPcSaIS0_EEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8001040:	6838      	ldr	r0, [r7, #0]
 8001042:	f000 fd40 	bl	8001ac6 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE5beginEv>
 8001046:	4605      	mov	r5, r0
 8001048:	6838      	ldr	r0, [r7, #0]
 800104a:	f000 fd4c 	bl	8001ae6 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE3endEv>
 800104e:	4606      	mov	r6, r0
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f84c 	bl	80010f4 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE19_M_get_Tp_allocatorEv>
 800105c:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800105e:	4622      	mov	r2, r4
 8001060:	4631      	mov	r1, r6
 8001062:	4628      	mov	r0, r5
 8001064:	f000 fd50 	bl	8001b08 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS3_EES2_IS5_SaIS5_EEEEPS5_S5_ET0_T_SD_SC_RSaIT1_E>
 8001068:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	605a      	str	r2, [r3, #4]
      }
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001078 <_ZNSaISt6vectorIPcSaIS0_EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 fd52 	bl	8001b2a <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEEC1Ev>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
	{ }
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
	if (__p)
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fd2a 	bl	8001b40 <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE10deallocateERS4_PS3_j>
      }
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <_ZSt8_DestroyIPSt6vectorIPcSaIS1_EES3_EvT_S5_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f000 fd20 	bl	8001b5e <_ZSt8_DestroyIPSt6vectorIPcSaIS1_EEEvT_S5_>
    }
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_ZNSaIPcEC1Ev>:
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 fd22 	bl	8001b78 <_ZNSt15__new_allocatorIPcEC1Ev>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <_ZNSt12_Vector_baseIPcSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
	{ }
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_ZNSt15__new_allocatorIPcED1Ev>:
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_ZNSt12_Vector_baseIPcSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
	if (__p)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d005      	beq.n	800119a <_ZNSt12_Vector_baseIPcSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	68b9      	ldr	r1, [r7, #8]
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fcfa 	bl	8001b8e <_ZNSt16allocator_traitsISaIPcEE10deallocateERS1_PS0_j>
      }
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <_ZNSt12_Vector_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <_ZSt8_DestroyIPPcS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 fcf0 	bl	8001bac <_ZSt8_DestroyIPPcEvT_S2_>
    }
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_ZNSt15__new_allocatorISt4pairIKcPcEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_ZNSt15__new_allocatorISt4pairIKcPcEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_ZNSaISt4pairIKcPcEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800120a:	6839      	ldr	r1, [r7, #0]
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 fcda 	bl	8001bc6 <_ZNSt15__new_allocatorISt4pairIKcPcEEC1ERKS4_>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree(const _Compare& __comp,
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8001228:	68fc      	ldr	r4, [r7, #12]
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fcd4 	bl	8001bde <_ZNSaISt13_Rb_tree_nodeISt4pairIKcPcEEEC1IS3_EERKSaIT_E>
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	461a      	mov	r2, r3
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	4620      	mov	r0, r4
 8001240:	f000 fcda 	bl	8001bf8 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4618      	mov	r0, r3
 800124a:	f000 f850 	bl	80012ee <_ZNSaISt13_Rb_tree_nodeISt4pairIKcPcEEED1Ev>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4618      	mov	r0, r3
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd90      	pop	{r4, r7, pc}

08001258 <_ZNKSt16initializer_listISt4pairIKcPcEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_ZNKSt16initializer_listISt4pairIKcPcEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ffed 	bl	8001258 <_ZNKSt16initializer_listISt4pairIKcPcEE5beginEv>
 800127e:	4604      	mov	r4, r0
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 fcd6 	bl	8001c32 <_ZNKSt16initializer_listISt4pairIKcPcEE4sizeEv>
 8001286:	4603      	mov	r3, r0
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	4423      	add	r3, r4
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bd90      	pop	{r4, r7, pc}

08001294 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	using __same_value_type
	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;

      template<typename _InputIterator>
	__enable_if_t<__same_value_type<_InputIterator>::value>
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
	{
	  _Alloc_node __an(*this);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	68f9      	ldr	r1, [r7, #12]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fccf 	bl	8001c4a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 80012ac:	e016      	b.n	80012dc <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x48>
	    _M_insert_unique_(end(), *__first, __an);
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 fcda 	bl	8001c68 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 80012b4:	4603      	mov	r3, r0
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	f107 021c 	add.w	r2, r7, #28
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f8ba 	bl	800143c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKcPcEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 fcda 	bl	8001c8a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	3308      	adds	r3, #8
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d1e4      	bne.n	80012ae <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x1a>
	}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_ZNSaISt13_Rb_tree_nodeISt4pairIKcPcEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fcfa 	bl	8001cf0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEED1Ev>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8001310:	e011      	b.n	8001336 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x30>
	{
	  _M_erase(_S_right(__x));
 8001312:	6838      	ldr	r0, [r7, #0]
 8001314:	f000 fcf7 	bl	8001d06 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001318:	4603      	mov	r3, r0
 800131a:	4619      	mov	r1, r3
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fff2 	bl	8001306 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 8001322:	6838      	ldr	r0, [r7, #0]
 8001324:	f000 fcfb 	bl	8001d1e <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001328:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800132a:	6839      	ldr	r1, [r7, #0]
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 fd02 	bl	8001d36 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1ea      	bne.n	8001312 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xc>
	}
    }
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fd02 	bl	8001d58 <_ZNKSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE9_M_mbeginEv>
 8001354:	4603      	mov	r3, r0
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEE11lower_boundERS4_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fcff 	bl	8001d70 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11lower_boundERS1_>
 8001372:	4603      	mov	r3, r0
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <_ZNSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fc6e 	bl	8001c68 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>
 800138c:	4603      	mov	r3, r0
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKcPcEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	bf0c      	ite	eq
 80013ac:	2301      	moveq	r3, #1
 80013ae:	2300      	movne	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_ZNKSt3mapIcPcSt4lessIcESaISt4pairIKcS0_EEE8key_compEv>:
      key_comp() const
 80013be:	b590      	push	{r4, r7, lr}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fce8 	bl	8001d9e <_ZNKSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8key_compEv>
 80013ce:	bf00      	nop
 80013d0:	4620      	mov	r0, r4
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd90      	pop	{r4, r7, pc}

080013d8 <_ZNKSt17_Rb_tree_iteratorISt4pairIKcPcEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 fce5 	bl	8001db4 <_ZNSt13_Rb_tree_nodeISt4pairIKcPcEE9_M_valptrEv>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_ZNKSt4lessIcEclERKcS2_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	bf34      	ite	cc
 800140c:	2301      	movcc	r3, #1
 800140e:	2300      	movcs	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <_ZNSt5tupleIJRKcEEC1ILb1ELb1EEES1_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6839      	ldr	r1, [r7, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fccf 	bl	8001dd0 <_ZNSt11_Tuple_implILj0EJRKcEEC1ES1_>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKcPcEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b08c      	sub	sp, #48	@ 0x30
 8001460:	af02      	add	r7, sp, #8
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 fcbf 	bl	8001dee <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001470:	4604      	mov	r4, r0
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	f000 fcc6 	bl	8001e04 <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001478:	4605      	mov	r5, r0
 800147a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800147c:	f000 fccd 	bl	8001e1a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001480:	4603      	mov	r3, r0
 8001482:	f107 001c 	add.w	r0, r7, #28
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	462b      	mov	r3, r5
 800148a:	4622      	mov	r2, r4
 800148c:	68f9      	ldr	r1, [r7, #12]
 800148e:	f000 fccf 	bl	8001e30 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEERS9_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fe25 	bl	80020e6 <_ZNKSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_Auto_node6_M_keyEv>
 800149c:	4603      	mov	r3, r0
 800149e:	f107 0014 	add.w	r0, r7, #20
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	68f9      	ldr	r1, [r7, #12]
 80014a6:	f000 fcfb 	bl	8001ea0 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>
	if (__res.second)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x68>
	  return __z._M_insert(__res);
 80014b0:	f107 001c 	add.w	r0, r7, #28
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014bc:	f000 fe21 	bl	8002102 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_Auto_node9_M_insertES0_IPSt18_Rb_tree_node_baseSC_E>
 80014c0:	4604      	mov	r4, r0
 80014c2:	e007      	b.n	80014d4 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x78>
	return iterator(__res.first);
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fe31 	bl	8002134 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEC1EPSt18_Rb_tree_node_base>
 80014d2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fccc 	bl	8001e76 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_Auto_nodeD1Ev>
 80014de:	4623      	mov	r3, r4
 80014e0:	4618      	mov	r0, r3
 80014e2:	3728      	adds	r7, #40	@ 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bdb0      	pop	{r4, r5, r7, pc}

080014e8 <_ZNSt16allocator_traitsISaIPcEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fe2c 	bl	8002152 <_ZSt7forwardIRKPcEOT_RNSt16remove_referenceIS3_E4typeE>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 fe31 	bl	8002168 <_ZNSt15__new_allocatorIPcE9constructIS0_JRKS0_EEEvPT_DpOT0_>
	}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_ZNSt6vectorIPcSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f805 	bl	8001524 <_ZNSt6vectorIPcSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800151a:	4603      	mov	r3, r0
      }
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_ZNSt6vectorIPcSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800152c:	2301      	movs	r3, #1
      }
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <_ZNSt6vectorIPcSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001548:	4a59      	ldr	r2, [pc, #356]	@ (80016b0 <_ZNSt6vectorIPcSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 800154a:	2101      	movs	r1, #1
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 fe21 	bl	8002194 <_ZNKSt6vectorIPcSaIS0_EE12_M_check_lenEjPKc>
 8001552:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff fc64 	bl	8000e2e <_ZNSt6vectorIPcSaIS0_EE5beginEv>
 8001566:	4603      	mov	r3, r0
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	f107 0214 	add.w	r2, r7, #20
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f000 fe54 	bl	8002222 <_ZN9__gnu_cxxmiIPPcSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800157a:	4603      	mov	r3, r0
 800157c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fe62 	bl	800224c <_ZNSt12_Vector_baseIPcSaIS0_EE11_M_allocateEj>
 8001588:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800158e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	18d5      	adds	r5, r2, r3
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 fdda 	bl	8002152 <_ZSt7forwardIRKPcEOT_RNSt16remove_referenceIS3_E4typeE>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4629      	mov	r1, r5
 80015a4:	4620      	mov	r0, r4
 80015a6:	f7ff ff9f 	bl	80014e8 <_ZNSt16allocator_traitsISaIPcEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80015ae:	f7ff ffae 	bl	800150e <_ZNSt6vectorIPcSaIS0_EE15_S_use_relocateEv>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d027      	beq.n	8001608 <_ZNSt6vectorIPcSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 f9aa 	bl	8001916 <_ZNK9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEE4baseEv>
 80015c2:	4603      	mov	r3, r0
 80015c4:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fdea 	bl	80011a2 <_ZNSt12_Vector_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 80015ce:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4621      	mov	r1, r4
 80015d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015d6:	f000 fe4d 	bl	8002274 <_ZNSt6vectorIPcSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80015da:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 80015dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015de:	3304      	adds	r3, #4
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f995 	bl	8001916 <_ZNK9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEE4baseEv>
 80015ec:	4603      	mov	r3, r0
 80015ee:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fdd5 	bl	80011a2 <_ZNSt12_Vector_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 80015f8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80015fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015fc:	6a39      	ldr	r1, [r7, #32]
 80015fe:	4620      	mov	r0, r4
 8001600:	f000 fe38 	bl	8002274 <_ZNSt6vectorIPcSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8001604:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001606:	e026      	b.n	8001656 <_ZNSt6vectorIPcSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	4618      	mov	r0, r3
 800160e:	f000 f982 	bl	8001916 <_ZNK9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEE4baseEv>
 8001612:	4603      	mov	r3, r0
 8001614:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fdc2 	bl	80011a2 <_ZNSt12_Vector_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 800161e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4621      	mov	r1, r4
 8001624:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001626:	f000 fe39 	bl	800229c <_ZSt34__uninitialized_move_if_noexcept_aIPPcS1_SaIS0_EET0_T_S4_S3_RT1_>
 800162a:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 800162c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162e:	3304      	adds	r3, #4
 8001630:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f96d 	bl	8001916 <_ZNK9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEE4baseEv>
 800163c:	4603      	mov	r3, r0
 800163e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fdad 	bl	80011a2 <_ZNSt12_Vector_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 8001648:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800164a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800164c:	6a39      	ldr	r1, [r7, #32]
 800164e:	4620      	mov	r0, r4
 8001650:	f000 fe24 	bl	800229c <_ZSt34__uninitialized_move_if_noexcept_aIPPcS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001654:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8001656:	f7ff ff5a 	bl	800150e <_ZNSt6vectorIPcSaIS0_EE15_S_use_relocateEv>
 800165a:	4603      	mov	r3, r0
 800165c:	f083 0301 	eor.w	r3, r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d009      	beq.n	800167a <_ZNSt6vectorIPcSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fd9a 	bl	80011a2 <_ZNSt12_Vector_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	6a39      	ldr	r1, [r7, #32]
 8001674:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001676:	f7ff fd9f 	bl	80011b8 <_ZSt8_DestroyIPPcS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800167a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8001686:	461a      	mov	r2, r3
 8001688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800168a:	f7ff fd77 	bl	800117c <_ZNSt12_Vector_baseIPcSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001698:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800169a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	441a      	add	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	609a      	str	r2, [r3, #8]
    }
 80016a6:	bf00      	nop
 80016a8:	3730      	adds	r7, #48	@ 0x30
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bdb0      	pop	{r4, r5, r7, pc}
 80016ae:	bf00      	nop
 80016b0:	080055ac 	.word	0x080055ac

080016b4 <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 fe04 	bl	80022ce <_ZSt7forwardIRKSt6vectorIPcSaIS1_EEEOT_RNSt16remove_referenceIS6_E4typeE>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f000 fe09 	bl	80022e4 <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f805 	bl	80016f0 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80016e6:	4603      	mov	r3, r0
      }
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80016f8:	2301      	movs	r3, #1
      }
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8001708:	b5b0      	push	{r4, r5, r7, lr}
 800170a:	b08c      	sub	sp, #48	@ 0x30
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001714:	4a5e      	ldr	r2, [pc, #376]	@ (8001890 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x188>)
 8001716:	2101      	movs	r1, #1
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 fdfb 	bl	8002314 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE12_M_check_lenEjPKc>
 800171e:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff fbd3 	bl	8000ed8 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE5beginEv>
 8001732:	4603      	mov	r3, r0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	f107 0214 	add.w	r2, r7, #20
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fe2f 	bl	80023a4 <_ZN9__gnu_cxxmiIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8001746:	4603      	mov	r3, r0
 8001748:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800174e:	4618      	mov	r0, r3
 8001750:	f000 fe42 	bl	80023d8 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE11_M_allocateEj>
 8001754:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800175a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	189d      	adds	r5, r3, r2
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 fdae 	bl	80022ce <_ZSt7forwardIRKSt6vectorIPcSaIS1_EEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	4629      	mov	r1, r5
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff ff9b 	bl	80016b4 <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
	  __new_finish = pointer();
 800177e:	2300      	movs	r3, #0
 8001780:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8001782:	f7ff ffaa 	bl	80016da <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE15_S_use_relocateEv>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d027      	beq.n	80017dc <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xd4>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f8db 	bl	800194c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEE4baseEv>
 8001796:	4603      	mov	r3, r0
 8001798:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fca9 	bl	80010f4 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE19_M_get_Tp_allocatorEv>
 80017a2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4621      	mov	r1, r4
 80017a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017aa:	f000 fe29 	bl	8002400 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 80017ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 80017b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b2:	330c      	adds	r3, #12
 80017b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f8c6 	bl	800194c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEE4baseEv>
 80017c0:	4603      	mov	r3, r0
 80017c2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fc94 	bl	80010f4 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE19_M_get_Tp_allocatorEv>
 80017cc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80017ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017d0:	6a39      	ldr	r1, [r7, #32]
 80017d2:	4620      	mov	r0, r4
 80017d4:	f000 fe14 	bl	8002400 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 80017d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80017da:	e026      	b.n	800182a <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x122>
		(__old_start, __position.base(),
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 f8b3 	bl	800194c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEE4baseEv>
 80017e6:	4603      	mov	r3, r0
 80017e8:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fc81 	bl	80010f4 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE19_M_get_Tp_allocatorEv>
 80017f2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4621      	mov	r1, r4
 80017f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017fa:	f000 fe15 	bl	8002428 <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIPcSaIS1_EES4_SaIS3_EET0_T_S7_S6_RT1_>
 80017fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 8001800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001802:	330c      	adds	r3, #12
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
		(__position.base(), __old_finish,
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f89e 	bl	800194c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEE4baseEv>
 8001810:	4603      	mov	r3, r0
 8001812:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fc6c 	bl	80010f4 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE19_M_get_Tp_allocatorEv>
 800181c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800181e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001820:	6a39      	ldr	r1, [r7, #32]
 8001822:	4620      	mov	r0, r4
 8001824:	f000 fe00 	bl	8002428 <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIPcSaIS1_EES4_SaIS3_EET0_T_S7_S6_RT1_>
 8001828:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800182a:	f7ff ff56 	bl	80016da <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE15_S_use_relocateEv>
 800182e:	4603      	mov	r3, r0
 8001830:	f083 0301 	eor.w	r3, r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x146>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fc59 	bl	80010f4 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE19_M_get_Tp_allocatorEv>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	6a39      	ldr	r1, [r7, #32]
 8001848:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800184a:	f7ff fc5e 	bl	800110a <_ZSt8_DestroyIPSt6vectorIPcSaIS1_EES3_EvT_S5_RSaIT0_E>
      _M_deallocate(__old_start,
 800184e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	109b      	asrs	r3, r3, #2
 800185a:	4a0e      	ldr	r2, [pc, #56]	@ (8001894 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x18c>)
 800185c:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8001860:	461a      	mov	r2, r3
 8001862:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001864:	f7ff fc33 	bl	80010ce <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001872:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001874:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	461a      	mov	r2, r3
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	441a      	add	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	609a      	str	r2, [r3, #8]
    }
 8001888:	bf00      	nop
 800188a:	3730      	adds	r7, #48	@ 0x30
 800188c:	46bd      	mov	sp, r7
 800188e:	bdb0      	pop	{r4, r5, r7, pc}
 8001890:	080055ac 	.word	0x080055ac
 8001894:	aaaaaaab 	.word	0xaaaaaaab

08001898 <_ZNSt6vectorIPcSaIS0_EE15_M_erase_at_endEPS0_>:

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	109b      	asrs	r3, r3, #2
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00e      	beq.n	80018d2 <_ZNSt6vectorIPcSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fc71 	bl	80011a2 <_ZNSt12_Vector_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 80018c0:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80018c2:	461a      	mov	r2, r3
 80018c4:	4621      	mov	r1, r4
 80018c6:	6838      	ldr	r0, [r7, #0]
 80018c8:	f7ff fc76 	bl	80011b8 <_ZSt8_DestroyIPPcS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd90      	pop	{r4, r7, pc}

080018da <_ZNSaISt6vectorIPcSaIS0_EEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80018e4:	6839      	ldr	r1, [r7, #0]
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 fdc4 	bl	8002474 <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEEC1ERKS4_>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_ZN9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_ZNK9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_ZNKSt6vectorIPcSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	109b      	asrs	r3, r3, #2
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_ZNKSt12_Vector_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_ZN9__gnu_cxx14__alloc_traitsISaIPcES1_E17_S_select_on_copyERKS2_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6839      	ldr	r1, [r7, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fd70 	bl	800248c <_ZNSt16allocator_traitsISaIPcEE37select_on_container_copy_constructionERKS1_>
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_ZNSt12_Vector_baseIPcSaIS0_EEC1EjRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fd7c 	bl	80024c2 <_ZNSt12_Vector_baseIPcSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
 80019ca:	68b9      	ldr	r1, [r7, #8]
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 fd8a 	bl	80024e6 <_ZNSt12_Vector_baseIPcSaIS0_EE17_M_create_storageEj>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_ZNKSt6vectorIPcSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fd95 	bl	800251c <_ZN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_ZNKSt6vectorIPcSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	1d1a      	adds	r2, r3, #4
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fd84 	bl	800251c <_ZN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E>:
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	603b      	str	r3, [r7, #0]
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return std::__do_uninit_copy(__first, __last, __result);
#endif
      return std::uninitialized_copy(__first, __last, __result);
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 fd83 	bl	800253c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>
 8001a36:	4603      	mov	r3, r0
    }
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	109b      	asrs	r3, r3, #2
 8001a54:	4a04      	ldr	r2, [pc, #16]	@ (8001a68 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE4sizeEv+0x28>)
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	aaaaaaab 	.word	0xaaaaaaab

08001a6c <_ZNKSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIPcSaIS2_EEES4_E17_S_select_on_copyERKS5_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6839      	ldr	r1, [r7, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fd67 	bl	8002564 <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE37select_on_container_copy_constructionERKS4_>
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EEC1EjRKS4_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fd65 	bl	800257e <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE12_Vector_implC1ERKS4_>
      { _M_create_storage(__n); }
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 fd73 	bl	80025a2 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE17_M_create_storageEj>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fd81 	bl	80025de <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEC1ERKS6_>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	1d1a      	adds	r2, r3, #4
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 fd70 	bl	80025de <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEC1ERKS6_>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS3_EES2_IS5_SaIS5_EEEEPS5_S5_ET0_T_SD_SC_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 fd6f 	bl	80025fe <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS3_EES2_IS5_SaIS5_EEEEPS5_ET0_T_SD_SC_>
 8001b20:	4603      	mov	r3, r0
    }
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 fd68 	bl	8002626 <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEE10deallocateEPS3_j>
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_ZSt8_DestroyIPSt6vectorIPcSaIS1_EEEvT_S5_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8001b68:	6839      	ldr	r1, [r7, #0]
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fd6e 	bl	800264c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIPcSaIS3_EEEEvT_S7_>
    }
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_ZNSt15__new_allocatorIPcEC1Ev>:
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <_ZNSt16allocator_traitsISaIPcEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fd6d 	bl	800267e <_ZNSt15__new_allocatorIPcE10deallocateEPS0_j>
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_ZSt8_DestroyIPPcEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001bb6:	6839      	ldr	r1, [r7, #0]
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 fd70 	bl	800269e <_ZNSt12_Destroy_auxILb1EE9__destroyIPPcEEvT_S4_>
    }
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_ZNSt15__new_allocatorISt4pairIKcPcEEC1ERKS4_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <_ZNSaISt13_Rb_tree_nodeISt4pairIKcPcEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fd63 	bl	80026b4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEEC1Ev>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 fd60 	bl	80026ca <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKcPcEEEEONSt16remove_referenceIT_E4typeEOS9_>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 fd66 	bl	80026e0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKcPcEEEC1ERKS5_>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	68b9      	ldr	r1, [r7, #8]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 fd6f 	bl	80026fc <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3304      	adds	r3, #4
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fc5a 	bl	80004dc <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <_ZNKSt16initializer_listISt4pairIKcPcEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	1d1a      	adds	r2, r3, #4
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fa5a 	bl	8002134 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEC1EPSt18_Rb_tree_node_base>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001c8a:	b5b0      	push	{r4, r5, r7, lr}
 8001c8c:	b08a      	sub	sp, #40	@ 0x28
 8001c8e:	af02      	add	r7, sp, #8
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8001c98:	f107 0318 	add.w	r3, r7, #24
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fd38 	bl	8002714 <_ZNKSt10_Select1stISt4pairIKcPcEEclERKS3_>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f107 0010 	add.w	r0, r7, #16
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	68f9      	ldr	r1, [r7, #12]
 8001cae:	f000 f8f7 	bl	8001ea0 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>
      if (__res.second)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00f      	beq.n	8001cd8 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8001cb8:	693c      	ldr	r4, [r7, #16]
 8001cba:	697d      	ldr	r5, [r7, #20]
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fd35 	bl	800272c <_ZSt7forwardIRKSt4pairIKcPcEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	462a      	mov	r2, r5
 8001ccc:	4621      	mov	r1, r4
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 fd37 	bl	8002742 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 8001cd4:	4603      	mov	r3, r0
			  __node_gen);
 8001cd6:	e007      	b.n	8001ce8 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 fa27 	bl	8002134 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEC1EPSt18_Rb_tree_node_base>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
    }
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bdb0      	pop	{r4, r5, r7, pc}

08001cf0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001d40:	6839      	ldr	r1, [r7, #0]
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fd46 	bl	80027d4 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 8001d48:	6839      	ldr	r1, [r7, #0]
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fd57 	bl	80027fe <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_ZNKSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fae3 	bl	8001346 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 8001d80:	4604      	mov	r4, r0
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fd4d 	bl	8002822 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fd53 	bl	800283a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd90      	pop	{r4, r7, pc}

08001d9e <_ZNKSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8key_compEv>:
      key_comp() const
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8001da6:	bf00      	nop
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <_ZNSt13_Rb_tree_nodeISt4pairIKcPcEE9_M_valptrEv>:
      _M_valptr()
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3310      	adds	r3, #16
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fd6b 	bl	800289c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKcPcEE6_M_ptrEv>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_ZNSt11_Tuple_implILj0EJRKcEEC1ES1_>:
      _Tuple_impl(const _Head& __head)
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6839      	ldr	r1, [r7, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fd68 	bl	80028b4 <_ZNSt10_Head_baseILj0ERKcLb0EEC1ES1_>
      { }
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEERS9_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ffd2 	bl	8001dee <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	6838      	ldr	r0, [r7, #0]
 8001e4e:	f7ff ffd9 	bl	8001e04 <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001e52:	4605      	mov	r5, r0
 8001e54:	6a38      	ldr	r0, [r7, #32]
 8001e56:	f7ff ffe0 	bl	8001e1a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	462a      	mov	r2, r5
 8001e5e:	4621      	mov	r1, r4
 8001e60:	68b8      	ldr	r0, [r7, #8]
 8001e62:	f000 fd36 	bl	80028d2 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 8001e66:	4602      	mov	r2, r0
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	605a      	str	r2, [r3, #4]
	  { }
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bdb0      	pop	{r4, r5, r7, pc}

08001e76 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4610      	mov	r0, r2
 8001e92:	f7ff ff50 	bl	8001d36 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	}
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b08d      	sub	sp, #52	@ 0x34
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 fd31 	bl	8002918 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKcPcEE13_M_const_castEv>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8001eba:	69bc      	ldr	r4, [r7, #24]
 8001ebc:	68b8      	ldr	r0, [r7, #8]
 8001ebe:	f000 fcb0 	bl	8002822 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	429c      	cmp	r4, r3
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d030      	beq.n	8001f34 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 8001ed2:	68b8      	ldr	r0, [r7, #8]
 8001ed4:	f000 fd31 	bl	800293a <_ZNKSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>
 8001ed8:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d013      	beq.n	8001f06 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8001ede:	68bc      	ldr	r4, [r7, #8]
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f000 fd36 	bl	8002952 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 fd3d 	bl	800296a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	f7ff fa7c 	bl	80013f4 <_ZNKSt4lessIcEclERKcS2_>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 8001f06:	2300      	movs	r3, #0
	  if (size() > 0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00c      	beq.n	8001f26 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	68b8      	ldr	r0, [r7, #8]
 8001f12:	f000 fd1e 	bl	8002952 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8001f16:	4602      	mov	r2, r0
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fd2f 	bl	8002982 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001f24:	e0db      	b.n	80020de <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fd3d 	bl	80029ac <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8001f32:	e0d4      	b.n	80020de <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001f34:	68bc      	ldr	r4, [r7, #8]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fd16 	bl	800296a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	4620      	mov	r0, r4
 8001f46:	f7ff fa55 	bl	80013f4 <_ZNKSt4lessIcEclERKcS2_>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d057      	beq.n	8002000 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8001f54:	69bc      	ldr	r4, [r7, #24]
 8001f56:	68b8      	ldr	r0, [r7, #8]
 8001f58:	f000 fdad 	bl	8002ab6 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	429c      	cmp	r4, r3
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00d      	beq.n	8001f8a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8001f6e:	68b8      	ldr	r0, [r7, #8]
 8001f70:	f000 fda1 	bl	8002ab6 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8001f74:	4604      	mov	r4, r0
 8001f76:	68b8      	ldr	r0, [r7, #8]
 8001f78:	f000 fd9d 	bl	8002ab6 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4621      	mov	r1, r4
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fda3 	bl	8002ace <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001f88:	e0a9      	b.n	80020de <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8001f8a:	68bc      	ldr	r4, [r7, #8]
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fdb5 	bl	8002b00 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEmmEv>
 8001f96:	4603      	mov	r3, r0
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fce5 	bl	800296a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f7ff fa24 	bl	80013f4 <_ZNKSt4lessIcEclERKcS2_>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d01f      	beq.n	8001ff2 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fea6 	bl	8001d06 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8001fca:	2300      	movs	r3, #0
 8001fcc:	623b      	str	r3, [r7, #32]
 8001fce:	f107 0214 	add.w	r2, r7, #20
 8001fd2:	f107 0320 	add.w	r3, r7, #32
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fcd2 	bl	8002982 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001fde:	e07e      	b.n	80020de <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8001fe0:	f107 0218 	add.w	r2, r7, #24
 8001fe4:	f107 0318 	add.w	r3, r7, #24
 8001fe8:	4619      	mov	r1, r3
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fd6f 	bl	8002ace <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001ff0:	e075      	b.n	80020de <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fcd7 	bl	80029ac <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 8001ffe:	e06e      	b.n	80020de <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8002000:	68bc      	ldr	r4, [r7, #8]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fcb0 	bl	800296a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800200a:	4603      	mov	r3, r0
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	4619      	mov	r1, r3
 8002010:	4620      	mov	r0, r4
 8002012:	f7ff f9ef 	bl	80013f4 <_ZNKSt4lessIcEclERKcS2_>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d056      	beq.n	80020ca <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8002020:	69bc      	ldr	r4, [r7, #24]
 8002022:	68b8      	ldr	r0, [r7, #8]
 8002024:	f000 fc95 	bl	8002952 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8002028:	4603      	mov	r3, r0
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	429c      	cmp	r4, r3
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00c      	beq.n	8002054 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
 800203e:	68b8      	ldr	r0, [r7, #8]
 8002040:	f000 fc87 	bl	8002952 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>
 8002044:	4602      	mov	r2, r0
 8002046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800204a:	4619      	mov	r1, r3
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 fc98 	bl	8002982 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8002052:	e044      	b.n	80020de <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8002054:	68bc      	ldr	r4, [r7, #8]
 8002056:	f107 0310 	add.w	r3, r7, #16
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fd61 	bl	8002b22 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEppEv>
 8002060:	4603      	mov	r3, r0
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fc80 	bl	800296a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	6839      	ldr	r1, [r7, #0]
 8002070:	4620      	mov	r0, r4
 8002072:	f7ff f9bf 	bl	80013f4 <_ZNKSt4lessIcEclERKcS2_>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01f      	beq.n	80020bc <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fe41 	bl	8001d06 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	bf0c      	ite	eq
 800208a:	2301      	moveq	r3, #1
 800208c:	2300      	movne	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002098:	f107 0218 	add.w	r2, r7, #24
 800209c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020a0:	4619      	mov	r1, r3
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fc6d 	bl	8002982 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 80020a8:	e019      	b.n	80020de <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80020aa:	f107 0210 	add.w	r2, r7, #16
 80020ae:	f107 0310 	add.w	r3, r7, #16
 80020b2:	4619      	mov	r1, r3
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fd0a 	bl	8002ace <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80020ba:	e010      	b.n	80020de <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fc72 	bl	80029ac <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>
 80020c8:	e009      	b.n	80020de <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020ce:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80020d2:	f107 0318 	add.w	r3, r7, #24
 80020d6:	4619      	mov	r1, r3
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 fc52 	bl	8002982 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	3734      	adds	r7, #52	@ 0x34
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd90      	pop	{r4, r7, pc}

080020e6 <_ZNKSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fd26 	bl	8002b44 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_Auto_node9_M_insertES0_IPSt18_Rb_tree_node_baseSC_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f000 fd25 	bl	8002b6a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>
 8002120:	4603      	mov	r3, r0
 8002122:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	605a      	str	r2, [r3, #4]
	  return __it;
 800212a:	697b      	ldr	r3, [r7, #20]
	}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <_ZSt7forwardIRKPcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_ZNSt15__new_allocatorIPcE9constructIS0_JRKS0_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4619      	mov	r1, r3
 8002178:	2004      	movs	r0, #4
 800217a:	f7fe f9a3 	bl	80004c4 <_ZnwjPv>
 800217e:	4604      	mov	r4, r0
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ffe6 	bl	8002152 <_ZSt7forwardIRKPcEOT_RNSt16remove_referenceIS3_E4typeE>
 8002186:	4603      	mov	r3, r0
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6023      	str	r3, [r4, #0]
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	bd90      	pop	{r4, r7, pc}

08002194 <_ZNKSt6vectorIPcSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fd1f 	bl	8002be4 <_ZNKSt6vectorIPcSaIS0_EE8max_sizeEv>
 80021a6:	4604      	mov	r4, r0
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7ff fbda 	bl	8001962 <_ZNKSt6vectorIPcSaIS0_EE4sizeEv>
 80021ae:	4603      	mov	r3, r0
 80021b0:	1ae2      	subs	r2, r4, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	bf34      	ite	cc
 80021b8:	2301      	movcc	r3, #1
 80021ba:	2300      	movcs	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <_ZNKSt6vectorIPcSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f002 ff06 	bl	8004fd4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f7ff fbca 	bl	8001962 <_ZNKSt6vectorIPcSaIS0_EE4sizeEv>
 80021ce:	4604      	mov	r4, r0
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7ff fbc6 	bl	8001962 <_ZNKSt6vectorIPcSaIS0_EE4sizeEv>
 80021d6:	4603      	mov	r3, r0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	f107 0208 	add.w	r2, r7, #8
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fd0e 	bl	8002c06 <_ZSt3maxIjERKT_S2_S2_>
 80021ea:	4603      	mov	r3, r0
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4423      	add	r3, r4
 80021f0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff fbb5 	bl	8001962 <_ZNKSt6vectorIPcSaIS0_EE4sizeEv>
 80021f8:	4602      	mov	r2, r0
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d306      	bcc.n	800220e <_ZNKSt6vectorIPcSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 fcef 	bl	8002be4 <_ZNKSt6vectorIPcSaIS0_EE8max_sizeEv>
 8002206:	4602      	mov	r2, r0
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	4293      	cmp	r3, r2
 800220c:	d904      	bls.n	8002218 <_ZNKSt6vectorIPcSaIS0_EE12_M_check_lenEjPKc+0x84>
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 fce8 	bl	8002be4 <_ZNKSt6vectorIPcSaIS0_EE8max_sizeEv>
 8002214:	4603      	mov	r3, r0
 8002216:	e000      	b.n	800221a <_ZNKSt6vectorIPcSaIS0_EE12_M_check_lenEjPKc+0x86>
 8002218:	697b      	ldr	r3, [r7, #20]
      }
 800221a:	4618      	mov	r0, r3
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	bd90      	pop	{r4, r7, pc}

08002222 <_ZN9__gnu_cxxmiIPPcSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002222:	b590      	push	{r4, r7, lr}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fb72 	bl	8001916 <_ZNK9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEE4baseEv>
 8002232:	4603      	mov	r3, r0
 8002234:	681c      	ldr	r4, [r3, #0]
 8002236:	6838      	ldr	r0, [r7, #0]
 8002238:	f7ff fb6d 	bl	8001916 <_ZNK9__gnu_cxx17__normal_iteratorIPPcSt6vectorIS1_SaIS1_EEE4baseEv>
 800223c:	4603      	mov	r3, r0
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	1ae3      	subs	r3, r4, r3
 8002242:	109b      	asrs	r3, r3, #2
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bd90      	pop	{r4, r7, pc}

0800224c <_ZNSt12_Vector_baseIPcSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <_ZNSt12_Vector_baseIPcSaIS0_EE11_M_allocateEj+0x1e>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6839      	ldr	r1, [r7, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fce4 	bl	8002c2e <_ZNSt16allocator_traitsISaIPcEE8allocateERS1_j>
 8002266:	4603      	mov	r3, r0
 8002268:	e000      	b.n	800226c <_ZNSt12_Vector_baseIPcSaIS0_EE11_M_allocateEj+0x20>
 800226a:	2300      	movs	r3, #0
      }
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_ZNSt6vectorIPcSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b087      	sub	sp, #28
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8002282:	f88d 4000 	strb.w	r4, [sp]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68b9      	ldr	r1, [r7, #8]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 fcdd 	bl	8002c4c <_ZNSt6vectorIPcSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8002292:	4603      	mov	r3, r0
      }
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}

0800229c <_ZSt34__uninitialized_move_if_noexcept_aIPPcS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fce0 	bl	8002c70 <_ZSt32__make_move_if_noexcept_iteratorIPcSt13move_iteratorIPS0_EET0_PT_>
 80022b0:	4604      	mov	r4, r0
 80022b2:	68b8      	ldr	r0, [r7, #8]
 80022b4:	f000 fcdc 	bl	8002c70 <_ZSt32__make_move_if_noexcept_iteratorIPcSt13move_iteratorIPS0_EET0_PT_>
 80022b8:	4601      	mov	r1, r0
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	4620      	mov	r0, r4
 80022c0:	f000 fce5 	bl	8002c8e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPcES2_S1_ET0_T_S5_S4_RSaIT1_E>
 80022c4:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd90      	pop	{r4, r7, pc}

080022ce <_ZSt7forwardIRKSt6vectorIPcSaIS1_EEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4619      	mov	r1, r3
 80022f4:	200c      	movs	r0, #12
 80022f6:	f7fe f8e5 	bl	80004c4 <_ZnwjPv>
 80022fa:	4604      	mov	r4, r0
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ffe6 	bl	80022ce <_ZSt7forwardIRKSt6vectorIPcSaIS1_EEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002302:	4603      	mov	r3, r0
 8002304:	4619      	mov	r1, r3
 8002306:	4620      	mov	r0, r4
 8002308:	f7fe fe3c 	bl	8000f84 <_ZNSt6vectorIPcSaIS0_EEC1ERKS2_>
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	bd90      	pop	{r4, r7, pc}

08002314 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fcc5 	bl	8002cb0 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE8max_sizeEv>
 8002326:	4604      	mov	r4, r0
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff fb89 	bl	8001a40 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE4sizeEv>
 800232e:	4603      	mov	r3, r0
 8002330:	1ae2      	subs	r2, r4, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	429a      	cmp	r2, r3
 8002336:	bf34      	ite	cc
 8002338:	2301      	movcc	r3, #1
 800233a:	2300      	movcs	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f002 fe46 	bl	8004fd4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f7ff fb79 	bl	8001a40 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE4sizeEv>
 800234e:	4604      	mov	r4, r0
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f7ff fb75 	bl	8001a40 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE4sizeEv>
 8002356:	4603      	mov	r3, r0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	f107 0208 	add.w	r2, r7, #8
 800235e:	f107 0310 	add.w	r3, r7, #16
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f000 fc4e 	bl	8002c06 <_ZSt3maxIjERKT_S2_S2_>
 800236a:	4603      	mov	r3, r0
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4423      	add	r3, r4
 8002370:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7ff fb64 	bl	8001a40 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE4sizeEv>
 8002378:	4602      	mov	r2, r0
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	4293      	cmp	r3, r2
 800237e:	d306      	bcc.n	800238e <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE12_M_check_lenEjPKc+0x7a>
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 fc95 	bl	8002cb0 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE8max_sizeEv>
 8002386:	4602      	mov	r2, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	4293      	cmp	r3, r2
 800238c:	d904      	bls.n	8002398 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE12_M_check_lenEjPKc+0x84>
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 fc8e 	bl	8002cb0 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE8max_sizeEv>
 8002394:	4603      	mov	r3, r0
 8002396:	e000      	b.n	800239a <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE12_M_check_lenEjPKc+0x86>
 8002398:	697b      	ldr	r3, [r7, #20]
      }
 800239a:	4618      	mov	r0, r3
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd90      	pop	{r4, r7, pc}
	...

080023a4 <_ZN9__gnu_cxxmiIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff facc 	bl	800194c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEE4baseEv>
 80023b4:	4603      	mov	r3, r0
 80023b6:	681c      	ldr	r4, [r3, #0]
 80023b8:	6838      	ldr	r0, [r7, #0]
 80023ba:	f7ff fac7 	bl	800194c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEE4baseEv>
 80023be:	4603      	mov	r3, r0
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	1ae3      	subs	r3, r4, r3
 80023c4:	109b      	asrs	r3, r3, #2
 80023c6:	4a03      	ldr	r2, [pc, #12]	@ (80023d4 <_ZN9__gnu_cxxmiIPSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_+0x30>)
 80023c8:	fb02 f303 	mul.w	r3, r2, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd90      	pop	{r4, r7, pc}
 80023d4:	aaaaaaab 	.word	0xaaaaaaab

080023d8 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE11_M_allocateEj+0x1e>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6839      	ldr	r1, [r7, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fc70 	bl	8002cd2 <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE8allocateERS4_j>
 80023f2:	4603      	mov	r3, r0
 80023f4:	e000      	b.n	80023f8 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE11_M_allocateEj+0x20>
 80023f6:	2300      	movs	r3, #0
      }
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b087      	sub	sp, #28
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800240e:	f88d 4000 	strb.w	r4, [sp]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fc69 	bl	8002cf0 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>
 800241e:	4603      	mov	r3, r0
      }
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bd90      	pop	{r4, r7, pc}

08002428 <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIPcSaIS1_EES4_SaIS3_EET0_T_S7_S6_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fc6c 	bl	8002d14 <_ZSt32__make_move_if_noexcept_iteratorISt6vectorIPcSaIS1_EESt13move_iteratorIPS3_EET0_PT_>
 800243c:	4604      	mov	r4, r0
 800243e:	68b8      	ldr	r0, [r7, #8]
 8002440:	f000 fc68 	bl	8002d14 <_ZSt32__make_move_if_noexcept_iteratorISt6vectorIPcSaIS1_EESt13move_iteratorIPS3_EET0_PT_>
 8002444:	4601      	mov	r1, r0
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4620      	mov	r0, r4
 800244c:	f000 fc71 	bl	8002d32 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt6vectorIPcSaIS2_EEES5_S4_ET0_T_S8_S7_RSaIT1_E>
 8002450:	4603      	mov	r3, r0
    }
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}

0800245a <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE7destroyIS3_EEvRS4_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8002464:	6839      	ldr	r1, [r7, #0]
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fc74 	bl	8002d54 <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEE7destroyIS3_EEvPT_>
	}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEEC1ERKS4_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_ZNSt16allocator_traitsISaIPcEE37select_on_container_copy_constructionERKS1_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8002496:	6839      	ldr	r1, [r7, #0]
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f804 	bl	80024a6 <_ZNSaIPcEC1ERKS0_>
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_ZNSaIPcEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80024b0:	6839      	ldr	r1, [r7, #0]
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fc5a 	bl	8002d6c <_ZNSt15__new_allocatorIPcEC1ERKS1_>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <_ZNSt12_Vector_baseIPcSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80024cc:	6839      	ldr	r1, [r7, #0]
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ffe9 	bl	80024a6 <_ZNSaIPcEC1ERKS0_>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fe31 	bl	800113e <_ZNSt12_Vector_baseIPcSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <_ZNSt12_Vector_baseIPcSaIS0_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff feaa 	bl	800224c <_ZNSt12_Vector_baseIPcSaIS0_EE11_M_allocateEj>
 80024f8:	4602      	mov	r2, r0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	441a      	add	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	609a      	str	r2, [r3, #8]
      }
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_ZN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8002548:	2301      	movs	r3, #1
 800254a:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800254c:	2301      	movs	r3, #1
 800254e:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fc15 	bl	8002d84 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>
 800255a:	4603      	mov	r3, r0
    }
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE37select_on_container_copy_constructionERKS4_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800256e:	6839      	ldr	r1, [r7, #0]
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff f9b2 	bl	80018da <_ZNSaISt6vectorIPcSaIS0_EEEC1ERKS3_>
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE12_Vector_implC1ERKS4_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8002588:	6839      	ldr	r1, [r7, #0]
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff f9a5 	bl	80018da <_ZNSaISt6vectorIPcSaIS0_EEEC1ERKS3_>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fd7c 	bl	8001090 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE17_Vector_impl_dataC1Ev>
	{ }
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80025ac:	6839      	ldr	r1, [r7, #0]
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ff12 	bl	80023d8 <_ZNSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE11_M_allocateEj>
 80025b4:	4602      	mov	r2, r0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6819      	ldr	r1, [r3, #0]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	18ca      	adds	r2, r1, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	609a      	str	r2, [r3, #8]
      }
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEC1ERKS6_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS3_EES2_IS5_SaIS5_EEEEPS5_ET0_T_SD_SC_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 800260a:	2300      	movs	r3, #0
 800260c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800260e:	2300      	movs	r3, #0
 8002610:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fbc4 	bl	8002da4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS5_EES4_IS7_SaIS7_EEEEPS7_EET0_T_SF_SE_>
 800261c:	4603      	mov	r3, r0
    }
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4619      	mov	r1, r3
 800263e:	68b8      	ldr	r0, [r7, #8]
 8002640:	f002 fbf2 	bl	8004e28 <_ZdlPvj>
      }
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIPcSaIS3_EEEEvT_S7_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002656:	e009      	b.n	800266c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIPcSaIS3_EEEEvT_S7_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 fbb3 	bl	8002dc4 <_ZSt11__addressofISt6vectorIPcSaIS1_EEEPT_RS4_>
 800265e:	4603      	mov	r3, r0
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fbba 	bl	8002dda <_ZSt8_DestroyISt6vectorIPcSaIS1_EEEvPT_>
	  for (; __first != __last; ++__first)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	330c      	adds	r3, #12
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d1f1      	bne.n	8002658 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIPcSaIS3_EEEEvT_S7_+0xc>
	}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <_ZNSt15__new_allocatorIPcE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4619      	mov	r1, r3
 8002690:	68b8      	ldr	r0, [r7, #8]
 8002692:	f002 fbc9 	bl	8004e28 <_ZdlPvj>
      }
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_ZNSt12_Destroy_auxILb1EE9__destroyIPPcEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKcPcEEEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKcPcEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80026ea:	6839      	ldr	r1, [r7, #0]
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fb7f 	bl	8002df0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEEC1ERKS6_>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
      { }
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_ZNKSt10_Select1stISt4pairIKcPcEEclERKS3_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <_ZSt7forwardIRKSt4pairIKcPcEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002742:	b5b0      	push	{r4, r5, r7, lr}
 8002744:	b088      	sub	sp, #32
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11a      	bne.n	800278c <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f863 	bl	8002822 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 800275c:	4602      	mov	r2, r0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4293      	cmp	r3, r2
 8002762:	d013      	beq.n	800278c <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8002764:	68fc      	ldr	r4, [r7, #12]
 8002766:	f107 0310 	add.w	r3, r7, #16
 800276a:	6839      	ldr	r1, [r7, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ffd1 	bl	8002714 <_ZNKSt10_Select1stISt4pairIKcPcEEclERKS3_>
 8002772:	4605      	mov	r5, r0
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f8f8 	bl	800296a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800277a:	4603      	mov	r3, r0
 800277c:	461a      	mov	r2, r3
 800277e:	4629      	mov	r1, r5
 8002780:	4620      	mov	r0, r4
 8002782:	f7fe fe37 	bl	80013f4 <_ZNKSt4lessIcEclERKcS2_>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 8002790:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8002792:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8002794:	6838      	ldr	r0, [r7, #0]
 8002796:	f7ff ffc9 	bl	800272c <_ZSt7forwardIRKSt4pairIKcPcEEOT_RNSt16remove_referenceIS6_E4typeE>
 800279a:	4603      	mov	r3, r0
 800279c:	4619      	mov	r1, r3
 800279e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027a0:	f000 fb32 	bl	8002e08 <_ZNKSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 80027a4:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80027aa:	7ff8      	ldrb	r0, [r7, #31]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	69b9      	ldr	r1, [r7, #24]
 80027b0:	f002 fba6 	bl	8004f00 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fcb5 	bl	8002134 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEC1EPSt18_Rb_tree_node_base>
 80027ca:	697b      	ldr	r3, [r7, #20]
      }
 80027cc:	4618      	mov	r0, r3
 80027ce:	3720      	adds	r7, #32
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bdb0      	pop	{r4, r5, r7, pc}

080027d4 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fb26 	bl	8002e30 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 80027e4:	4604      	mov	r4, r0
 80027e6:	6838      	ldr	r0, [r7, #0]
 80027e8:	f7ff fae4 	bl	8001db4 <_ZNSt13_Rb_tree_nodeISt4pairIKcPcEE9_M_valptrEv>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4619      	mov	r1, r3
 80027f0:	4620      	mov	r0, r4
 80027f2:	f000 fb28 	bl	8002e46 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcPcEEEE7destroyIS4_EEvRS6_PT_>
      }
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd90      	pop	{r4, r7, pc}

080027fe <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fb11 	bl	8002e30 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 800280e:	4603      	mov	r3, r0
 8002810:	2201      	movs	r2, #1
 8002812:	6839      	ldr	r1, [r7, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fb23 	bl	8002e60 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcPcEEEE10deallocateERS6_PS5_j>
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3304      	adds	r3, #4
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800283a:	b590      	push	{r4, r7, lr}
 800283c:	b087      	sub	sp, #28
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002848:	e01a      	b.n	8002880 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800284a:	68fc      	ldr	r4, [r7, #12]
 800284c:	68b8      	ldr	r0, [r7, #8]
 800284e:	f000 f979 	bl	8002b44 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8002852:	4603      	mov	r3, r0
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	4619      	mov	r1, r3
 8002858:	4620      	mov	r0, r4
 800285a:	f7fe fdcb 	bl	80013f4 <_ZNKSt4lessIcEclERKcS2_>
 800285e:	4603      	mov	r3, r0
 8002860:	f083 0301 	eor.w	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d006      	beq.n	8002878 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x3e>
	  __y = __x, __x = _S_left(__x);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	68b8      	ldr	r0, [r7, #8]
 8002870:	f7ff fa55 	bl	8001d1e <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002874:	60b8      	str	r0, [r7, #8]
 8002876:	e003      	b.n	8002880 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x46>
	  __x = _S_right(__x);
 8002878:	68b8      	ldr	r0, [r7, #8]
 800287a:	f7ff fa44 	bl	8001d06 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800287e:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1e1      	bne.n	800284a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x10>
      return iterator(__y);
 8002886:	f107 0314 	add.w	r3, r7, #20
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fc51 	bl	8002134 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEC1EPSt18_Rb_tree_node_base>
 8002892:	697b      	ldr	r3, [r7, #20]
    }
 8002894:	4618      	mov	r0, r3
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd90      	pop	{r4, r7, pc}

0800289c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKcPcEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 faea 	bl	8002e7e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKcPcEE7_M_addrEv>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <_ZNSt10_Head_baseILj0ERKcLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80028d2:	b5b0      	push	{r4, r5, r7, lr}
 80028d4:	b088      	sub	sp, #32
 80028d6:	af02      	add	r7, sp, #8
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fad7 	bl	8002e94 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>
 80028e6:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80028e8:	68b8      	ldr	r0, [r7, #8]
 80028ea:	f7ff fa80 	bl	8001dee <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80028ee:	4604      	mov	r4, r0
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fa87 	bl	8001e04 <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80028f6:	4605      	mov	r5, r0
 80028f8:	6838      	ldr	r0, [r7, #0]
 80028fa:	f7ff fa8e 	bl	8001e1a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80028fe:	4603      	mov	r3, r0
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	462b      	mov	r3, r5
 8002904:	4622      	mov	r2, r4
 8002906:	6979      	ldr	r1, [r7, #20]
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fad4 	bl	8002eb6 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 800290e:	697b      	ldr	r3, [r7, #20]
	}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bdb0      	pop	{r4, r5, r7, pc}

08002918 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKcPcEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fc02 	bl	8002134 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEC1EPSt18_Rb_tree_node_base>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <_ZNKSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3310      	adds	r3, #16
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f8e6 	bl	8002b44 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8002978:	4603      	mov	r3, r0
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
	       enable_if<_PCCP::template
			   _ConstructiblePair<_U1, _U2>()
	                 && _PCCP::template
			   _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b08b      	sub	sp, #44	@ 0x2c
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80029b8:	68b8      	ldr	r0, [r7, #8]
 80029ba:	f7fe fcc4 	bl	8001346 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_M_beginEv>
 80029be:	4603      	mov	r3, r0
 80029c0:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80029c2:	68b8      	ldr	r0, [r7, #8]
 80029c4:	f7ff ff2d 	bl	8002822 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 80029c8:	4603      	mov	r3, r0
 80029ca:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 80029d2:	e01f      	b.n	8002a14 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x68>
	  __y = __x;
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80029d8:	68bc      	ldr	r4, [r7, #8]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 f8b1 	bl	8002b44 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80029e2:	4603      	mov	r3, r0
 80029e4:	461a      	mov	r2, r3
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4620      	mov	r0, r4
 80029ea:	f7fe fd03 	bl	80013f4 <_ZNKSt4lessIcEclERKcS2_>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80029f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x5c>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff f98d 	bl	8001d1e <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002a04:	4603      	mov	r3, r0
 8002a06:	e004      	b.n	8002a12 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x66>
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f97b 	bl	8001d06 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002a10:	4603      	mov	r3, r0
 8002a12:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1dc      	bne.n	80029d4 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x28>
      iterator __j = iterator(__y);
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	f107 0310 	add.w	r3, r7, #16
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fb86 	bl	8002134 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8002a28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01d      	beq.n	8002a6c <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8002a30:	68b8      	ldr	r0, [r7, #8]
 8002a32:	f000 fa6d 	bl	8002f10 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>
 8002a36:	4603      	mov	r3, r0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	f107 021c 	add.w	r2, r7, #28
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fca6 	bl	8001396 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKcPcEES6_>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8002a50:	f107 0214 	add.w	r2, r7, #20
 8002a54:	f107 0318 	add.w	r3, r7, #24
 8002a58:	4619      	mov	r1, r3
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fa69 	bl	8002f32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKcPcEERS1_Lb1EEEOT_OT0_>
 8002a60:	e025      	b.n	8002aae <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8002a62:	f107 0310 	add.w	r3, r7, #16
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f84a 	bl	8002b00 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8002a6c:	68bc      	ldr	r4, [r7, #8]
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff7a 	bl	800296a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002a76:	4603      	mov	r3, r0
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f7fe fcb9 	bl	80013f4 <_ZNKSt4lessIcEclERKcS2_>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8002a88:	f107 0214 	add.w	r2, r7, #20
 8002a8c:	f107 0318 	add.w	r3, r7, #24
 8002a90:	4619      	mov	r1, r3
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fa4d 	bl	8002f32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKcPcEERS1_Lb1EEEOT_OT0_>
 8002a98:	e009      	b.n	8002aae <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
 8002a9e:	f107 0220 	add.w	r2, r7, #32
 8002aa2:	f107 0310 	add.w	r3, r7, #16
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f7ff ff6a 	bl	8002982 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	372c      	adds	r7, #44	@ 0x2c
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd90      	pop	{r4, r7, pc}

08002ab6 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	330c      	adds	r3, #12
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002ada:	68b8      	ldr	r0, [r7, #8]
 8002adc:	f000 fa42 	bl	8002f64 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fa3b 	bl	8002f64 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002aee:	4603      	mov	r3, r0
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f002 f9f5 	bl	8004efc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8002b12:	4602      	mov	r2, r0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	601a      	str	r2, [r3, #0]
	return *this;
 8002b18:	687b      	ldr	r3, [r7, #4]
      }
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f002 f9e2 	bl	8004ef8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8002b34:	4602      	mov	r2, r0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	601a      	str	r2, [r3, #0]
	return *this;
 8002b3a:	687b      	ldr	r3, [r7, #4]
      }
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fa14 	bl	8002f7a <_ZNKSt13_Rb_tree_nodeISt4pairIKcPcEE9_M_valptrEv>
 8002b52:	4602      	mov	r2, r0
 8002b54:	f107 030c 	add.w	r3, r7, #12
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fdda 	bl	8002714 <_ZNKSt10_Select1stISt4pairIKcPcEEclERKS3_>
 8002b60:	4603      	mov	r3, r0
      }
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002b6a:	b5b0      	push	{r4, r5, r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d117      	bne.n	8002bae <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7ff fe4f 	bl	8002822 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_M_endEv>
 8002b84:	4602      	mov	r2, r0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d010      	beq.n	8002bae <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8002b8c:	68fc      	ldr	r4, [r7, #12]
 8002b8e:	6838      	ldr	r0, [r7, #0]
 8002b90:	f7ff ffd8 	bl	8002b44 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8002b94:	4605      	mov	r5, r0
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff fee7 	bl	800296a <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7fe fc26 	bl	80013f4 <_ZNKSt4lessIcEclERKcS2_>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x48>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x4a>
 8002bb2:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8002bb4:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8002bba:	7df8      	ldrb	r0, [r7, #23]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6839      	ldr	r1, [r7, #0]
 8002bc0:	f002 f99e 	bl	8004f00 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8002bce:	f107 0310 	add.w	r3, r7, #16
 8002bd2:	6839      	ldr	r1, [r7, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff faad 	bl	8002134 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEC1EPSt18_Rb_tree_node_base>
 8002bda:	693b      	ldr	r3, [r7, #16]
    }
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bdb0      	pop	{r4, r5, r7, pc}

08002be4 <_ZNKSt6vectorIPcSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fec7 	bl	8001982 <_ZNKSt12_Vector_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f9cd 	bl	8002f96 <_ZNSt6vectorIPcSaIS0_EE11_S_max_sizeERKS1_>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d201      	bcs.n	8002c20 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	e000      	b.n	8002c22 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002c20:	687b      	ldr	r3, [r7, #4]
    }
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <_ZNSt16allocator_traitsISaIPcEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002c38:	2200      	movs	r2, #0
 8002c3a:	6839      	ldr	r1, [r7, #0]
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f9c4 	bl	8002fca <_ZNSt15__new_allocatorIPcE8allocateEjPKv>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_ZNSt6vectorIPcSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f9db 	bl	800301c <_ZSt12__relocate_aIPPcS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002c66:	4603      	mov	r3, r0
      }
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_ZSt32__make_move_if_noexcept_iteratorIPcSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002c78:	f107 030c 	add.w	r3, r7, #12
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f9e9 	bl	8003056 <_ZNSt13move_iteratorIPPcEC1ES1_>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPcES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f9ea 	bl	800307a <_ZSt18uninitialized_copyISt13move_iteratorIPPcES2_ET0_T_S5_S4_>
 8002ca6:	4603      	mov	r3, r0
    }
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <_ZNKSt6vectorIS_IPcSaIS0_EESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fed6 	bl	8001a6c <_ZNKSt12_Vector_baseISt6vectorIPcSaIS1_EESaIS3_EE19_M_get_Tp_allocatorEv>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 f9ee 	bl	80030a4 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE11_S_max_sizeERKS3_>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002cdc:	2200      	movs	r2, #0
 8002cde:	6839      	ldr	r1, [r7, #0]
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f9fb 	bl	80030dc <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEE8allocateEjPKv>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fa17 	bl	8003138 <_ZSt12__relocate_aIPSt6vectorIPcSaIS1_EES4_SaIS3_EET0_T_S7_S6_RT1_>
 8002d0a:	4603      	mov	r3, r0
      }
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <_ZSt32__make_move_if_noexcept_iteratorISt6vectorIPcSaIS1_EESt13move_iteratorIPS3_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002d1c:	f107 030c 	add.w	r3, r7, #12
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fa25 	bl	8003172 <_ZNSt13move_iteratorIPSt6vectorIPcSaIS1_EEEC1ES4_>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt6vectorIPcSaIS2_EEES5_S4_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 fa26 	bl	8003196 <_ZSt18uninitialized_copyISt13move_iteratorIPSt6vectorIPcSaIS2_EEES5_ET0_T_S8_S7_>
 8002d4a:	4603      	mov	r3, r0
    }
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEE7destroyIS3_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8002d5e:	6838      	ldr	r0, [r7, #0]
 8002d60:	f7fd ff2c 	bl	8000bbc <_ZNSt6vectorIPcSaIS0_EED1Ev>
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_ZNSt15__new_allocatorIPcEC1ERKS1_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 fa12 	bl	80031be <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS5_EES4_IS7_SaIS7_EEEEPS7_EET0_T_SF_SE_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fa1a 	bl	80031ee <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS3_EES2_IS5_SaIS5_EEEEPS5_ET0_T_SD_SC_>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <_ZSt11__addressofISt6vectorIPcSaIS1_EEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <_ZSt8_DestroyISt6vectorIPcSaIS1_EEEvPT_>:
    _Destroy(_Tp* __pointer)
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fd feea 	bl	8000bbc <_ZNSt6vectorIPcSaIS0_EED1Ev>
    }
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEEC1ERKS6_>:
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <_ZNKSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_GLIBCXX_FWDREF(_Arg) __arg) const
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681c      	ldr	r4, [r3, #0]
 8002e16:	6838      	ldr	r0, [r7, #0]
 8002e18:	f7ff fc88 	bl	800272c <_ZSt7forwardIRKSt4pairIKcPcEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4620      	mov	r0, r4
 8002e22:	f000 fa13 	bl	800324c <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd90      	pop	{r4, r7, pc}

08002e30 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcPcEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8002e50:	6839      	ldr	r1, [r7, #0]
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa11 	bl	800327a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE7destroyIS4_EEvPT_>
	}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcPcEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fa0d 	bl	8003290 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE10deallocateEPS5_j>
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKcPcEE7_M_addrEv>:
      _M_addr() noexcept
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ffc7 	bl	8002e30 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fa05 	bl	80032b6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcPcEEEE8allocateERS6_j>
 8002eac:	4603      	mov	r3, r0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8002eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	2018      	movs	r0, #24
 8002ecc:	f7fd fafa 	bl	80004c4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f7ff ffad 	bl	8002e30 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	68b8      	ldr	r0, [r7, #8]
 8002eda:	f7fe ff6b 	bl	8001db4 <_ZNSt13_Rb_tree_nodeISt4pairIKcPcEE9_M_valptrEv>
 8002ede:	4605      	mov	r5, r0
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7fe ff84 	bl	8001dee <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002ee6:	4606      	mov	r6, r0
 8002ee8:	6838      	ldr	r0, [r7, #0]
 8002eea:	f7fe ff8b 	bl	8001e04 <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002eee:	4680      	mov	r8, r0
 8002ef0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ef2:	f7fe ff92 	bl	8001e1a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	4643      	mov	r3, r8
 8002efc:	4632      	mov	r2, r6
 8002efe:	4629      	mov	r1, r5
 8002f00:	4620      	mov	r0, r4
 8002f02:	f000 f9e7 	bl	80032d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcPcEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESC_IJEEEEEvRS6_PT_DpOT0_>
	}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f10 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	f107 030c 	add.w	r3, r7, #12
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff f906 	bl	8002134 <_ZNSt17_Rb_tree_iteratorISt4pairIKcPcEEC1EPSt18_Rb_tree_node_base>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKcPcEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002f3e:	68b8      	ldr	r0, [r7, #8]
 8002f40:	f000 f9e6 	bl	8003310 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKcPcEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002f44:	4603      	mov	r3, r0
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f809 	bl	8002f64 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002f52:	4603      	mov	r3, r0
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <_ZNKSt13_Rb_tree_nodeISt4pairIKcPcEE9_M_valptrEv>:
      _M_valptr() const
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3310      	adds	r3, #16
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f9cd 	bl	8003326 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKcPcEE6_M_ptrEv>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <_ZNSt6vectorIPcSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002f9e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8002fa2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f9ca 	bl	800333e <_ZNSt16allocator_traitsISaIPcEE8max_sizeERKS1_>
 8002faa:	4603      	mov	r3, r0
 8002fac:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002fae:	f107 0208 	add.w	r2, r7, #8
 8002fb2:	f107 030c 	add.w	r3, r7, #12
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 f9cc 	bl	8003356 <_ZSt3minIjERKT_S2_S2_>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	681b      	ldr	r3, [r3, #0]
      }
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <_ZNSt15__new_allocatorIPcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f9d1 	bl	800337e <_ZNKSt15__new_allocatorIPcE11_M_max_sizeEv>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bf8c      	ite	hi
 8002fe4:	2301      	movhi	r3, #1
 8002fe6:	2300      	movls	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <_ZNSt15__new_allocatorIPcE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ffe:	d301      	bcc.n	8003004 <_ZNSt15__new_allocatorIPcE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003000:	f001 ffe5 	bl	8004fce <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003004:	f001 ffe0 	bl	8004fc8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4618      	mov	r0, r3
 800300e:	f001 ff0d 	bl	8004e2c <_Znwj>
 8003012:	4603      	mov	r3, r0
      }
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_ZSt12__relocate_aIPPcS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800301c:	b5b0      	push	{r4, r5, r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f9b3 	bl	8003396 <_ZSt12__niter_baseIPPcET_S2_>
 8003030:	4604      	mov	r4, r0
 8003032:	68b8      	ldr	r0, [r7, #8]
 8003034:	f000 f9af 	bl	8003396 <_ZSt12__niter_baseIPPcET_S2_>
 8003038:	4605      	mov	r5, r0
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f9ab 	bl	8003396 <_ZSt12__niter_baseIPPcET_S2_>
 8003040:	4602      	mov	r2, r0
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	4629      	mov	r1, r5
 8003046:	4620      	mov	r0, r4
 8003048:	f000 f9b0 	bl	80033ac <_ZSt14__relocate_a_1IPcS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 800304c:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bdb0      	pop	{r4, r5, r7, pc}

08003056 <_ZNSt13move_iteratorIPPcEC1ES1_>:
      move_iterator(iterator_type __i)
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8003060:	463b      	mov	r3, r7
 8003062:	4618      	mov	r0, r3
 8003064:	f000 f9c0 	bl	80033e8 <_ZSt4moveIRPPcEONSt16remove_referenceIT_E4typeEOS4_>
 8003068:	4603      	mov	r3, r0
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <_ZSt18uninitialized_copyISt13move_iteratorIPPcES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800308a:	2301      	movs	r3, #1
 800308c:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f9b3 	bl	80033fe <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPcES4_EET0_T_S7_S6_>
 8003098:	4603      	mov	r3, r0
    }
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80030ac:	4b0a      	ldr	r3, [pc, #40]	@ (80030d8 <_ZNSt6vectorIS_IPcSaIS0_EESaIS2_EE11_S_max_sizeERKS3_+0x34>)
 80030ae:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f9b4 	bl	800341e <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE8max_sizeERKS4_>
 80030b6:	4603      	mov	r3, r0
 80030b8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80030ba:	f107 0208 	add.w	r2, r7, #8
 80030be:	f107 030c 	add.w	r3, r7, #12
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f946 	bl	8003356 <_ZSt3minIjERKT_S2_S2_>
 80030ca:	4603      	mov	r3, r0
 80030cc:	681b      	ldr	r3, [r3, #0]
      }
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	0aaaaaaa 	.word	0x0aaaaaaa

080030dc <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f9a5 	bl	8003438 <_ZNKSt15__new_allocatorISt6vectorIPcSaIS1_EEE11_M_max_sizeEv>
 80030ee:	4602      	mov	r2, r0
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4293      	cmp	r3, r2
 80030f4:	bf8c      	ite	hi
 80030f6:	2301      	movhi	r3, #1
 80030f8:	2300      	movls	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4a09      	ldr	r2, [pc, #36]	@ (8003134 <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEE8allocateEjPKv+0x58>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003112:	f001 ff5c 	bl	8004fce <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003116:	f001 ff57 	bl	8004fc8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	4613      	mov	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4618      	mov	r0, r3
 8003126:	f001 fe81 	bl	8004e2c <_Znwj>
 800312a:	4603      	mov	r3, r0
      }
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	15555555 	.word	0x15555555

08003138 <_ZSt12__relocate_aIPSt6vectorIPcSaIS1_EES4_SaIS3_EET0_T_S7_S6_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8003138:	b5b0      	push	{r4, r5, r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
      return std::__relocate_a_1(std::__niter_base(__first),
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f984 	bl	8003454 <_ZSt12__niter_baseIPSt6vectorIPcSaIS1_EEET_S5_>
 800314c:	4604      	mov	r4, r0
 800314e:	68b8      	ldr	r0, [r7, #8]
 8003150:	f000 f980 	bl	8003454 <_ZSt12__niter_baseIPSt6vectorIPcSaIS1_EEET_S5_>
 8003154:	4605      	mov	r5, r0
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f97c 	bl	8003454 <_ZSt12__niter_baseIPSt6vectorIPcSaIS1_EEET_S5_>
 800315c:	4602      	mov	r2, r0
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	4629      	mov	r1, r5
 8003162:	4620      	mov	r0, r4
 8003164:	f000 f981 	bl	800346a <_ZSt14__relocate_a_1IPSt6vectorIPcSaIS1_EES4_SaIS3_EET0_T_S7_S6_RT1_>
 8003168:	4603      	mov	r3, r0
    }
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bdb0      	pop	{r4, r5, r7, pc}

08003172 <_ZNSt13move_iteratorIPSt6vectorIPcSaIS1_EEEC1ES4_>:
      move_iterator(iterator_type __i)
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800317c:	463b      	mov	r3, r7
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f999 	bl	80034b6 <_ZSt4moveIRPSt6vectorIPcSaIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8003184:	4603      	mov	r3, r0
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <_ZSt18uninitialized_copyISt13move_iteratorIPSt6vectorIPcSaIS2_EEES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 80031a2:	2300      	movs	r3, #0
 80031a4:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 80031a6:	2300      	movs	r3, #0
 80031a8:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 f98c 	bl	80034cc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorIPcSaIS4_EEES7_EET0_T_SA_S9_>
 80031b4:	4603      	mov	r3, r0
    }
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80031be:	b590      	push	{r4, r7, lr}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f98e 	bl	80034ec <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS2_SaIS2_EEEEET_S9_>
 80031d0:	4604      	mov	r4, r0
 80031d2:	68b8      	ldr	r0, [r7, #8]
 80031d4:	f000 f98a 	bl	80034ec <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS2_SaIS2_EEEEET_S9_>
 80031d8:	4603      	mov	r3, r0
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4619      	mov	r1, r3
 80031de:	4620      	mov	r0, r4
 80031e0:	f000 f98f 	bl	8003502 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS2_SaIS2_EEEEPS2_ET1_T0_SB_SA_>
 80031e4:	4603      	mov	r3, r0
    }
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd90      	pop	{r4, r7, pc}

080031ee <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS3_EES2_IS5_SaIS5_EEEEPS5_ET0_T_SD_SC_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 80031ee:	b590      	push	{r4, r7, lr}
 80031f0:	b087      	sub	sp, #28
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 80031fe:	e015      	b.n	800322c <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS3_EES2_IS5_SaIS5_EEEEPS5_ET0_T_SD_SC_+0x3e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 8003200:	6978      	ldr	r0, [r7, #20]
 8003202:	f7ff fddf 	bl	8002dc4 <_ZSt11__addressofISt6vectorIPcSaIS1_EEEPT_RS4_>
 8003206:	4604      	mov	r4, r0
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	4618      	mov	r0, r3
 800320e:	f000 f9c4 	bl	800359a <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEdeEv>
 8003212:	4603      	mov	r3, r0
 8003214:	4619      	mov	r1, r3
 8003216:	4620      	mov	r0, r4
 8003218:	f000 f9cb 	bl	80035b2 <_ZSt10_ConstructISt6vectorIPcSaIS1_EEJRKS3_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800321c:	f107 030c 	add.w	r3, r7, #12
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f9a9 	bl	8003578 <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEppEv>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	330c      	adds	r3, #12
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	f107 0208 	add.w	r2, r7, #8
 8003230:	f107 030c 	add.w	r3, r7, #12
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f986 	bl	8003548 <_ZN9__gnu_cxxneIPKSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1de      	bne.n	8003200 <_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS3_EES2_IS5_SaIS5_EEEEPS5_ET0_T_SD_SC_+0x12>
	  return __cur;
 8003242:	697b      	ldr	r3, [r7, #20]
    }
 8003244:	4618      	mov	r0, r3
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	bd90      	pop	{r4, r7, pc}

0800324c <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff fe1c 	bl	8002e94 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE11_M_get_nodeEv>
 800325c:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800325e:	6838      	ldr	r0, [r7, #0]
 8003260:	f7ff fa64 	bl	800272c <_ZSt7forwardIRKSt4pairIKcPcEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	68f9      	ldr	r1, [r7, #12]
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f9b8 	bl	80035e0 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 8003270:	68fb      	ldr	r3, [r7, #12]
	}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE7destroyIS4_EEvPT_>:
	destroy(_Up* __p)
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4619      	mov	r1, r3
 80032a8:	68b8      	ldr	r0, [r7, #8]
 80032aa:	f001 fdbd 	bl	8004e28 <_ZdlPvj>
      }
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcPcEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80032c0:	2200      	movs	r2, #0
 80032c2:	6839      	ldr	r1, [r7, #0]
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f9ab 	bl	8003620 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE8allocateEjPKv>
 80032ca:	4603      	mov	r3, r0
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcPcEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESC_IJEEEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80032d4:	b5b0      	push	{r4, r5, r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fe fd83 	bl	8001dee <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80032e8:	4604      	mov	r4, r0
 80032ea:	6838      	ldr	r0, [r7, #0]
 80032ec:	f7fe fd8a 	bl	8001e04 <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80032f0:	4605      	mov	r5, r0
 80032f2:	6a38      	ldr	r0, [r7, #32]
 80032f4:	f7fe fd91 	bl	8001e1a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80032f8:	4603      	mov	r3, r0
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	462b      	mov	r3, r5
 80032fe:	4622      	mov	r2, r4
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f9ca 	bl	800369c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESB_IJEEEEEvPT_DpOT0_>
	}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bdb0      	pop	{r4, r5, r7, pc}

08003310 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKcPcEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKcPcEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f9dc 	bl	80036ec <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKcPcEE7_M_addrEv>
 8003334:	4603      	mov	r3, r0
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <_ZNSt16allocator_traitsISaIPcEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f9db 	bl	8003702 <_ZNKSt15__new_allocatorIPcE8max_sizeEv>
 800334c:	4603      	mov	r3, r0
      }
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d201      	bcs.n	8003370 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	e000      	b.n	8003372 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003370:	687b      	ldr	r3, [r7, #4]
    }
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <_ZNKSt15__new_allocatorIPcE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003386:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <_ZSt12__niter_baseIPPcET_S2_>:
    __niter_base(_Iterator __it)
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <_ZSt14__relocate_a_1IPcS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	109b      	asrs	r3, r3, #2
 80033c2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	dd06      	ble.n	80033d8 <_ZSt14__relocate_a_1IPcS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	461a      	mov	r2, r3
 80033d0:	68f9      	ldr	r1, [r7, #12]
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f001 feda 	bl	800518c <memmove>
      return __result + __count;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4413      	add	r3, r2
    }
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <_ZSt4moveIRPPcEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPcES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f983 	bl	800371a <_ZSt4copyISt13move_iteratorIPPcES2_ET0_T_S5_S4_>
 8003414:	4603      	mov	r3, r0
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE8max_sizeERKS4_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f98f 	bl	800374a <_ZNKSt15__new_allocatorISt6vectorIPcSaIS1_EEE8max_sizeEv>
 800342c:	4603      	mov	r3, r0
      }
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <_ZNKSt15__new_allocatorISt6vectorIPcSaIS1_EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003440:	4b03      	ldr	r3, [pc, #12]	@ (8003450 <_ZNKSt15__new_allocatorISt6vectorIPcSaIS1_EEE11_M_max_sizeEv+0x18>)
      }
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	0aaaaaaa 	.word	0x0aaaaaaa

08003454 <_ZSt12__niter_baseIPSt6vectorIPcSaIS1_EEET_S5_>:
    __niter_base(_Iterator __it)
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <_ZSt14__relocate_a_1IPSt6vectorIPcSaIS1_EES4_SaIS3_EET0_T_S7_S6_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800346a:	b590      	push	{r4, r7, lr}
 800346c:	b087      	sub	sp, #28
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800347c:	e012      	b.n	80034a4 <_ZSt14__relocate_a_1IPSt6vectorIPcSaIS1_EES4_SaIS3_EET0_T_S7_S6_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800347e:	6978      	ldr	r0, [r7, #20]
 8003480:	f7ff fca0 	bl	8002dc4 <_ZSt11__addressofISt6vectorIPcSaIS1_EEEPT_RS4_>
 8003484:	4604      	mov	r4, r0
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f7ff fc9c 	bl	8002dc4 <_ZSt11__addressofISt6vectorIPcSaIS1_EEEPT_RS4_>
 800348c:	4603      	mov	r3, r0
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	4619      	mov	r1, r3
 8003492:	4620      	mov	r0, r4
 8003494:	f000 f965 	bl	8003762 <_ZSt19__relocate_object_aISt6vectorIPcSaIS1_EES3_SaIS3_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	330c      	adds	r3, #12
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	330c      	adds	r3, #12
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d1e8      	bne.n	800347e <_ZSt14__relocate_a_1IPSt6vectorIPcSaIS1_EES4_SaIS3_EET0_T_S7_S6_RT1_+0x14>
      return __cur;
 80034ac:	697b      	ldr	r3, [r7, #20]
    }
 80034ae:	4618      	mov	r0, r3
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd90      	pop	{r4, r7, pc}

080034b6 <_ZSt4moveIRPSt6vectorIPcSaIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt6vectorIPcSaIS4_EEES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f95b 	bl	8003798 <_ZSt16__do_uninit_copyISt13move_iteratorIPSt6vectorIPcSaIS2_EEES5_ET0_T_S8_S7_>
 80034e2:	4603      	mov	r3, r0
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS2_SaIS2_EEEEET_S9_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS2_SaIS2_EEEEPS2_ET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003502:	b5b0      	push	{r4, r5, r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f971 	bl	80037f6 <_ZSt12__niter_baseIPKPcSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8003514:	4604      	mov	r4, r0
 8003516:	68b8      	ldr	r0, [r7, #8]
 8003518:	f000 f96d 	bl	80037f6 <_ZSt12__niter_baseIPKPcSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800351c:	4605      	mov	r5, r0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff38 	bl	8003396 <_ZSt12__niter_baseIPPcET_S2_>
 8003526:	4603      	mov	r3, r0
 8003528:	461a      	mov	r2, r3
 800352a:	4629      	mov	r1, r5
 800352c:	4620      	mov	r0, r4
 800352e:	f000 f970 	bl	8003812 <_ZSt14__copy_move_a1ILb0EPKPcPS0_ET1_T0_S5_S4_>
 8003532:	4602      	mov	r2, r0
 8003534:	1d3b      	adds	r3, r7, #4
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f000 f97a 	bl	8003832 <_ZSt12__niter_wrapIPPcET_RKS2_S2_>
 800353e:	4603      	mov	r3, r0
    }
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bdb0      	pop	{r4, r5, r7, pc}

08003548 <_ZN9__gnu_cxxneIPKSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003548:	b590      	push	{r4, r7, lr}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f979 	bl	800384a <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEE4baseEv>
 8003558:	4603      	mov	r3, r0
 800355a:	681c      	ldr	r4, [r3, #0]
 800355c:	6838      	ldr	r0, [r7, #0]
 800355e:	f000 f974 	bl	800384a <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEE4baseEv>
 8003562:	4603      	mov	r3, r0
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	429c      	cmp	r4, r3
 8003568:	bf14      	ite	ne
 800356a:	2301      	movne	r3, #1
 800356c:	2300      	moveq	r3, #0
 800356e:	b2db      	uxtb	r3, r3
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bd90      	pop	{r4, r7, pc}

08003578 <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f103 020c 	add.w	r2, r3, #12
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	601a      	str	r2, [r3, #0]
	return *this;
 800358c:	687b      	ldr	r3, [r7, #4]
      }
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <_ZSt10_ConstructISt6vectorIPcSaIS1_EEJRKS3_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80035b2:	b590      	push	{r4, r7, lr}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4619      	mov	r1, r3
 80035c0:	200c      	movs	r0, #12
 80035c2:	f7fc ff7f 	bl	80004c4 <_ZnwjPv>
 80035c6:	4604      	mov	r4, r0
 80035c8:	6838      	ldr	r0, [r7, #0]
 80035ca:	f7fe fe80 	bl	80022ce <_ZSt7forwardIRKSt6vectorIPcSaIS1_EEEOT_RNSt16remove_referenceIS6_E4typeE>
 80035ce:	4603      	mov	r3, r0
 80035d0:	4619      	mov	r1, r3
 80035d2:	4620      	mov	r0, r4
 80035d4:	f7fd fcd6 	bl	8000f84 <_ZNSt6vectorIPcSaIS0_EEC1ERKS2_>
    }
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd90      	pop	{r4, r7, pc}

080035e0 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80035e0:	b5b0      	push	{r4, r5, r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4619      	mov	r1, r3
 80035f0:	2018      	movs	r0, #24
 80035f2:	f7fc ff67 	bl	80004c4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f7ff fc1a 	bl	8002e30 <_ZNSt8_Rb_treeIcSt4pairIKcPcESt10_Select1stIS3_ESt4lessIcESaIS3_EE21_M_get_Node_allocatorEv>
 80035fc:	4604      	mov	r4, r0
 80035fe:	68b8      	ldr	r0, [r7, #8]
 8003600:	f7fe fbd8 	bl	8001db4 <_ZNSt13_Rb_tree_nodeISt4pairIKcPcEE9_M_valptrEv>
 8003604:	4605      	mov	r5, r0
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff f890 	bl	800272c <_ZSt7forwardIRKSt4pairIKcPcEEOT_RNSt16remove_referenceIS6_E4typeE>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	4629      	mov	r1, r5
 8003612:	4620      	mov	r0, r4
 8003614:	f000 f924 	bl	8003860 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcPcEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bdb0      	pop	{r4, r5, r7, pc}

08003620 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f92b 	bl	8003888 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE11_M_max_sizeEv>
 8003632:	4602      	mov	r2, r0
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4293      	cmp	r3, r2
 8003638:	bf8c      	ite	hi
 800363a:	2301      	movhi	r3, #1
 800363c:	2300      	movls	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf14      	ite	ne
 8003644:	2301      	movne	r3, #1
 8003646:	2300      	moveq	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4a09      	ldr	r2, [pc, #36]	@ (8003678 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE8allocateEjPKv+0x58>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003656:	f001 fcba 	bl	8004fce <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800365a:	f001 fcb5 	bl	8004fc8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4618      	mov	r0, r3
 800366a:	f001 fbdf 	bl	8004e2c <_Znwj>
 800366e:	4603      	mov	r3, r0
      }
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	0aaaaaaa 	.word	0x0aaaaaaa

0800367c <_ZNSt5tupleIJRKcEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f000 f909 	bl	80038a4 <_ZNSt11_Tuple_implILj0EJRKcEEC1EOS2_>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESB_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800369c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4619      	mov	r1, r3
 80036ae:	2008      	movs	r0, #8
 80036b0:	f7fc ff08 	bl	80004c4 <_ZnwjPv>
 80036b4:	4604      	mov	r4, r0
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fe fb99 	bl	8001dee <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80036bc:	6838      	ldr	r0, [r7, #0]
 80036be:	f7fe fba1 	bl	8001e04 <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80036c2:	4602      	mov	r2, r0
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff ffd6 	bl	800367c <_ZNSt5tupleIJRKcEEC1EOS2_>
 80036d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036d2:	f7fe fba2 	bl	8001e1a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80036d6:	f107 0214 	add.w	r2, r7, #20
 80036da:	4633      	mov	r3, r6
 80036dc:	4629      	mov	r1, r5
 80036de:	4620      	mov	r0, r4
 80036e0:	f000 f8f0 	bl	80038c4 <_ZNSt4pairIKcPcEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036ec <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKcPcEE7_M_addrEv>:
      _M_addr() const noexcept
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <_ZNKSt15__new_allocatorIPcE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fe37 	bl	800337e <_ZNKSt15__new_allocatorIPcE11_M_max_sizeEv>
 8003710:	4603      	mov	r3, r0
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <_ZSt4copyISt13move_iteratorIPPcES2_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 800371a:	b590      	push	{r4, r7, lr}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f8e0 	bl	80038ec <_ZSt12__miter_baseIPPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800372c:	4604      	mov	r4, r0
 800372e:	68b8      	ldr	r0, [r7, #8]
 8003730:	f000 f8dc 	bl	80038ec <_ZSt12__miter_baseIPPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8003734:	4603      	mov	r3, r0
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	4619      	mov	r1, r3
 800373a:	4620      	mov	r0, r4
 800373c:	f000 f8e7 	bl	800390e <_ZSt13__copy_move_aILb1EPPcS1_ET1_T0_S3_S2_>
 8003740:	4603      	mov	r3, r0
    }
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	bd90      	pop	{r4, r7, pc}

0800374a <_ZNKSt15__new_allocatorISt6vectorIPcSaIS1_EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff fe70 	bl	8003438 <_ZNKSt15__new_allocatorISt6vectorIPcSaIS1_EEE11_M_max_sizeEv>
 8003758:	4603      	mov	r3, r0
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_ZSt19__relocate_object_aISt6vectorIPcSaIS1_EES3_SaIS3_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800376e:	68b8      	ldr	r0, [r7, #8]
 8003770:	f000 f8f0 	bl	8003954 <_ZSt4moveIRSt6vectorIPcSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8003774:	4603      	mov	r3, r0
 8003776:	461a      	mov	r2, r3
 8003778:	68f9      	ldr	r1, [r7, #12]
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f8f5 	bl	800396a <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE9constructIS3_JS3_EEEvRS4_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8003780:	68b8      	ldr	r0, [r7, #8]
 8003782:	f7ff fb1f 	bl	8002dc4 <_ZSt11__addressofISt6vectorIPcSaIS1_EEEPT_RS4_>
 8003786:	4603      	mov	r3, r0
 8003788:	4619      	mov	r1, r3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fe fe65 	bl	800245a <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE7destroyIS3_EEvRS4_PT_>
    }
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <_ZSt16__do_uninit_copyISt13move_iteratorIPSt6vectorIPcSaIS2_EEES5_ET0_T_S8_S7_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 8003798:	b590      	push	{r4, r7, lr}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 80037a8:	e015      	b.n	80037d6 <_ZSt16__do_uninit_copyISt13move_iteratorIPSt6vectorIPcSaIS2_EEES5_ET0_T_S8_S7_+0x3e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 80037aa:	6978      	ldr	r0, [r7, #20]
 80037ac:	f7ff fb0a 	bl	8002dc4 <_ZSt11__addressofISt6vectorIPcSaIS1_EEEPT_RS4_>
 80037b0:	4604      	mov	r4, r0
 80037b2:	f107 030c 	add.w	r3, r7, #12
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f90c 	bl	80039d4 <_ZNKSt13move_iteratorIPSt6vectorIPcSaIS1_EEEdeEv>
 80037bc:	4603      	mov	r3, r0
 80037be:	4619      	mov	r1, r3
 80037c0:	4620      	mov	r0, r4
 80037c2:	f000 f933 	bl	8003a2c <_ZSt10_ConstructISt6vectorIPcSaIS1_EEJS3_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 80037c6:	f107 030c 	add.w	r3, r7, #12
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f8f1 	bl	80039b2 <_ZNSt13move_iteratorIPSt6vectorIPcSaIS1_EEEppEv>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	330c      	adds	r3, #12
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	f107 0208 	add.w	r2, r7, #8
 80037da:	f107 030c 	add.w	r3, r7, #12
 80037de:	4611      	mov	r1, r2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f8d5 	bl	8003990 <_ZStneIPSt6vectorIPcSaIS1_EEEbRKSt13move_iteratorIT_ES9_>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1de      	bne.n	80037aa <_ZSt16__do_uninit_copyISt13move_iteratorIPSt6vectorIPcSaIS2_EEES5_ET0_T_S8_S7_+0x12>
	  return __cur;
 80037ec:	697b      	ldr	r3, [r7, #20]
    }
 80037ee:	4618      	mov	r0, r3
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd90      	pop	{r4, r7, pc}

080037f6 <_ZSt12__niter_baseIPKPcSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80037fe:	1d3b      	adds	r3, r7, #4
 8003800:	4618      	mov	r0, r3
 8003802:	f000 f92a 	bl	8003a5a <_ZNK9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS1_SaIS1_EEE4baseEv>
 8003806:	4603      	mov	r3, r0
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <_ZSt14__copy_move_a1ILb0EPKPcPS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f924 	bl	8003a70 <_ZSt14__copy_move_a2ILb0EPKPcPS0_ET1_T0_S5_S4_>
 8003828:	4603      	mov	r3, r0
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <_ZSt12__niter_wrapIPPcET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIPcSaIS2_EES1_IS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcPcEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7fe ff5d 	bl	800272c <_ZSt7forwardIRKSt4pairIKcPcEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003872:	4603      	mov	r3, r0
 8003874:	461a      	mov	r2, r3
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f909 	bl	8003a90 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
	}
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003890:	4b03      	ldr	r3, [pc, #12]	@ (80038a0 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE11_M_max_sizeEv+0x18>)
      }
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	05555555 	.word	0x05555555

080038a4 <_ZNSt11_Tuple_implILj0EJRKcEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	601a      	str	r2, [r3, #0]
      { }
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <_ZNSt4pairIKcPcEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 80038c4:	b5b0      	push	{r4, r5, r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	7239      	strb	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80038d2:	463a      	mov	r2, r7
 80038d4:	f88d 4000 	strb.w	r4, [sp]
 80038d8:	462b      	mov	r3, r5
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f8f0 	bl	8003ac2 <_ZNSt4pairIKcPcEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bdb0      	pop	{r4, r5, r7, pc}

080038ec <_ZSt12__miter_baseIPPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80038f4:	1d3b      	adds	r3, r7, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f8fd 	bl	8003af6 <_ZNKSt13move_iteratorIPPcE4baseEv>
 80038fc:	4603      	mov	r3, r0
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f905 	bl	8003b0e <_ZSt12__miter_baseIPPcET_S2_>
 8003904:	4603      	mov	r3, r0
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <_ZSt13__copy_move_aILb1EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800390e:	b5b0      	push	{r4, r5, r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff fd3b 	bl	8003396 <_ZSt12__niter_baseIPPcET_S2_>
 8003920:	4604      	mov	r4, r0
 8003922:	68b8      	ldr	r0, [r7, #8]
 8003924:	f7ff fd37 	bl	8003396 <_ZSt12__niter_baseIPPcET_S2_>
 8003928:	4605      	mov	r5, r0
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fd32 	bl	8003396 <_ZSt12__niter_baseIPPcET_S2_>
 8003932:	4603      	mov	r3, r0
 8003934:	461a      	mov	r2, r3
 8003936:	4629      	mov	r1, r5
 8003938:	4620      	mov	r0, r4
 800393a:	f000 f8f3 	bl	8003b24 <_ZSt14__copy_move_a1ILb1EPPcS1_ET1_T0_S3_S2_>
 800393e:	4602      	mov	r2, r0
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff74 	bl	8003832 <_ZSt12__niter_wrapIPPcET_RKS2_S2_>
 800394a:	4603      	mov	r3, r0
    }
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bdb0      	pop	{r4, r5, r7, pc}

08003954 <_ZSt4moveIRSt6vectorIPcSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <_ZNSt16allocator_traitsISaISt6vectorIPcSaIS1_EEEE9constructIS3_JS3_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f8e4 	bl	8003b44 <_ZSt7forwardISt6vectorIPcSaIS1_EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f8e9 	bl	8003b5a <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEE9constructIS3_JS3_EEEvPT_DpOT0_>
	}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <_ZStneIPSt6vectorIPcSaIS1_EEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800399a:	6839      	ldr	r1, [r7, #0]
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f8f4 	bl	8003b8a <_ZSteqIPSt6vectorIPcSaIS1_EEEbRKSt13move_iteratorIT_ES9_>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f083 0301 	eor.w	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <_ZNSt13move_iteratorIPSt6vectorIPcSaIS1_EEEppEv>:
      operator++()
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
	++_M_current;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f103 020c 	add.w	r2, r3, #12
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	601a      	str	r2, [r3, #0]
	return *this;
 80039c6:	687b      	ldr	r3, [r7, #4]
      }
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <_ZNKSt13move_iteratorIPSt6vectorIPcSaIS1_EEEdeEv>:
      operator*() const
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <_ZNSt12_Vector_baseIPcSaIS0_EEC1EOS2_>:
      _Vector_base(_Vector_base&&) = default;
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f8da 	bl	8003bb6 <_ZNSt12_Vector_baseIPcSaIS0_EE12_Vector_implC1EOS3_>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <_ZNSt6vectorIPcSaIS0_EEC1EOS2_>:
      vector(vector&&) noexcept = default;
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ffe5 	bl	80039ec <_ZNSt12_Vector_baseIPcSaIS0_EEC1EOS2_>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <_ZSt10_ConstructISt6vectorIPcSaIS1_EEJS3_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8003a2c:	b590      	push	{r4, r7, lr}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	200c      	movs	r0, #12
 8003a3c:	f7fc fd42 	bl	80004c4 <_ZnwjPv>
 8003a40:	4604      	mov	r4, r0
 8003a42:	6838      	ldr	r0, [r7, #0]
 8003a44:	f000 f87e 	bl	8003b44 <_ZSt7forwardISt6vectorIPcSaIS1_EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	f7ff ffdd 	bl	8003a0c <_ZNSt6vectorIPcSaIS0_EEC1EOS2_>
    }
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd90      	pop	{r4, r7, pc}

08003a5a <_ZNK9__gnu_cxx17__normal_iteratorIPKPcSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <_ZSt14__copy_move_a2ILb0EPKPcPS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f8b3 	bl	8003bec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_>
 8003a86:	4603      	mov	r3, r0
    }
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcPcEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	2008      	movs	r0, #8
 8003aa2:	f7fc fd0f 	bl	80004c4 <_ZnwjPv>
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7fe fe3f 	bl	800272c <_ZSt7forwardIRKSt4pairIKcPcEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	4623      	mov	r3, r4
 8003ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ab6:	e883 0003 	stmia.w	r3, {r0, r1}
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd90      	pop	{r4, r7, pc}

08003ac2 <_ZNSt4pairIKcPcEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8003ad0:	68b8      	ldr	r0, [r7, #8]
 8003ad2:	f000 f8a8 	bl	8003c26 <_ZSt3getILj0EJRKcEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 f8b1 	bl	8003c40 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	781a      	ldrb	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	605a      	str	r2, [r3, #4]
      { }
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <_ZNKSt13move_iteratorIPPcE4baseEv>:
      base() const
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <_ZSt12__miter_baseIPPcET_S2_>:
    __miter_base(_Iterator __it)
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <_ZSt14__copy_move_a1ILb1EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f88e 	bl	8003c56 <_ZSt14__copy_move_a2ILb1EPPcS1_ET1_T0_S3_S2_>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <_ZSt7forwardISt6vectorIPcSaIS1_EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <_ZNSt15__new_allocatorISt6vectorIPcSaIS1_EEE9constructIS3_JS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003b5a:	b590      	push	{r4, r7, lr}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	200c      	movs	r0, #12
 8003b6c:	f7fc fcaa 	bl	80004c4 <_ZnwjPv>
 8003b70:	4604      	mov	r4, r0
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff ffe6 	bl	8003b44 <_ZSt7forwardISt6vectorIPcSaIS1_EEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f7ff ff45 	bl	8003a0c <_ZNSt6vectorIPcSaIS0_EEC1EOS2_>
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd90      	pop	{r4, r7, pc}

08003b8a <_ZSteqIPSt6vectorIPcSaIS1_EEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 8003b8a:	b590      	push	{r4, r7, lr}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f86e 	bl	8003c76 <_ZNKSt13move_iteratorIPSt6vectorIPcSaIS1_EEE4baseEv>
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	6838      	ldr	r0, [r7, #0]
 8003b9e:	f000 f86a 	bl	8003c76 <_ZNKSt13move_iteratorIPSt6vectorIPcSaIS1_EEE4baseEv>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	429c      	cmp	r4, r3
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd90      	pop	{r4, r7, pc}

08003bb6 <_ZNSt12_Vector_baseIPcSaIS0_EE12_Vector_implC1EOS3_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 8003bb6:	b590      	push	{r4, r7, lr}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8003bc0:	6838      	ldr	r0, [r7, #0]
 8003bc2:	f000 f864 	bl	8003c8e <_ZSt4moveIRNSt12_Vector_baseIPcSaIS1_EE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS7_>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4619      	mov	r1, r3
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fe fc6b 	bl	80024a6 <_ZNSaIPcEC1ERKS0_>
 8003bd0:	687c      	ldr	r4, [r7, #4]
 8003bd2:	6838      	ldr	r0, [r7, #0]
 8003bd4:	f000 f85b 	bl	8003c8e <_ZSt4moveIRNSt12_Vector_baseIPcSaIS1_EE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS7_>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f000 f861 	bl	8003ca4 <_ZNSt12_Vector_baseIPcSaIS0_EE17_Vector_impl_dataC1EOS3_>
	{ }
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd90      	pop	{r4, r7, pc}

08003bec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	109b      	asrs	r3, r3, #2
 8003c00:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d006      	beq.n	8003c16 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68f9      	ldr	r1, [r7, #12]
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f001 fabb 	bl	800518c <memmove>
	  return __result + _Num;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4413      	add	r3, r2
	}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <_ZSt3getILj0EJRKcEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 f85a 	bl	8003cea <_ZSt12__get_helperILj0ERKcJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8003c36:	4603      	mov	r3, r0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <_ZSt14__copy_move_a2ILb1EPPcS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f84b 	bl	8003d02 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_>
 8003c6c:	4603      	mov	r3, r0
    }
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_ZNKSt13move_iteratorIPSt6vectorIPcSaIS1_EEE4baseEv>:
      base() const
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <_ZSt4moveIRNSt12_Vector_baseIPcSaIS1_EE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <_ZNSt12_Vector_baseIPcSaIS0_EE17_Vector_impl_dataC1EOS3_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	605a      	str	r2, [r3, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <_ZSt12__get_helperILj0ERKcJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f822 	bl	8003d3c <_ZNSt11_Tuple_implILj0EJRKcEE7_M_headERS2_>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b086      	sub	sp, #24
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	109b      	asrs	r3, r3, #2
 8003d16:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d006      	beq.n	8003d2c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPcEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	461a      	mov	r2, r3
 8003d24:	68f9      	ldr	r1, [r7, #12]
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f001 fa30 	bl	800518c <memmove>
	  return __result + _Num;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4413      	add	r3, r2
	}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <_ZNSt11_Tuple_implILj0EJRKcEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f805 	bl	8003d56 <_ZNSt10_Head_baseILj0ERKcLb0EE7_M_headERS2_>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <_ZNSt10_Head_baseILj0ERKcLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	4b10      	ldr	r3, [pc, #64]	@ (8003dbc <HAL_MspInit+0x4c>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8003dbc <HAL_MspInit+0x4c>)
 8003d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d86:	4b0d      	ldr	r3, [pc, #52]	@ (8003dbc <HAL_MspInit+0x4c>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <HAL_MspInit+0x4c>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	4a08      	ldr	r2, [pc, #32]	@ (8003dbc <HAL_MspInit+0x4c>)
 8003d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003da2:	4b06      	ldr	r3, [pc, #24]	@ (8003dbc <HAL_MspInit+0x4c>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800

08003dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003dc4:	bf00      	nop
 8003dc6:	e7fd      	b.n	8003dc4 <NMI_Handler+0x4>

08003dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dcc:	bf00      	nop
 8003dce:	e7fd      	b.n	8003dcc <HardFault_Handler+0x4>

08003dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dd4:	bf00      	nop
 8003dd6:	e7fd      	b.n	8003dd4 <MemManage_Handler+0x4>

08003dd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ddc:	bf00      	nop
 8003dde:	e7fd      	b.n	8003ddc <BusFault_Handler+0x4>

08003de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003de4:	bf00      	nop
 8003de6:	e7fd      	b.n	8003de4 <UsageFault_Handler+0x4>

08003de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e16:	f000 f8e9 	bl	8003fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0
  return 1;
 8003e22:	2301      	movs	r3, #1
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <_kill>:

int _kill(int pid, int sig)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e38:	f001 fa1e 	bl	8005278 <__errno>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2216      	movs	r2, #22
 8003e40:	601a      	str	r2, [r3, #0]
  return -1;
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <_exit>:

void _exit (int status)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e56:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ffe7 	bl	8003e2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e60:	bf00      	nop
 8003e62:	e7fd      	b.n	8003e60 <_exit+0x12>

08003e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e6c:	4a14      	ldr	r2, [pc, #80]	@ (8003ec0 <_sbrk+0x5c>)
 8003e6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ec4 <_sbrk+0x60>)
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e78:	4b13      	ldr	r3, [pc, #76]	@ (8003ec8 <_sbrk+0x64>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e80:	4b11      	ldr	r3, [pc, #68]	@ (8003ec8 <_sbrk+0x64>)
 8003e82:	4a12      	ldr	r2, [pc, #72]	@ (8003ecc <_sbrk+0x68>)
 8003e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e86:	4b10      	ldr	r3, [pc, #64]	@ (8003ec8 <_sbrk+0x64>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d207      	bcs.n	8003ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e94:	f001 f9f0 	bl	8005278 <__errno>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	220c      	movs	r2, #12
 8003e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ea2:	e009      	b.n	8003eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ea4:	4b08      	ldr	r3, [pc, #32]	@ (8003ec8 <_sbrk+0x64>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eaa:	4b07      	ldr	r3, [pc, #28]	@ (8003ec8 <_sbrk+0x64>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	4a05      	ldr	r2, [pc, #20]	@ (8003ec8 <_sbrk+0x64>)
 8003eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20018000 	.word	0x20018000
 8003ec4:	00000400 	.word	0x00000400
 8003ec8:	20000078 	.word	0x20000078
 8003ecc:	200001d0 	.word	0x200001d0

08003ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ed4:	4b06      	ldr	r3, [pc, #24]	@ (8003ef0 <SystemInit+0x20>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eda:	4a05      	ldr	r2, [pc, #20]	@ (8003ef0 <SystemInit+0x20>)
 8003edc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ee0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ef4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ef8:	f7ff ffea 	bl	8003ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003efc:	480c      	ldr	r0, [pc, #48]	@ (8003f30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003efe:	490d      	ldr	r1, [pc, #52]	@ (8003f34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f00:	4a0d      	ldr	r2, [pc, #52]	@ (8003f38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f04:	e002      	b.n	8003f0c <LoopCopyDataInit>

08003f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f0a:	3304      	adds	r3, #4

08003f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f10:	d3f9      	bcc.n	8003f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f12:	4a0a      	ldr	r2, [pc, #40]	@ (8003f3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f14:	4c0a      	ldr	r4, [pc, #40]	@ (8003f40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f18:	e001      	b.n	8003f1e <LoopFillZerobss>

08003f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f1c:	3204      	adds	r2, #4

08003f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f20:	d3fb      	bcc.n	8003f1a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003f22:	f001 f9af 	bl	8005284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f26:	f7fc fcbf 	bl	80008a8 <main>
  bx  lr    
 8003f2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003f38:	080056f0 	.word	0x080056f0
  ldr r2, =_sbss
 8003f3c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8003f40:	200001cc 	.word	0x200001cc

08003f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f44:	e7fe      	b.n	8003f44 <ADC_IRQHandler>
	...

08003f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f88 <HAL_Init+0x40>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a0d      	ldr	r2, [pc, #52]	@ (8003f88 <HAL_Init+0x40>)
 8003f52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f58:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <HAL_Init+0x40>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f88 <HAL_Init+0x40>)
 8003f5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f64:	4b08      	ldr	r3, [pc, #32]	@ (8003f88 <HAL_Init+0x40>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a07      	ldr	r2, [pc, #28]	@ (8003f88 <HAL_Init+0x40>)
 8003f6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f70:	2003      	movs	r0, #3
 8003f72:	f000 f931 	bl	80041d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f76:	200f      	movs	r0, #15
 8003f78:	f000 f808 	bl	8003f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f7c:	f7ff fef8 	bl	8003d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40023c00 	.word	0x40023c00

08003f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f94:	4b12      	ldr	r3, [pc, #72]	@ (8003fe0 <HAL_InitTick+0x54>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b12      	ldr	r3, [pc, #72]	@ (8003fe4 <HAL_InitTick+0x58>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f93b 	bl	8004226 <HAL_SYSTICK_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e00e      	b.n	8003fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b0f      	cmp	r3, #15
 8003fbe:	d80a      	bhi.n	8003fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fc8:	f000 f911 	bl	80041ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fcc:	4a06      	ldr	r2, [pc, #24]	@ (8003fe8 <HAL_InitTick+0x5c>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	20000008 	.word	0x20000008
 8003fe8:	20000004 	.word	0x20000004

08003fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	@ (800400c <HAL_IncTick+0x20>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <HAL_IncTick+0x24>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a04      	ldr	r2, [pc, #16]	@ (8004010 <HAL_IncTick+0x24>)
 8003ffe:	6013      	str	r3, [r2, #0]
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000008 	.word	0x20000008
 8004010:	2000007c 	.word	0x2000007c

08004014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return uwTick;
 8004018:	4b03      	ldr	r3, [pc, #12]	@ (8004028 <HAL_GetTick+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	2000007c 	.word	0x2000007c

0800402c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004034:	f7ff ffee 	bl	8004014 <HAL_GetTick>
 8004038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004044:	d005      	beq.n	8004052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004046:	4b0a      	ldr	r3, [pc, #40]	@ (8004070 <HAL_Delay+0x44>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004052:	bf00      	nop
 8004054:	f7ff ffde 	bl	8004014 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	429a      	cmp	r2, r3
 8004062:	d8f7      	bhi.n	8004054 <HAL_Delay+0x28>
  {
  }
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000008 	.word	0x20000008

08004074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004084:	4b0c      	ldr	r3, [pc, #48]	@ (80040b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004090:	4013      	ands	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800409c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040a6:	4a04      	ldr	r2, [pc, #16]	@ (80040b8 <__NVIC_SetPriorityGrouping+0x44>)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	60d3      	str	r3, [r2, #12]
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	e000ed00 	.word	0xe000ed00

080040bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040c0:	4b04      	ldr	r3, [pc, #16]	@ (80040d4 <__NVIC_GetPriorityGrouping+0x18>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	f003 0307 	and.w	r3, r3, #7
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	6039      	str	r1, [r7, #0]
 80040e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	db0a      	blt.n	8004102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	490c      	ldr	r1, [pc, #48]	@ (8004124 <__NVIC_SetPriority+0x4c>)
 80040f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f6:	0112      	lsls	r2, r2, #4
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	440b      	add	r3, r1
 80040fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004100:	e00a      	b.n	8004118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4908      	ldr	r1, [pc, #32]	@ (8004128 <__NVIC_SetPriority+0x50>)
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	3b04      	subs	r3, #4
 8004110:	0112      	lsls	r2, r2, #4
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	440b      	add	r3, r1
 8004116:	761a      	strb	r2, [r3, #24]
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	e000e100 	.word	0xe000e100
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800412c:	b480      	push	{r7}
 800412e:	b089      	sub	sp, #36	@ 0x24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f1c3 0307 	rsb	r3, r3, #7
 8004146:	2b04      	cmp	r3, #4
 8004148:	bf28      	it	cs
 800414a:	2304      	movcs	r3, #4
 800414c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	3304      	adds	r3, #4
 8004152:	2b06      	cmp	r3, #6
 8004154:	d902      	bls.n	800415c <NVIC_EncodePriority+0x30>
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3b03      	subs	r3, #3
 800415a:	e000      	b.n	800415e <NVIC_EncodePriority+0x32>
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004160:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43da      	mvns	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	401a      	ands	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004174:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	fa01 f303 	lsl.w	r3, r1, r3
 800417e:	43d9      	mvns	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004184:	4313      	orrs	r3, r2
         );
}
 8004186:	4618      	mov	r0, r3
 8004188:	3724      	adds	r7, #36	@ 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3b01      	subs	r3, #1
 80041a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041a4:	d301      	bcc.n	80041aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041a6:	2301      	movs	r3, #1
 80041a8:	e00f      	b.n	80041ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041aa:	4a0a      	ldr	r2, [pc, #40]	@ (80041d4 <SysTick_Config+0x40>)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041b2:	210f      	movs	r1, #15
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041b8:	f7ff ff8e 	bl	80040d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041bc:	4b05      	ldr	r3, [pc, #20]	@ (80041d4 <SysTick_Config+0x40>)
 80041be:	2200      	movs	r2, #0
 80041c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041c2:	4b04      	ldr	r3, [pc, #16]	@ (80041d4 <SysTick_Config+0x40>)
 80041c4:	2207      	movs	r2, #7
 80041c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	e000e010 	.word	0xe000e010

080041d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ff47 	bl	8004074 <__NVIC_SetPriorityGrouping>
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b086      	sub	sp, #24
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	4603      	mov	r3, r0
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004200:	f7ff ff5c 	bl	80040bc <__NVIC_GetPriorityGrouping>
 8004204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	6978      	ldr	r0, [r7, #20]
 800420c:	f7ff ff8e 	bl	800412c <NVIC_EncodePriority>
 8004210:	4602      	mov	r2, r0
 8004212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004216:	4611      	mov	r1, r2
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff ff5d 	bl	80040d8 <__NVIC_SetPriority>
}
 800421e:	bf00      	nop
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff ffb0 	bl	8004194 <SysTick_Config>
 8004234:	4603      	mov	r3, r0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004240:	b480      	push	{r7}
 8004242:	b089      	sub	sp, #36	@ 0x24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800424e:	2300      	movs	r3, #0
 8004250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	e159      	b.n	8004510 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800425c:	2201      	movs	r2, #1
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4013      	ands	r3, r2
 800426e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	429a      	cmp	r2, r3
 8004276:	f040 8148 	bne.w	800450a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b01      	cmp	r3, #1
 8004284:	d005      	beq.n	8004292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800428e:	2b02      	cmp	r3, #2
 8004290:	d130      	bne.n	80042f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	2203      	movs	r2, #3
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43db      	mvns	r3, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4013      	ands	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042c8:	2201      	movs	r2, #1
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 0201 	and.w	r2, r3, #1
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	d017      	beq.n	8004330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	2203      	movs	r2, #3
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4313      	orrs	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d123      	bne.n	8004384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	08da      	lsrs	r2, r3, #3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3208      	adds	r2, #8
 8004344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	220f      	movs	r2, #15
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4313      	orrs	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	08da      	lsrs	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3208      	adds	r2, #8
 800437e:	69b9      	ldr	r1, [r7, #24]
 8004380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	2203      	movs	r2, #3
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 0203 	and.w	r2, r3, #3
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80a2 	beq.w	800450a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	4b57      	ldr	r3, [pc, #348]	@ (8004528 <HAL_GPIO_Init+0x2e8>)
 80043cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ce:	4a56      	ldr	r2, [pc, #344]	@ (8004528 <HAL_GPIO_Init+0x2e8>)
 80043d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80043d6:	4b54      	ldr	r3, [pc, #336]	@ (8004528 <HAL_GPIO_Init+0x2e8>)
 80043d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043e2:	4a52      	ldr	r2, [pc, #328]	@ (800452c <HAL_GPIO_Init+0x2ec>)
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	089b      	lsrs	r3, r3, #2
 80043e8:	3302      	adds	r3, #2
 80043ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	220f      	movs	r2, #15
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	43db      	mvns	r3, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4013      	ands	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a49      	ldr	r2, [pc, #292]	@ (8004530 <HAL_GPIO_Init+0x2f0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d019      	beq.n	8004442 <HAL_GPIO_Init+0x202>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a48      	ldr	r2, [pc, #288]	@ (8004534 <HAL_GPIO_Init+0x2f4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <HAL_GPIO_Init+0x1fe>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a47      	ldr	r2, [pc, #284]	@ (8004538 <HAL_GPIO_Init+0x2f8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00d      	beq.n	800443a <HAL_GPIO_Init+0x1fa>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a46      	ldr	r2, [pc, #280]	@ (800453c <HAL_GPIO_Init+0x2fc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d007      	beq.n	8004436 <HAL_GPIO_Init+0x1f6>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a45      	ldr	r2, [pc, #276]	@ (8004540 <HAL_GPIO_Init+0x300>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d101      	bne.n	8004432 <HAL_GPIO_Init+0x1f2>
 800442e:	2304      	movs	r3, #4
 8004430:	e008      	b.n	8004444 <HAL_GPIO_Init+0x204>
 8004432:	2307      	movs	r3, #7
 8004434:	e006      	b.n	8004444 <HAL_GPIO_Init+0x204>
 8004436:	2303      	movs	r3, #3
 8004438:	e004      	b.n	8004444 <HAL_GPIO_Init+0x204>
 800443a:	2302      	movs	r3, #2
 800443c:	e002      	b.n	8004444 <HAL_GPIO_Init+0x204>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <HAL_GPIO_Init+0x204>
 8004442:	2300      	movs	r3, #0
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	f002 0203 	and.w	r2, r2, #3
 800444a:	0092      	lsls	r2, r2, #2
 800444c:	4093      	lsls	r3, r2
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4313      	orrs	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004454:	4935      	ldr	r1, [pc, #212]	@ (800452c <HAL_GPIO_Init+0x2ec>)
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	089b      	lsrs	r3, r3, #2
 800445a:	3302      	adds	r3, #2
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004462:	4b38      	ldr	r3, [pc, #224]	@ (8004544 <HAL_GPIO_Init+0x304>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004486:	4a2f      	ldr	r2, [pc, #188]	@ (8004544 <HAL_GPIO_Init+0x304>)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800448c:	4b2d      	ldr	r3, [pc, #180]	@ (8004544 <HAL_GPIO_Init+0x304>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044b0:	4a24      	ldr	r2, [pc, #144]	@ (8004544 <HAL_GPIO_Init+0x304>)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044b6:	4b23      	ldr	r3, [pc, #140]	@ (8004544 <HAL_GPIO_Init+0x304>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	43db      	mvns	r3, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4013      	ands	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044da:	4a1a      	ldr	r2, [pc, #104]	@ (8004544 <HAL_GPIO_Init+0x304>)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044e0:	4b18      	ldr	r3, [pc, #96]	@ (8004544 <HAL_GPIO_Init+0x304>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	43db      	mvns	r3, r3
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4013      	ands	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004504:	4a0f      	ldr	r2, [pc, #60]	@ (8004544 <HAL_GPIO_Init+0x304>)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	3301      	adds	r3, #1
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	2b0f      	cmp	r3, #15
 8004514:	f67f aea2 	bls.w	800425c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004518:	bf00      	nop
 800451a:	bf00      	nop
 800451c:	3724      	adds	r7, #36	@ 0x24
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800
 800452c:	40013800 	.word	0x40013800
 8004530:	40020000 	.word	0x40020000
 8004534:	40020400 	.word	0x40020400
 8004538:	40020800 	.word	0x40020800
 800453c:	40020c00 	.word	0x40020c00
 8004540:	40021000 	.word	0x40021000
 8004544:	40013c00 	.word	0x40013c00

08004548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	887b      	ldrh	r3, [r7, #2]
 800455a:	4013      	ands	r3, r2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004560:	2301      	movs	r3, #1
 8004562:	73fb      	strb	r3, [r7, #15]
 8004564:	e001      	b.n	800456a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004566:	2300      	movs	r3, #0
 8004568:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800456a:	7bfb      	ldrb	r3, [r7, #15]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	807b      	strh	r3, [r7, #2]
 8004584:	4613      	mov	r3, r2
 8004586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004588:	787b      	ldrb	r3, [r7, #1]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800458e:	887a      	ldrh	r2, [r7, #2]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004594:	e003      	b.n	800459e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004596:	887b      	ldrh	r3, [r7, #2]
 8004598:	041a      	lsls	r2, r3, #16
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	619a      	str	r2, [r3, #24]
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b085      	sub	sp, #20
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045bc:	887a      	ldrh	r2, [r7, #2]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4013      	ands	r3, r2
 80045c2:	041a      	lsls	r2, r3, #16
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	43d9      	mvns	r1, r3
 80045c8:	887b      	ldrh	r3, [r7, #2]
 80045ca:	400b      	ands	r3, r1
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	619a      	str	r2, [r3, #24]
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e267      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d075      	beq.n	80046ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045fe:	4b88      	ldr	r3, [pc, #544]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b04      	cmp	r3, #4
 8004608:	d00c      	beq.n	8004624 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800460a:	4b85      	ldr	r3, [pc, #532]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004612:	2b08      	cmp	r3, #8
 8004614:	d112      	bne.n	800463c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004616:	4b82      	ldr	r3, [pc, #520]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800461e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004622:	d10b      	bne.n	800463c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004624:	4b7e      	ldr	r3, [pc, #504]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d05b      	beq.n	80046e8 <HAL_RCC_OscConfig+0x108>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d157      	bne.n	80046e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e242      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004644:	d106      	bne.n	8004654 <HAL_RCC_OscConfig+0x74>
 8004646:	4b76      	ldr	r3, [pc, #472]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a75      	ldr	r2, [pc, #468]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 800464c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	e01d      	b.n	8004690 <HAL_RCC_OscConfig+0xb0>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800465c:	d10c      	bne.n	8004678 <HAL_RCC_OscConfig+0x98>
 800465e:	4b70      	ldr	r3, [pc, #448]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6f      	ldr	r2, [pc, #444]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 8004664:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	4b6d      	ldr	r3, [pc, #436]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a6c      	ldr	r2, [pc, #432]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	e00b      	b.n	8004690 <HAL_RCC_OscConfig+0xb0>
 8004678:	4b69      	ldr	r3, [pc, #420]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a68      	ldr	r2, [pc, #416]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 800467e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	4b66      	ldr	r3, [pc, #408]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a65      	ldr	r2, [pc, #404]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 800468a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800468e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d013      	beq.n	80046c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7ff fcbc 	bl	8004014 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a0:	f7ff fcb8 	bl	8004014 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	@ 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e207      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0xc0>
 80046be:	e014      	b.n	80046ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7ff fca8 	bl	8004014 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c8:	f7ff fca4 	bl	8004014 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b64      	cmp	r3, #100	@ 0x64
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e1f3      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046da:	4b51      	ldr	r3, [pc, #324]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0xe8>
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d063      	beq.n	80047be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00b      	beq.n	800471a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004702:	4b47      	ldr	r3, [pc, #284]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800470a:	2b08      	cmp	r3, #8
 800470c:	d11c      	bne.n	8004748 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800470e:	4b44      	ldr	r3, [pc, #272]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d116      	bne.n	8004748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471a:	4b41      	ldr	r3, [pc, #260]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <HAL_RCC_OscConfig+0x152>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d001      	beq.n	8004732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e1c7      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004732:	4b3b      	ldr	r3, [pc, #236]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4937      	ldr	r1, [pc, #220]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 8004742:	4313      	orrs	r3, r2
 8004744:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004746:	e03a      	b.n	80047be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d020      	beq.n	8004792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004750:	4b34      	ldr	r3, [pc, #208]	@ (8004824 <HAL_RCC_OscConfig+0x244>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004756:	f7ff fc5d 	bl	8004014 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800475e:	f7ff fc59 	bl	8004014 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e1a8      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004770:	4b2b      	ldr	r3, [pc, #172]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477c:	4b28      	ldr	r3, [pc, #160]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	4925      	ldr	r1, [pc, #148]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 800478c:	4313      	orrs	r3, r2
 800478e:	600b      	str	r3, [r1, #0]
 8004790:	e015      	b.n	80047be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004792:	4b24      	ldr	r3, [pc, #144]	@ (8004824 <HAL_RCC_OscConfig+0x244>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7ff fc3c 	bl	8004014 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a0:	f7ff fc38 	bl	8004014 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e187      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d036      	beq.n	8004838 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d016      	beq.n	8004800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047d2:	4b15      	ldr	r3, [pc, #84]	@ (8004828 <HAL_RCC_OscConfig+0x248>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d8:	f7ff fc1c 	bl	8004014 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e0:	f7ff fc18 	bl	8004014 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e167      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <HAL_RCC_OscConfig+0x240>)
 80047f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x200>
 80047fe:	e01b      	b.n	8004838 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004800:	4b09      	ldr	r3, [pc, #36]	@ (8004828 <HAL_RCC_OscConfig+0x248>)
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004806:	f7ff fc05 	bl	8004014 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800480c:	e00e      	b.n	800482c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800480e:	f7ff fc01 	bl	8004014 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d907      	bls.n	800482c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e150      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
 8004820:	40023800 	.word	0x40023800
 8004824:	42470000 	.word	0x42470000
 8004828:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800482c:	4b88      	ldr	r3, [pc, #544]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 800482e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ea      	bne.n	800480e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 8097 	beq.w	8004974 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004846:	2300      	movs	r3, #0
 8004848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484a:	4b81      	ldr	r3, [pc, #516]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10f      	bne.n	8004876 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004856:	2300      	movs	r3, #0
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 8004860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004864:	6413      	str	r3, [r2, #64]	@ 0x40
 8004866:	4b7a      	ldr	r3, [pc, #488]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800486e:	60bb      	str	r3, [r7, #8]
 8004870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004872:	2301      	movs	r3, #1
 8004874:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004876:	4b77      	ldr	r3, [pc, #476]	@ (8004a54 <HAL_RCC_OscConfig+0x474>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800487e:	2b00      	cmp	r3, #0
 8004880:	d118      	bne.n	80048b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004882:	4b74      	ldr	r3, [pc, #464]	@ (8004a54 <HAL_RCC_OscConfig+0x474>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a73      	ldr	r2, [pc, #460]	@ (8004a54 <HAL_RCC_OscConfig+0x474>)
 8004888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800488c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800488e:	f7ff fbc1 	bl	8004014 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004896:	f7ff fbbd 	bl	8004014 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e10c      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a54 <HAL_RCC_OscConfig+0x474>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d106      	bne.n	80048ca <HAL_RCC_OscConfig+0x2ea>
 80048bc:	4b64      	ldr	r3, [pc, #400]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c0:	4a63      	ldr	r2, [pc, #396]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c8:	e01c      	b.n	8004904 <HAL_RCC_OscConfig+0x324>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b05      	cmp	r3, #5
 80048d0:	d10c      	bne.n	80048ec <HAL_RCC_OscConfig+0x30c>
 80048d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048d8:	f043 0304 	orr.w	r3, r3, #4
 80048dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80048de:	4b5c      	ldr	r3, [pc, #368]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048e4:	f043 0301 	orr.w	r3, r3, #1
 80048e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ea:	e00b      	b.n	8004904 <HAL_RCC_OscConfig+0x324>
 80048ec:	4b58      	ldr	r3, [pc, #352]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f0:	4a57      	ldr	r2, [pc, #348]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048f2:	f023 0301 	bic.w	r3, r3, #1
 80048f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048f8:	4b55      	ldr	r3, [pc, #340]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fc:	4a54      	ldr	r2, [pc, #336]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 80048fe:	f023 0304 	bic.w	r3, r3, #4
 8004902:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d015      	beq.n	8004938 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490c:	f7ff fb82 	bl	8004014 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004912:	e00a      	b.n	800492a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004914:	f7ff fb7e 	bl	8004014 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e0cb      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492a:	4b49      	ldr	r3, [pc, #292]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 800492c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0ee      	beq.n	8004914 <HAL_RCC_OscConfig+0x334>
 8004936:	e014      	b.n	8004962 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004938:	f7ff fb6c 	bl	8004014 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800493e:	e00a      	b.n	8004956 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004940:	f7ff fb68 	bl	8004014 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e0b5      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004956:	4b3e      	ldr	r3, [pc, #248]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1ee      	bne.n	8004940 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004962:	7dfb      	ldrb	r3, [r7, #23]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d105      	bne.n	8004974 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004968:	4b39      	ldr	r3, [pc, #228]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	4a38      	ldr	r2, [pc, #224]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 800496e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004972:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80a1 	beq.w	8004ac0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800497e:	4b34      	ldr	r3, [pc, #208]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b08      	cmp	r3, #8
 8004988:	d05c      	beq.n	8004a44 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d141      	bne.n	8004a16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004992:	4b31      	ldr	r3, [pc, #196]	@ (8004a58 <HAL_RCC_OscConfig+0x478>)
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004998:	f7ff fb3c 	bl	8004014 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a0:	f7ff fb38 	bl	8004014 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e087      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b2:	4b27      	ldr	r3, [pc, #156]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f0      	bne.n	80049a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69da      	ldr	r2, [r3, #28]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049cc:	019b      	lsls	r3, r3, #6
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	085b      	lsrs	r3, r3, #1
 80049d6:	3b01      	subs	r3, #1
 80049d8:	041b      	lsls	r3, r3, #16
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e0:	061b      	lsls	r3, r3, #24
 80049e2:	491b      	ldr	r1, [pc, #108]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a58 <HAL_RCC_OscConfig+0x478>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7ff fb11 	bl	8004014 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f6:	f7ff fb0d 	bl	8004014 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e05c      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a08:	4b11      	ldr	r3, [pc, #68]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCC_OscConfig+0x416>
 8004a14:	e054      	b.n	8004ac0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a16:	4b10      	ldr	r3, [pc, #64]	@ (8004a58 <HAL_RCC_OscConfig+0x478>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1c:	f7ff fafa 	bl	8004014 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a24:	f7ff faf6 	bl	8004014 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e045      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a36:	4b06      	ldr	r3, [pc, #24]	@ (8004a50 <HAL_RCC_OscConfig+0x470>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x444>
 8004a42:	e03d      	b.n	8004ac0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e038      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
 8004a50:	40023800 	.word	0x40023800
 8004a54:	40007000 	.word	0x40007000
 8004a58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004acc <HAL_RCC_OscConfig+0x4ec>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d028      	beq.n	8004abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d121      	bne.n	8004abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d11a      	bne.n	8004abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d111      	bne.n	8004abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa2:	085b      	lsrs	r3, r3, #1
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d107      	bne.n	8004abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40023800 	.word	0x40023800

08004ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0cc      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ae4:	4b68      	ldr	r3, [pc, #416]	@ (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d90c      	bls.n	8004b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af2:	4b65      	ldr	r3, [pc, #404]	@ (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afa:	4b63      	ldr	r3, [pc, #396]	@ (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0b8      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d020      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b24:	4b59      	ldr	r3, [pc, #356]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	4a58      	ldr	r2, [pc, #352]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b3c:	4b53      	ldr	r3, [pc, #332]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	4a52      	ldr	r2, [pc, #328]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b48:	4b50      	ldr	r3, [pc, #320]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	494d      	ldr	r1, [pc, #308]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d044      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	4b47      	ldr	r3, [pc, #284]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d119      	bne.n	8004bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e07f      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d003      	beq.n	8004b8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d107      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e06f      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e067      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bae:	4b37      	ldr	r3, [pc, #220]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f023 0203 	bic.w	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4934      	ldr	r1, [pc, #208]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bc0:	f7ff fa28 	bl	8004014 <HAL_GetTick>
 8004bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc6:	e00a      	b.n	8004bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc8:	f7ff fa24 	bl	8004014 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e04f      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	4b2b      	ldr	r3, [pc, #172]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 020c 	and.w	r2, r3, #12
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d1eb      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf0:	4b25      	ldr	r3, [pc, #148]	@ (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d20c      	bcs.n	8004c18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfe:	4b22      	ldr	r3, [pc, #136]	@ (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b20      	ldr	r3, [pc, #128]	@ (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e032      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c24:	4b19      	ldr	r3, [pc, #100]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4916      	ldr	r1, [pc, #88]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c42:	4b12      	ldr	r3, [pc, #72]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	490e      	ldr	r1, [pc, #56]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c56:	f000 f821 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	490a      	ldr	r1, [pc, #40]	@ (8004c90 <HAL_RCC_ClockConfig+0x1c0>)
 8004c68:	5ccb      	ldrb	r3, [r1, r3]
 8004c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6e:	4a09      	ldr	r2, [pc, #36]	@ (8004c94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c72:	4b09      	ldr	r3, [pc, #36]	@ (8004c98 <HAL_RCC_ClockConfig+0x1c8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff f988 	bl	8003f8c <HAL_InitTick>

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40023c00 	.word	0x40023c00
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	080055cc 	.word	0x080055cc
 8004c94:	20000000 	.word	0x20000000
 8004c98:	20000004 	.word	0x20000004

08004c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca0:	b090      	sub	sp, #64	@ 0x40
 8004ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cb4:	4b59      	ldr	r3, [pc, #356]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 030c 	and.w	r3, r3, #12
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d00d      	beq.n	8004cdc <HAL_RCC_GetSysClockFreq+0x40>
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	f200 80a1 	bhi.w	8004e08 <HAL_RCC_GetSysClockFreq+0x16c>
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d003      	beq.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cce:	e09b      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cd0:	4b53      	ldr	r3, [pc, #332]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cd4:	e09b      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cd6:	4b53      	ldr	r3, [pc, #332]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cda:	e098      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cdc:	4b4f      	ldr	r3, [pc, #316]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ce4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d028      	beq.n	8004d44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	099b      	lsrs	r3, r3, #6
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	623b      	str	r3, [r7, #32]
 8004cfc:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d04:	2100      	movs	r1, #0
 8004d06:	4b47      	ldr	r3, [pc, #284]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d08:	fb03 f201 	mul.w	r2, r3, r1
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	fb00 f303 	mul.w	r3, r0, r3
 8004d12:	4413      	add	r3, r2
 8004d14:	4a43      	ldr	r2, [pc, #268]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d16:	fba0 1202 	umull	r1, r2, r0, r2
 8004d1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d1c:	460a      	mov	r2, r1
 8004d1e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004d20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d22:	4413      	add	r3, r2
 8004d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d28:	2200      	movs	r2, #0
 8004d2a:	61bb      	str	r3, [r7, #24]
 8004d2c:	61fa      	str	r2, [r7, #28]
 8004d2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004d36:	f7fb fa4d 	bl	80001d4 <__aeabi_uldivmod>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4613      	mov	r3, r2
 8004d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d42:	e053      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d44:	4b35      	ldr	r3, [pc, #212]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	099b      	lsrs	r3, r3, #6
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	617a      	str	r2, [r7, #20]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d56:	f04f 0b00 	mov.w	fp, #0
 8004d5a:	4652      	mov	r2, sl
 8004d5c:	465b      	mov	r3, fp
 8004d5e:	f04f 0000 	mov.w	r0, #0
 8004d62:	f04f 0100 	mov.w	r1, #0
 8004d66:	0159      	lsls	r1, r3, #5
 8004d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d6c:	0150      	lsls	r0, r2, #5
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	ebb2 080a 	subs.w	r8, r2, sl
 8004d76:	eb63 090b 	sbc.w	r9, r3, fp
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d8e:	ebb2 0408 	subs.w	r4, r2, r8
 8004d92:	eb63 0509 	sbc.w	r5, r3, r9
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	00eb      	lsls	r3, r5, #3
 8004da0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004da4:	00e2      	lsls	r2, r4, #3
 8004da6:	4614      	mov	r4, r2
 8004da8:	461d      	mov	r5, r3
 8004daa:	eb14 030a 	adds.w	r3, r4, sl
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	eb45 030b 	adc.w	r3, r5, fp
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	028b      	lsls	r3, r1, #10
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dcc:	4621      	mov	r1, r4
 8004dce:	028a      	lsls	r2, r1, #10
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	60fa      	str	r2, [r7, #12]
 8004ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004de0:	f7fb f9f8 	bl	80001d4 <__aeabi_uldivmod>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4613      	mov	r3, r2
 8004dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004dec:	4b0b      	ldr	r3, [pc, #44]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	3301      	adds	r3, #1
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004dfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e06:	e002      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e08:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3740      	adds	r7, #64	@ 0x40
 8004e14:	46bd      	mov	sp, r7
 8004e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	00f42400 	.word	0x00f42400
 8004e24:	017d7840 	.word	0x017d7840

08004e28 <_ZdlPvj>:
 8004e28:	f000 b8d7 	b.w	8004fda <_ZdlPv>

08004e2c <_Znwj>:
 8004e2c:	2801      	cmp	r0, #1
 8004e2e:	bf38      	it	cc
 8004e30:	2001      	movcc	r0, #1
 8004e32:	b510      	push	{r4, lr}
 8004e34:	4604      	mov	r4, r0
 8004e36:	4620      	mov	r0, r4
 8004e38:	f000 f8e2 	bl	8005000 <malloc>
 8004e3c:	b100      	cbz	r0, 8004e40 <_Znwj+0x14>
 8004e3e:	bd10      	pop	{r4, pc}
 8004e40:	f000 f8ce 	bl	8004fe0 <_ZSt15get_new_handlerv>
 8004e44:	b908      	cbnz	r0, 8004e4a <_Znwj+0x1e>
 8004e46:	f000 f8d3 	bl	8004ff0 <abort>
 8004e4a:	4780      	blx	r0
 8004e4c:	e7f3      	b.n	8004e36 <_Znwj+0xa>

08004e4e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8004e4e:	68c3      	ldr	r3, [r0, #12]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	60c2      	str	r2, [r0, #12]
 8004e54:	b510      	push	{r4, lr}
 8004e56:	b102      	cbz	r2, 8004e5a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8004e58:	6050      	str	r0, [r2, #4]
 8004e5a:	6842      	ldr	r2, [r0, #4]
 8004e5c:	605a      	str	r2, [r3, #4]
 8004e5e:	680c      	ldr	r4, [r1, #0]
 8004e60:	4284      	cmp	r4, r0
 8004e62:	d103      	bne.n	8004e6c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8004e64:	600b      	str	r3, [r1, #0]
 8004e66:	6098      	str	r0, [r3, #8]
 8004e68:	6043      	str	r3, [r0, #4]
 8004e6a:	bd10      	pop	{r4, pc}
 8004e6c:	6891      	ldr	r1, [r2, #8]
 8004e6e:	4281      	cmp	r1, r0
 8004e70:	bf0c      	ite	eq
 8004e72:	6093      	streq	r3, [r2, #8]
 8004e74:	60d3      	strne	r3, [r2, #12]
 8004e76:	e7f6      	b.n	8004e66 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08004e78 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8004e78:	6883      	ldr	r3, [r0, #8]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	6082      	str	r2, [r0, #8]
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	b102      	cbz	r2, 8004e84 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8004e82:	6050      	str	r0, [r2, #4]
 8004e84:	6842      	ldr	r2, [r0, #4]
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	680c      	ldr	r4, [r1, #0]
 8004e8a:	4284      	cmp	r4, r0
 8004e8c:	d103      	bne.n	8004e96 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8004e8e:	600b      	str	r3, [r1, #0]
 8004e90:	60d8      	str	r0, [r3, #12]
 8004e92:	6043      	str	r3, [r0, #4]
 8004e94:	bd10      	pop	{r4, pc}
 8004e96:	68d1      	ldr	r1, [r2, #12]
 8004e98:	4281      	cmp	r1, r0
 8004e9a:	bf0c      	ite	eq
 8004e9c:	60d3      	streq	r3, [r2, #12]
 8004e9e:	6093      	strne	r3, [r2, #8]
 8004ea0:	e7f6      	b.n	8004e90 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08004ea2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8004ea2:	68c3      	ldr	r3, [r0, #12]
 8004ea4:	b123      	cbz	r3, 8004eb0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1fb      	bne.n	8004ea6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8004eae:	4770      	bx	lr
 8004eb0:	6843      	ldr	r3, [r0, #4]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	4282      	cmp	r2, r0
 8004eb6:	d004      	beq.n	8004ec2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8004eb8:	68c2      	ldr	r2, [r0, #12]
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	bf18      	it	ne
 8004ebe:	4618      	movne	r0, r3
 8004ec0:	4770      	bx	lr
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	e7f4      	b.n	8004eb2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08004ec8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8004ec8:	7802      	ldrb	r2, [r0, #0]
 8004eca:	4603      	mov	r3, r0
 8004ecc:	b92a      	cbnz	r2, 8004eda <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8004ece:	6842      	ldr	r2, [r0, #4]
 8004ed0:	6852      	ldr	r2, [r2, #4]
 8004ed2:	4282      	cmp	r2, r0
 8004ed4:	d101      	bne.n	8004eda <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8004ed6:	68d0      	ldr	r0, [r2, #12]
 8004ed8:	4770      	bx	lr
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	b122      	cbz	r2, 8004ee8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8004ede:	4610      	mov	r0, r2
 8004ee0:	68d2      	ldr	r2, [r2, #12]
 8004ee2:	2a00      	cmp	r2, #0
 8004ee4:	d1fb      	bne.n	8004ede <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8004ee6:	4770      	bx	lr
 8004ee8:	6858      	ldr	r0, [r3, #4]
 8004eea:	6882      	ldr	r2, [r0, #8]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d000      	beq.n	8004ef2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8004ef0:	4770      	bx	lr
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	6840      	ldr	r0, [r0, #4]
 8004ef6:	e7f8      	b.n	8004eea <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08004ef8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8004ef8:	f7ff bfd3 	b.w	8004ea2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08004efc <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8004efc:	f7ff bfe4 	b.w	8004ec8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08004f00 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8004f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f04:	461d      	mov	r5, r3
 8004f06:	1d1f      	adds	r7, r3, #4
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8004f0e:	460c      	mov	r4, r1
 8004f10:	604a      	str	r2, [r1, #4]
 8004f12:	700b      	strb	r3, [r1, #0]
 8004f14:	b1a0      	cbz	r0, 8004f40 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8004f16:	4295      	cmp	r5, r2
 8004f18:	6091      	str	r1, [r2, #8]
 8004f1a:	d102      	bne.n	8004f22 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8004f1c:	6069      	str	r1, [r5, #4]
 8004f1e:	60ec      	str	r4, [r5, #12]
 8004f20:	e003      	b.n	8004f2a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8004f22:	68ab      	ldr	r3, [r5, #8]
 8004f24:	4293      	cmp	r3, r2
 8004f26:	bf08      	it	eq
 8004f28:	60a9      	streq	r1, [r5, #8]
 8004f2a:	f04f 0900 	mov.w	r9, #0
 8004f2e:	f04f 0801 	mov.w	r8, #1
 8004f32:	686b      	ldr	r3, [r5, #4]
 8004f34:	42a3      	cmp	r3, r4
 8004f36:	d132      	bne.n	8004f9e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 8004f38:	2201      	movs	r2, #1
 8004f3a:	701a      	strb	r2, [r3, #0]
 8004f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f40:	60d1      	str	r1, [r2, #12]
 8004f42:	68eb      	ldr	r3, [r5, #12]
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d1f0      	bne.n	8004f2a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8004f48:	e7e9      	b.n	8004f1e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 8004f4a:	68c3      	ldr	r3, [r0, #12]
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	d103      	bne.n	8004f58 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8004f50:	4639      	mov	r1, r7
 8004f52:	f7ff ff7c 	bl	8004e4e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8004f56:	4604      	mov	r4, r0
 8004f58:	6863      	ldr	r3, [r4, #4]
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	f883 8000 	strb.w	r8, [r3]
 8004f60:	4630      	mov	r0, r6
 8004f62:	f886 9000 	strb.w	r9, [r6]
 8004f66:	f7ff ff87 	bl	8004e78 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8004f6a:	e7e2      	b.n	8004f32 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8004f6c:	b133      	cbz	r3, 8004f7c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8004f6e:	781a      	ldrb	r2, [r3, #0]
 8004f70:	b922      	cbnz	r2, 8004f7c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8004f72:	f880 8000 	strb.w	r8, [r0]
 8004f76:	f883 8000 	strb.w	r8, [r3]
 8004f7a:	e021      	b.n	8004fc0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 8004f7c:	6883      	ldr	r3, [r0, #8]
 8004f7e:	42a3      	cmp	r3, r4
 8004f80:	d103      	bne.n	8004f8a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 8004f82:	4639      	mov	r1, r7
 8004f84:	f7ff ff78 	bl	8004e78 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8004f88:	4604      	mov	r4, r0
 8004f8a:	6863      	ldr	r3, [r4, #4]
 8004f8c:	4639      	mov	r1, r7
 8004f8e:	f883 8000 	strb.w	r8, [r3]
 8004f92:	4630      	mov	r0, r6
 8004f94:	f886 9000 	strb.w	r9, [r6]
 8004f98:	f7ff ff59 	bl	8004e4e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8004f9c:	e7c9      	b.n	8004f32 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8004f9e:	6860      	ldr	r0, [r4, #4]
 8004fa0:	7802      	ldrb	r2, [r0, #0]
 8004fa2:	2a00      	cmp	r2, #0
 8004fa4:	d1c8      	bne.n	8004f38 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8004fa6:	6846      	ldr	r6, [r0, #4]
 8004fa8:	68b3      	ldr	r3, [r6, #8]
 8004faa:	4283      	cmp	r3, r0
 8004fac:	d1de      	bne.n	8004f6c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8004fae:	68f2      	ldr	r2, [r6, #12]
 8004fb0:	2a00      	cmp	r2, #0
 8004fb2:	d0ca      	beq.n	8004f4a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8004fb4:	7811      	ldrb	r1, [r2, #0]
 8004fb6:	2900      	cmp	r1, #0
 8004fb8:	d1c7      	bne.n	8004f4a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8004fba:	2101      	movs	r1, #1
 8004fbc:	7019      	strb	r1, [r3, #0]
 8004fbe:	7011      	strb	r1, [r2, #0]
 8004fc0:	f886 9000 	strb.w	r9, [r6]
 8004fc4:	4634      	mov	r4, r6
 8004fc6:	e7b4      	b.n	8004f32 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08004fc8 <_ZSt17__throw_bad_allocv>:
 8004fc8:	b508      	push	{r3, lr}
 8004fca:	f000 f811 	bl	8004ff0 <abort>

08004fce <_ZSt28__throw_bad_array_new_lengthv>:
 8004fce:	b508      	push	{r3, lr}
 8004fd0:	f000 f80e 	bl	8004ff0 <abort>

08004fd4 <_ZSt20__throw_length_errorPKc>:
 8004fd4:	b508      	push	{r3, lr}
 8004fd6:	f000 f80b 	bl	8004ff0 <abort>

08004fda <_ZdlPv>:
 8004fda:	f000 b819 	b.w	8005010 <free>
	...

08004fe0 <_ZSt15get_new_handlerv>:
 8004fe0:	4b02      	ldr	r3, [pc, #8]	@ (8004fec <_ZSt15get_new_handlerv+0xc>)
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	f3bf 8f5b 	dmb	ish
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20000080 	.word	0x20000080

08004ff0 <abort>:
 8004ff0:	b508      	push	{r3, lr}
 8004ff2:	2006      	movs	r0, #6
 8004ff4:	f000 f914 	bl	8005220 <raise>
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	f7fe ff28 	bl	8003e4e <_exit>
	...

08005000 <malloc>:
 8005000:	4b02      	ldr	r3, [pc, #8]	@ (800500c <malloc+0xc>)
 8005002:	4601      	mov	r1, r0
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	f000 b82d 	b.w	8005064 <_malloc_r>
 800500a:	bf00      	nop
 800500c:	2000000c 	.word	0x2000000c

08005010 <free>:
 8005010:	4b02      	ldr	r3, [pc, #8]	@ (800501c <free+0xc>)
 8005012:	4601      	mov	r1, r0
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	f000 b969 	b.w	80052ec <_free_r>
 800501a:	bf00      	nop
 800501c:	2000000c 	.word	0x2000000c

08005020 <sbrk_aligned>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	4e0f      	ldr	r6, [pc, #60]	@ (8005060 <sbrk_aligned+0x40>)
 8005024:	460c      	mov	r4, r1
 8005026:	6831      	ldr	r1, [r6, #0]
 8005028:	4605      	mov	r5, r0
 800502a:	b911      	cbnz	r1, 8005032 <sbrk_aligned+0x12>
 800502c:	f000 f914 	bl	8005258 <_sbrk_r>
 8005030:	6030      	str	r0, [r6, #0]
 8005032:	4621      	mov	r1, r4
 8005034:	4628      	mov	r0, r5
 8005036:	f000 f90f 	bl	8005258 <_sbrk_r>
 800503a:	1c43      	adds	r3, r0, #1
 800503c:	d103      	bne.n	8005046 <sbrk_aligned+0x26>
 800503e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005042:	4620      	mov	r0, r4
 8005044:	bd70      	pop	{r4, r5, r6, pc}
 8005046:	1cc4      	adds	r4, r0, #3
 8005048:	f024 0403 	bic.w	r4, r4, #3
 800504c:	42a0      	cmp	r0, r4
 800504e:	d0f8      	beq.n	8005042 <sbrk_aligned+0x22>
 8005050:	1a21      	subs	r1, r4, r0
 8005052:	4628      	mov	r0, r5
 8005054:	f000 f900 	bl	8005258 <_sbrk_r>
 8005058:	3001      	adds	r0, #1
 800505a:	d1f2      	bne.n	8005042 <sbrk_aligned+0x22>
 800505c:	e7ef      	b.n	800503e <sbrk_aligned+0x1e>
 800505e:	bf00      	nop
 8005060:	20000084 	.word	0x20000084

08005064 <_malloc_r>:
 8005064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005068:	1ccd      	adds	r5, r1, #3
 800506a:	f025 0503 	bic.w	r5, r5, #3
 800506e:	3508      	adds	r5, #8
 8005070:	2d0c      	cmp	r5, #12
 8005072:	bf38      	it	cc
 8005074:	250c      	movcc	r5, #12
 8005076:	2d00      	cmp	r5, #0
 8005078:	4606      	mov	r6, r0
 800507a:	db01      	blt.n	8005080 <_malloc_r+0x1c>
 800507c:	42a9      	cmp	r1, r5
 800507e:	d904      	bls.n	800508a <_malloc_r+0x26>
 8005080:	230c      	movs	r3, #12
 8005082:	6033      	str	r3, [r6, #0]
 8005084:	2000      	movs	r0, #0
 8005086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800508a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005160 <_malloc_r+0xfc>
 800508e:	f000 f869 	bl	8005164 <__malloc_lock>
 8005092:	f8d8 3000 	ldr.w	r3, [r8]
 8005096:	461c      	mov	r4, r3
 8005098:	bb44      	cbnz	r4, 80050ec <_malloc_r+0x88>
 800509a:	4629      	mov	r1, r5
 800509c:	4630      	mov	r0, r6
 800509e:	f7ff ffbf 	bl	8005020 <sbrk_aligned>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	4604      	mov	r4, r0
 80050a6:	d158      	bne.n	800515a <_malloc_r+0xf6>
 80050a8:	f8d8 4000 	ldr.w	r4, [r8]
 80050ac:	4627      	mov	r7, r4
 80050ae:	2f00      	cmp	r7, #0
 80050b0:	d143      	bne.n	800513a <_malloc_r+0xd6>
 80050b2:	2c00      	cmp	r4, #0
 80050b4:	d04b      	beq.n	800514e <_malloc_r+0xea>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	4639      	mov	r1, r7
 80050ba:	4630      	mov	r0, r6
 80050bc:	eb04 0903 	add.w	r9, r4, r3
 80050c0:	f000 f8ca 	bl	8005258 <_sbrk_r>
 80050c4:	4581      	cmp	r9, r0
 80050c6:	d142      	bne.n	800514e <_malloc_r+0xea>
 80050c8:	6821      	ldr	r1, [r4, #0]
 80050ca:	1a6d      	subs	r5, r5, r1
 80050cc:	4629      	mov	r1, r5
 80050ce:	4630      	mov	r0, r6
 80050d0:	f7ff ffa6 	bl	8005020 <sbrk_aligned>
 80050d4:	3001      	adds	r0, #1
 80050d6:	d03a      	beq.n	800514e <_malloc_r+0xea>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	442b      	add	r3, r5
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	f8d8 3000 	ldr.w	r3, [r8]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	bb62      	cbnz	r2, 8005140 <_malloc_r+0xdc>
 80050e6:	f8c8 7000 	str.w	r7, [r8]
 80050ea:	e00f      	b.n	800510c <_malloc_r+0xa8>
 80050ec:	6822      	ldr	r2, [r4, #0]
 80050ee:	1b52      	subs	r2, r2, r5
 80050f0:	d420      	bmi.n	8005134 <_malloc_r+0xd0>
 80050f2:	2a0b      	cmp	r2, #11
 80050f4:	d917      	bls.n	8005126 <_malloc_r+0xc2>
 80050f6:	1961      	adds	r1, r4, r5
 80050f8:	42a3      	cmp	r3, r4
 80050fa:	6025      	str	r5, [r4, #0]
 80050fc:	bf18      	it	ne
 80050fe:	6059      	strne	r1, [r3, #4]
 8005100:	6863      	ldr	r3, [r4, #4]
 8005102:	bf08      	it	eq
 8005104:	f8c8 1000 	streq.w	r1, [r8]
 8005108:	5162      	str	r2, [r4, r5]
 800510a:	604b      	str	r3, [r1, #4]
 800510c:	4630      	mov	r0, r6
 800510e:	f000 f82f 	bl	8005170 <__malloc_unlock>
 8005112:	f104 000b 	add.w	r0, r4, #11
 8005116:	1d23      	adds	r3, r4, #4
 8005118:	f020 0007 	bic.w	r0, r0, #7
 800511c:	1ac2      	subs	r2, r0, r3
 800511e:	bf1c      	itt	ne
 8005120:	1a1b      	subne	r3, r3, r0
 8005122:	50a3      	strne	r3, [r4, r2]
 8005124:	e7af      	b.n	8005086 <_malloc_r+0x22>
 8005126:	6862      	ldr	r2, [r4, #4]
 8005128:	42a3      	cmp	r3, r4
 800512a:	bf0c      	ite	eq
 800512c:	f8c8 2000 	streq.w	r2, [r8]
 8005130:	605a      	strne	r2, [r3, #4]
 8005132:	e7eb      	b.n	800510c <_malloc_r+0xa8>
 8005134:	4623      	mov	r3, r4
 8005136:	6864      	ldr	r4, [r4, #4]
 8005138:	e7ae      	b.n	8005098 <_malloc_r+0x34>
 800513a:	463c      	mov	r4, r7
 800513c:	687f      	ldr	r7, [r7, #4]
 800513e:	e7b6      	b.n	80050ae <_malloc_r+0x4a>
 8005140:	461a      	mov	r2, r3
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	42a3      	cmp	r3, r4
 8005146:	d1fb      	bne.n	8005140 <_malloc_r+0xdc>
 8005148:	2300      	movs	r3, #0
 800514a:	6053      	str	r3, [r2, #4]
 800514c:	e7de      	b.n	800510c <_malloc_r+0xa8>
 800514e:	230c      	movs	r3, #12
 8005150:	6033      	str	r3, [r6, #0]
 8005152:	4630      	mov	r0, r6
 8005154:	f000 f80c 	bl	8005170 <__malloc_unlock>
 8005158:	e794      	b.n	8005084 <_malloc_r+0x20>
 800515a:	6005      	str	r5, [r0, #0]
 800515c:	e7d6      	b.n	800510c <_malloc_r+0xa8>
 800515e:	bf00      	nop
 8005160:	20000088 	.word	0x20000088

08005164 <__malloc_lock>:
 8005164:	4801      	ldr	r0, [pc, #4]	@ (800516c <__malloc_lock+0x8>)
 8005166:	f000 b8b1 	b.w	80052cc <__retarget_lock_acquire_recursive>
 800516a:	bf00      	nop
 800516c:	200001c8 	.word	0x200001c8

08005170 <__malloc_unlock>:
 8005170:	4801      	ldr	r0, [pc, #4]	@ (8005178 <__malloc_unlock+0x8>)
 8005172:	f000 b8ac 	b.w	80052ce <__retarget_lock_release_recursive>
 8005176:	bf00      	nop
 8005178:	200001c8 	.word	0x200001c8

0800517c <isalpha>:
 800517c:	4b02      	ldr	r3, [pc, #8]	@ (8005188 <isalpha+0xc>)
 800517e:	4403      	add	r3, r0
 8005180:	7858      	ldrb	r0, [r3, #1]
 8005182:	f000 0003 	and.w	r0, r0, #3
 8005186:	4770      	bx	lr
 8005188:	080055dc 	.word	0x080055dc

0800518c <memmove>:
 800518c:	4288      	cmp	r0, r1
 800518e:	b510      	push	{r4, lr}
 8005190:	eb01 0402 	add.w	r4, r1, r2
 8005194:	d902      	bls.n	800519c <memmove+0x10>
 8005196:	4284      	cmp	r4, r0
 8005198:	4623      	mov	r3, r4
 800519a:	d807      	bhi.n	80051ac <memmove+0x20>
 800519c:	1e43      	subs	r3, r0, #1
 800519e:	42a1      	cmp	r1, r4
 80051a0:	d008      	beq.n	80051b4 <memmove+0x28>
 80051a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051aa:	e7f8      	b.n	800519e <memmove+0x12>
 80051ac:	4402      	add	r2, r0
 80051ae:	4601      	mov	r1, r0
 80051b0:	428a      	cmp	r2, r1
 80051b2:	d100      	bne.n	80051b6 <memmove+0x2a>
 80051b4:	bd10      	pop	{r4, pc}
 80051b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051be:	e7f7      	b.n	80051b0 <memmove+0x24>

080051c0 <memset>:
 80051c0:	4402      	add	r2, r0
 80051c2:	4603      	mov	r3, r0
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d100      	bne.n	80051ca <memset+0xa>
 80051c8:	4770      	bx	lr
 80051ca:	f803 1b01 	strb.w	r1, [r3], #1
 80051ce:	e7f9      	b.n	80051c4 <memset+0x4>

080051d0 <_raise_r>:
 80051d0:	291f      	cmp	r1, #31
 80051d2:	b538      	push	{r3, r4, r5, lr}
 80051d4:	4605      	mov	r5, r0
 80051d6:	460c      	mov	r4, r1
 80051d8:	d904      	bls.n	80051e4 <_raise_r+0x14>
 80051da:	2316      	movs	r3, #22
 80051dc:	6003      	str	r3, [r0, #0]
 80051de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80051e6:	b112      	cbz	r2, 80051ee <_raise_r+0x1e>
 80051e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80051ec:	b94b      	cbnz	r3, 8005202 <_raise_r+0x32>
 80051ee:	4628      	mov	r0, r5
 80051f0:	f000 f830 	bl	8005254 <_getpid_r>
 80051f4:	4622      	mov	r2, r4
 80051f6:	4601      	mov	r1, r0
 80051f8:	4628      	mov	r0, r5
 80051fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051fe:	f000 b817 	b.w	8005230 <_kill_r>
 8005202:	2b01      	cmp	r3, #1
 8005204:	d00a      	beq.n	800521c <_raise_r+0x4c>
 8005206:	1c59      	adds	r1, r3, #1
 8005208:	d103      	bne.n	8005212 <_raise_r+0x42>
 800520a:	2316      	movs	r3, #22
 800520c:	6003      	str	r3, [r0, #0]
 800520e:	2001      	movs	r0, #1
 8005210:	e7e7      	b.n	80051e2 <_raise_r+0x12>
 8005212:	2100      	movs	r1, #0
 8005214:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005218:	4620      	mov	r0, r4
 800521a:	4798      	blx	r3
 800521c:	2000      	movs	r0, #0
 800521e:	e7e0      	b.n	80051e2 <_raise_r+0x12>

08005220 <raise>:
 8005220:	4b02      	ldr	r3, [pc, #8]	@ (800522c <raise+0xc>)
 8005222:	4601      	mov	r1, r0
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	f7ff bfd3 	b.w	80051d0 <_raise_r>
 800522a:	bf00      	nop
 800522c:	2000000c 	.word	0x2000000c

08005230 <_kill_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4d07      	ldr	r5, [pc, #28]	@ (8005250 <_kill_r+0x20>)
 8005234:	2300      	movs	r3, #0
 8005236:	4604      	mov	r4, r0
 8005238:	4608      	mov	r0, r1
 800523a:	4611      	mov	r1, r2
 800523c:	602b      	str	r3, [r5, #0]
 800523e:	f7fe fdf6 	bl	8003e2e <_kill>
 8005242:	1c43      	adds	r3, r0, #1
 8005244:	d102      	bne.n	800524c <_kill_r+0x1c>
 8005246:	682b      	ldr	r3, [r5, #0]
 8005248:	b103      	cbz	r3, 800524c <_kill_r+0x1c>
 800524a:	6023      	str	r3, [r4, #0]
 800524c:	bd38      	pop	{r3, r4, r5, pc}
 800524e:	bf00      	nop
 8005250:	200001c4 	.word	0x200001c4

08005254 <_getpid_r>:
 8005254:	f7fe bde3 	b.w	8003e1e <_getpid>

08005258 <_sbrk_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4d06      	ldr	r5, [pc, #24]	@ (8005274 <_sbrk_r+0x1c>)
 800525c:	2300      	movs	r3, #0
 800525e:	4604      	mov	r4, r0
 8005260:	4608      	mov	r0, r1
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	f7fe fdfe 	bl	8003e64 <_sbrk>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_sbrk_r+0x1a>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_sbrk_r+0x1a>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	200001c4 	.word	0x200001c4

08005278 <__errno>:
 8005278:	4b01      	ldr	r3, [pc, #4]	@ (8005280 <__errno+0x8>)
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	2000000c 	.word	0x2000000c

08005284 <__libc_init_array>:
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	4d0d      	ldr	r5, [pc, #52]	@ (80052bc <__libc_init_array+0x38>)
 8005288:	4c0d      	ldr	r4, [pc, #52]	@ (80052c0 <__libc_init_array+0x3c>)
 800528a:	1b64      	subs	r4, r4, r5
 800528c:	10a4      	asrs	r4, r4, #2
 800528e:	2600      	movs	r6, #0
 8005290:	42a6      	cmp	r6, r4
 8005292:	d109      	bne.n	80052a8 <__libc_init_array+0x24>
 8005294:	4d0b      	ldr	r5, [pc, #44]	@ (80052c4 <__libc_init_array+0x40>)
 8005296:	4c0c      	ldr	r4, [pc, #48]	@ (80052c8 <__libc_init_array+0x44>)
 8005298:	f000 f872 	bl	8005380 <_init>
 800529c:	1b64      	subs	r4, r4, r5
 800529e:	10a4      	asrs	r4, r4, #2
 80052a0:	2600      	movs	r6, #0
 80052a2:	42a6      	cmp	r6, r4
 80052a4:	d105      	bne.n	80052b2 <__libc_init_array+0x2e>
 80052a6:	bd70      	pop	{r4, r5, r6, pc}
 80052a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ac:	4798      	blx	r3
 80052ae:	3601      	adds	r6, #1
 80052b0:	e7ee      	b.n	8005290 <__libc_init_array+0xc>
 80052b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b6:	4798      	blx	r3
 80052b8:	3601      	adds	r6, #1
 80052ba:	e7f2      	b.n	80052a2 <__libc_init_array+0x1e>
 80052bc:	080056e8 	.word	0x080056e8
 80052c0:	080056e8 	.word	0x080056e8
 80052c4:	080056e8 	.word	0x080056e8
 80052c8:	080056ec 	.word	0x080056ec

080052cc <__retarget_lock_acquire_recursive>:
 80052cc:	4770      	bx	lr

080052ce <__retarget_lock_release_recursive>:
 80052ce:	4770      	bx	lr

080052d0 <memcpy>:
 80052d0:	440a      	add	r2, r1
 80052d2:	4291      	cmp	r1, r2
 80052d4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80052d8:	d100      	bne.n	80052dc <memcpy+0xc>
 80052da:	4770      	bx	lr
 80052dc:	b510      	push	{r4, lr}
 80052de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052e6:	4291      	cmp	r1, r2
 80052e8:	d1f9      	bne.n	80052de <memcpy+0xe>
 80052ea:	bd10      	pop	{r4, pc}

080052ec <_free_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4605      	mov	r5, r0
 80052f0:	2900      	cmp	r1, #0
 80052f2:	d041      	beq.n	8005378 <_free_r+0x8c>
 80052f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f8:	1f0c      	subs	r4, r1, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bfb8      	it	lt
 80052fe:	18e4      	addlt	r4, r4, r3
 8005300:	f7ff ff30 	bl	8005164 <__malloc_lock>
 8005304:	4a1d      	ldr	r2, [pc, #116]	@ (800537c <_free_r+0x90>)
 8005306:	6813      	ldr	r3, [r2, #0]
 8005308:	b933      	cbnz	r3, 8005318 <_free_r+0x2c>
 800530a:	6063      	str	r3, [r4, #4]
 800530c:	6014      	str	r4, [r2, #0]
 800530e:	4628      	mov	r0, r5
 8005310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005314:	f7ff bf2c 	b.w	8005170 <__malloc_unlock>
 8005318:	42a3      	cmp	r3, r4
 800531a:	d908      	bls.n	800532e <_free_r+0x42>
 800531c:	6820      	ldr	r0, [r4, #0]
 800531e:	1821      	adds	r1, r4, r0
 8005320:	428b      	cmp	r3, r1
 8005322:	bf01      	itttt	eq
 8005324:	6819      	ldreq	r1, [r3, #0]
 8005326:	685b      	ldreq	r3, [r3, #4]
 8005328:	1809      	addeq	r1, r1, r0
 800532a:	6021      	streq	r1, [r4, #0]
 800532c:	e7ed      	b.n	800530a <_free_r+0x1e>
 800532e:	461a      	mov	r2, r3
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	b10b      	cbz	r3, 8005338 <_free_r+0x4c>
 8005334:	42a3      	cmp	r3, r4
 8005336:	d9fa      	bls.n	800532e <_free_r+0x42>
 8005338:	6811      	ldr	r1, [r2, #0]
 800533a:	1850      	adds	r0, r2, r1
 800533c:	42a0      	cmp	r0, r4
 800533e:	d10b      	bne.n	8005358 <_free_r+0x6c>
 8005340:	6820      	ldr	r0, [r4, #0]
 8005342:	4401      	add	r1, r0
 8005344:	1850      	adds	r0, r2, r1
 8005346:	4283      	cmp	r3, r0
 8005348:	6011      	str	r1, [r2, #0]
 800534a:	d1e0      	bne.n	800530e <_free_r+0x22>
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	6053      	str	r3, [r2, #4]
 8005352:	4408      	add	r0, r1
 8005354:	6010      	str	r0, [r2, #0]
 8005356:	e7da      	b.n	800530e <_free_r+0x22>
 8005358:	d902      	bls.n	8005360 <_free_r+0x74>
 800535a:	230c      	movs	r3, #12
 800535c:	602b      	str	r3, [r5, #0]
 800535e:	e7d6      	b.n	800530e <_free_r+0x22>
 8005360:	6820      	ldr	r0, [r4, #0]
 8005362:	1821      	adds	r1, r4, r0
 8005364:	428b      	cmp	r3, r1
 8005366:	bf04      	itt	eq
 8005368:	6819      	ldreq	r1, [r3, #0]
 800536a:	685b      	ldreq	r3, [r3, #4]
 800536c:	6063      	str	r3, [r4, #4]
 800536e:	bf04      	itt	eq
 8005370:	1809      	addeq	r1, r1, r0
 8005372:	6021      	streq	r1, [r4, #0]
 8005374:	6054      	str	r4, [r2, #4]
 8005376:	e7ca      	b.n	800530e <_free_r+0x22>
 8005378:	bd38      	pop	{r3, r4, r5, pc}
 800537a:	bf00      	nop
 800537c:	20000088 	.word	0x20000088

08005380 <_init>:
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005382:	bf00      	nop
 8005384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005386:	bc08      	pop	{r3}
 8005388:	469e      	mov	lr, r3
 800538a:	4770      	bx	lr

0800538c <_fini>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	bf00      	nop
 8005390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005392:	bc08      	pop	{r3}
 8005394:	469e      	mov	lr, r3
 8005396:	4770      	bx	lr
