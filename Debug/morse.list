
morse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08003e8c  08003e8c  00004e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f8  080040f8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080040f8  080040f8  000050f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004100  08004100  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004100  08004100  00005100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004104  08004104  00005104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004108  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08004164  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08004164  000061cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f46d  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b52  00000000  00000000  000154f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  00017050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006bd  00000000  00000000  00017950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019148  00000000  00000000  0001800d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000071e3  00000000  00000000  00031155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a8c2  00000000  00000000  00038338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2bfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004000  00000000  00000000  000d2c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d6c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e74 	.word	0x08003e74

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	08003e74 	.word	0x08003e74

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f8:	f000 b96a 	b.w	80004d0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	460c      	mov	r4, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14e      	bne.n	80002be <__udivmoddi4+0xaa>
 8000220:	4694      	mov	ip, r2
 8000222:	458c      	cmp	ip, r1
 8000224:	4686      	mov	lr, r0
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	d962      	bls.n	80002f2 <__udivmoddi4+0xde>
 800022c:	b14a      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 800022e:	f1c2 0320 	rsb	r3, r2, #32
 8000232:	4091      	lsls	r1, r2
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	fa0c fc02 	lsl.w	ip, ip, r2
 800023c:	4319      	orrs	r1, r3
 800023e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000242:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000246:	fa1f f68c 	uxth.w	r6, ip
 800024a:	fbb1 f4f7 	udiv	r4, r1, r7
 800024e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000252:	fb07 1114 	mls	r1, r7, r4, r1
 8000256:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025a:	fb04 f106 	mul.w	r1, r4, r6
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800026a:	f080 8112 	bcs.w	8000492 <__udivmoddi4+0x27e>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 810f 	bls.w	8000492 <__udivmoddi4+0x27e>
 8000274:	3c02      	subs	r4, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a59      	subs	r1, r3, r1
 800027a:	fa1f f38e 	uxth.w	r3, lr
 800027e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000282:	fb07 1110 	mls	r1, r7, r0, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb00 f606 	mul.w	r6, r0, r6
 800028e:	429e      	cmp	r6, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x94>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800029a:	f080 80fc 	bcs.w	8000496 <__udivmoddi4+0x282>
 800029e:	429e      	cmp	r6, r3
 80002a0:	f240 80f9 	bls.w	8000496 <__udivmoddi4+0x282>
 80002a4:	4463      	add	r3, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	1b9b      	subs	r3, r3, r6
 80002aa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11d      	cbz	r5, 80002ba <__udivmoddi4+0xa6>
 80002b2:	40d3      	lsrs	r3, r2
 80002b4:	2200      	movs	r2, #0
 80002b6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d905      	bls.n	80002ce <__udivmoddi4+0xba>
 80002c2:	b10d      	cbz	r5, 80002c8 <__udivmoddi4+0xb4>
 80002c4:	e9c5 0100 	strd	r0, r1, [r5]
 80002c8:	2100      	movs	r1, #0
 80002ca:	4608      	mov	r0, r1
 80002cc:	e7f5      	b.n	80002ba <__udivmoddi4+0xa6>
 80002ce:	fab3 f183 	clz	r1, r3
 80002d2:	2900      	cmp	r1, #0
 80002d4:	d146      	bne.n	8000364 <__udivmoddi4+0x150>
 80002d6:	42a3      	cmp	r3, r4
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xcc>
 80002da:	4290      	cmp	r0, r2
 80002dc:	f0c0 80f0 	bcc.w	80004c0 <__udivmoddi4+0x2ac>
 80002e0:	1a86      	subs	r6, r0, r2
 80002e2:	eb64 0303 	sbc.w	r3, r4, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	d0e6      	beq.n	80002ba <__udivmoddi4+0xa6>
 80002ec:	e9c5 6300 	strd	r6, r3, [r5]
 80002f0:	e7e3      	b.n	80002ba <__udivmoddi4+0xa6>
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x204>
 80002f8:	eba1 040c 	sub.w	r4, r1, ip
 80002fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000300:	fa1f f78c 	uxth.w	r7, ip
 8000304:	2101      	movs	r1, #1
 8000306:	fbb4 f6f8 	udiv	r6, r4, r8
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb08 4416 	mls	r4, r8, r6, r4
 8000312:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000316:	fb07 f006 	mul.w	r0, r7, r6
 800031a:	4298      	cmp	r0, r3
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x11c>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x11a>
 8000328:	4298      	cmp	r0, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 800032e:	4626      	mov	r6, r4
 8000330:	1a1c      	subs	r4, r3, r0
 8000332:	fa1f f38e 	uxth.w	r3, lr
 8000336:	fbb4 f0f8 	udiv	r0, r4, r8
 800033a:	fb08 4410 	mls	r4, r8, r0, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb00 f707 	mul.w	r7, r0, r7
 8000346:	429f      	cmp	r7, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x148>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x146>
 8000354:	429f      	cmp	r7, r3
 8000356:	f200 80b0 	bhi.w	80004ba <__udivmoddi4+0x2a6>
 800035a:	4620      	mov	r0, r4
 800035c:	1bdb      	subs	r3, r3, r7
 800035e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0x9c>
 8000364:	f1c1 0620 	rsb	r6, r1, #32
 8000368:	408b      	lsls	r3, r1
 800036a:	fa22 f706 	lsr.w	r7, r2, r6
 800036e:	431f      	orrs	r7, r3
 8000370:	fa20 fc06 	lsr.w	ip, r0, r6
 8000374:	fa04 f301 	lsl.w	r3, r4, r1
 8000378:	ea43 030c 	orr.w	r3, r3, ip
 800037c:	40f4      	lsrs	r4, r6
 800037e:	fa00 f801 	lsl.w	r8, r0, r1
 8000382:	0c38      	lsrs	r0, r7, #16
 8000384:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000388:	fbb4 fef0 	udiv	lr, r4, r0
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	fb00 441e 	mls	r4, r0, lr, r4
 8000394:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000398:	fb0e f90c 	mul.w	r9, lr, ip
 800039c:	45a1      	cmp	r9, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	d90a      	bls.n	80003ba <__udivmoddi4+0x1a6>
 80003a4:	193c      	adds	r4, r7, r4
 80003a6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003aa:	f080 8084 	bcs.w	80004b6 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8081 	bls.w	80004b6 <__udivmoddi4+0x2a2>
 80003b4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b8:	443c      	add	r4, r7
 80003ba:	eba4 0409 	sub.w	r4, r4, r9
 80003be:	fa1f f983 	uxth.w	r9, r3
 80003c2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ce:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1d2>
 80003d6:	193c      	adds	r4, r7, r4
 80003d8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003dc:	d267      	bcs.n	80004ae <__udivmoddi4+0x29a>
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d965      	bls.n	80004ae <__udivmoddi4+0x29a>
 80003e2:	3b02      	subs	r3, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ea:	fba0 9302 	umull	r9, r3, r0, r2
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	429c      	cmp	r4, r3
 80003f4:	46ce      	mov	lr, r9
 80003f6:	469c      	mov	ip, r3
 80003f8:	d351      	bcc.n	800049e <__udivmoddi4+0x28a>
 80003fa:	d04e      	beq.n	800049a <__udivmoddi4+0x286>
 80003fc:	b155      	cbz	r5, 8000414 <__udivmoddi4+0x200>
 80003fe:	ebb8 030e 	subs.w	r3, r8, lr
 8000402:	eb64 040c 	sbc.w	r4, r4, ip
 8000406:	fa04 f606 	lsl.w	r6, r4, r6
 800040a:	40cb      	lsrs	r3, r1
 800040c:	431e      	orrs	r6, r3
 800040e:	40cc      	lsrs	r4, r1
 8000410:	e9c5 6400 	strd	r6, r4, [r5]
 8000414:	2100      	movs	r1, #0
 8000416:	e750      	b.n	80002ba <__udivmoddi4+0xa6>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f103 	lsr.w	r1, r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa24 f303 	lsr.w	r3, r4, r3
 8000428:	4094      	lsls	r4, r2
 800042a:	430c      	orrs	r4, r1
 800042c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000430:	fa00 fe02 	lsl.w	lr, r0, r2
 8000434:	fa1f f78c 	uxth.w	r7, ip
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3110 	mls	r1, r8, r0, r3
 8000440:	0c23      	lsrs	r3, r4, #16
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb00 f107 	mul.w	r1, r0, r7
 800044a:	4299      	cmp	r1, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x24c>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000456:	d22c      	bcs.n	80004b2 <__udivmoddi4+0x29e>
 8000458:	4299      	cmp	r1, r3
 800045a:	d92a      	bls.n	80004b2 <__udivmoddi4+0x29e>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1a5b      	subs	r3, r3, r1
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb3 f1f8 	udiv	r1, r3, r8
 8000468:	fb08 3311 	mls	r3, r8, r1, r3
 800046c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000470:	fb01 f307 	mul.w	r3, r1, r7
 8000474:	42a3      	cmp	r3, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x276>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000480:	d213      	bcs.n	80004aa <__udivmoddi4+0x296>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d911      	bls.n	80004aa <__udivmoddi4+0x296>
 8000486:	3902      	subs	r1, #2
 8000488:	4464      	add	r4, ip
 800048a:	1ae4      	subs	r4, r4, r3
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	e739      	b.n	8000306 <__udivmoddi4+0xf2>
 8000492:	4604      	mov	r4, r0
 8000494:	e6f0      	b.n	8000278 <__udivmoddi4+0x64>
 8000496:	4608      	mov	r0, r1
 8000498:	e706      	b.n	80002a8 <__udivmoddi4+0x94>
 800049a:	45c8      	cmp	r8, r9
 800049c:	d2ae      	bcs.n	80003fc <__udivmoddi4+0x1e8>
 800049e:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a6:	3801      	subs	r0, #1
 80004a8:	e7a8      	b.n	80003fc <__udivmoddi4+0x1e8>
 80004aa:	4631      	mov	r1, r6
 80004ac:	e7ed      	b.n	800048a <__udivmoddi4+0x276>
 80004ae:	4603      	mov	r3, r0
 80004b0:	e799      	b.n	80003e6 <__udivmoddi4+0x1d2>
 80004b2:	4630      	mov	r0, r6
 80004b4:	e7d4      	b.n	8000460 <__udivmoddi4+0x24c>
 80004b6:	46d6      	mov	lr, sl
 80004b8:	e77f      	b.n	80003ba <__udivmoddi4+0x1a6>
 80004ba:	4463      	add	r3, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e74d      	b.n	800035c <__udivmoddi4+0x148>
 80004c0:	4606      	mov	r6, r0
 80004c2:	4623      	mov	r3, r4
 80004c4:	4608      	mov	r0, r1
 80004c6:	e70f      	b.n	80002e8 <__udivmoddi4+0xd4>
 80004c8:	3e02      	subs	r6, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	e730      	b.n	8000330 <__udivmoddi4+0x11c>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
      _M_reset();
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f000 f805 	bl	800050a <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4618      	mov	r0, r3
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800050a:	b480      	push	{r7}
 800050c:	b083      	sub	sp, #12
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
    }
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3304      	adds	r3, #4
 8000542:	4618      	mov	r0, r3
 8000544:	f003 f9d8 	bl	80038f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4618      	mov	r0, r3
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA3_S0_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8000552:	b5b0      	push	{r4, r5, r7, lr}
 8000554:	b086      	sub	sp, #24
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	60b9      	str	r1, [r7, #8]
 800055c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800055e:	68b8      	ldr	r0, [r7, #8]
 8000560:	f000 fd54 	bl	800100c <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 8000564:	4603      	mov	r3, r0
 8000566:	781a      	ldrb	r2, [r3, #0]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	1d1c      	adds	r4, r3, #4
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 fd56 	bl	8001022 <_ZSt7forwardIRA3_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8000576:	4605      	mov	r5, r0
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	4618      	mov	r0, r3
 800057e:	f003 f890 	bl	80036a2 <_ZNSaIcEC1Ev>
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	461a      	mov	r2, r3
 8000588:	4629      	mov	r1, r5
 800058a:	4620      	mov	r0, r4
 800058c:	f003 faa2 	bl	8003ad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4618      	mov	r0, r3
 8000596:	f003 f885 	bl	80036a4 <_ZNSaIcED1Ev>
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	4618      	mov	r0, r3
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bdb0      	pop	{r4, r5, r7, pc}

080005a4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA5_S0_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80005b0:	68b8      	ldr	r0, [r7, #8]
 80005b2:	f000 fd2b 	bl	800100c <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 80005b6:	4603      	mov	r3, r0
 80005b8:	781a      	ldrb	r2, [r3, #0]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	701a      	strb	r2, [r3, #0]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	1d1c      	adds	r4, r3, #4
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f000 fd38 	bl	8001038 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80005c8:	4605      	mov	r5, r0
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 f867 	bl	80036a2 <_ZNSaIcEC1Ev>
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	461a      	mov	r2, r3
 80005da:	4629      	mov	r1, r5
 80005dc:	4620      	mov	r0, r4
 80005de:	f003 fa79 	bl	8003ad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 f85c 	bl	80036a4 <_ZNSaIcED1Ev>
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bdb0      	pop	{r4, r5, r7, pc}

080005f6 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA4_S0_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80005f6:	b5b0      	push	{r4, r5, r7, lr}
 80005f8:	b086      	sub	sp, #24
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8000602:	68b8      	ldr	r0, [r7, #8]
 8000604:	f000 fd02 	bl	800100c <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 8000608:	4603      	mov	r3, r0
 800060a:	781a      	ldrb	r2, [r3, #0]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	701a      	strb	r2, [r3, #0]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	1d1c      	adds	r4, r3, #4
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 fd1a 	bl	800104e <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800061a:	4605      	mov	r5, r0
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4618      	mov	r0, r3
 8000622:	f003 f83e 	bl	80036a2 <_ZNSaIcEC1Ev>
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	461a      	mov	r2, r3
 800062c:	4629      	mov	r1, r5
 800062e:	4620      	mov	r0, r4
 8000630:	f003 fa50 	bl	8003ad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4618      	mov	r0, r3
 800063a:	f003 f833 	bl	80036a4 <_ZNSaIcED1Ev>
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	4618      	mov	r0, r3
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bdb0      	pop	{r4, r5, r7, pc}

08000648 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA2_S0_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8000648:	b5b0      	push	{r4, r5, r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8000654:	68b8      	ldr	r0, [r7, #8]
 8000656:	f000 fcd9 	bl	800100c <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 800065a:	4603      	mov	r3, r0
 800065c:	781a      	ldrb	r2, [r3, #0]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	1d1c      	adds	r4, r3, #4
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 fcfc 	bl	8001064 <_ZSt7forwardIRA2_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800066c:	4605      	mov	r5, r0
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4618      	mov	r0, r3
 8000674:	f003 f815 	bl	80036a2 <_ZNSaIcEC1Ev>
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	461a      	mov	r2, r3
 800067e:	4629      	mov	r1, r5
 8000680:	4620      	mov	r0, r4
 8000682:	f003 fa27 	bl	8003ad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4618      	mov	r0, r3
 800068c:	f003 f80a 	bl	80036a4 <_ZNSaIcED1Ev>
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bdb0      	pop	{r4, r5, r7, pc}

0800069a <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA6_S0_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800069a:	b5b0      	push	{r4, r5, r7, lr}
 800069c:	b086      	sub	sp, #24
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80006a6:	68b8      	ldr	r0, [r7, #8]
 80006a8:	f000 fcb0 	bl	800100c <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 80006ac:	4603      	mov	r3, r0
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	701a      	strb	r2, [r3, #0]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	1d1c      	adds	r4, r3, #4
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 fcde 	bl	800107a <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80006be:	4605      	mov	r5, r0
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 ffec 	bl	80036a2 <_ZNSaIcEC1Ev>
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	461a      	mov	r2, r3
 80006d0:	4629      	mov	r1, r5
 80006d2:	4620      	mov	r0, r4
 80006d4:	f003 f9fe 	bl	8003ad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 ffe1 	bl	80036a4 <_ZNSaIcED1Ev>
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	4618      	mov	r0, r3
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bdb0      	pop	{r4, r5, r7, pc}

080006ec <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fd1e 	bl	8001138 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EED1Ev>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
string TextToMorseCode(string text) {
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	f2ad 4d64 	subw	sp, sp, #1124	@ 0x464
 800070e:	af02      	add	r7, sp, #8
 8000710:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000714:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8000718:	6018      	str	r0, [r3, #0]
 800071a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800071e:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8000722:	6019      	str	r1, [r3, #0]
	string result = "";
 8000724:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000728:	4618      	mov	r0, r3
 800072a:	f002 ffba 	bl	80036a2 <_ZNSaIcEC1Ev>
 800072e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000732:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000736:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800073a:	49eb      	ldr	r1, [pc, #940]	@ (8000ae8 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3e0>)
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	f003 f9c9 	bl	8003ad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000742:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000746:	4618      	mov	r0, r3
 8000748:	f002 ffac 	bl	80036a4 <_ZNSaIcED1Ev>
	map<char, string> morse {
		{'a',".-"}, {'b',"-..."}, {'c',"-.-."}, {'d',"-.."}, {'e',"."}, {'f',"..-."}, {'g',"--."},
 800074c:	2361      	movs	r3, #97	@ 0x61
 800074e:	f887 3428 	strb.w	r3, [r7, #1064]	@ 0x428
		{'h',"...."}, {'i',".."}, {'j',".---"}, {'k',"-.-"}, {'l',".-.."}, {'m',"--"}, {'n',"-."},
		{'o',"---"}, {'p',".--."}, {'q',"--.-"}, {'r',".-."}, {'s',"..."}, {'t',"-"},
		{'u',"..-"}, {'v',"...-"}, {'w',".--"}, {'x',"-..-"}, {'y',"-.--"}, {'z',"--.."},													// W - Z
		{'0',"-----"}, {'1',".----"}, {'2',"..---"}, {'3',"...--"}, {'4',"....-"}, 													// numbers
		{'5',"....."}, {'6',"-...."}, {'7',"--..."}, {'8',"---.."}, {'9',"----."}
	};
 8000752:	f507 6185 	add.w	r1, r7, #1064	@ 0x428
 8000756:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800075a:	4ae4      	ldr	r2, [pc, #912]	@ (8000aec <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3e4>)
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fef8 	bl	8000552 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA3_S0_Lb1EEEOT_OT0_>
		{'a',".-"}, {'b',"-..."}, {'c',"-.-."}, {'d',"-.."}, {'e',"."}, {'f',"..-."}, {'g',"--."},
 8000762:	2362      	movs	r3, #98	@ 0x62
 8000764:	f887 3429 	strb.w	r3, [r7, #1065]	@ 0x429
	};
 8000768:	f207 4129 	addw	r1, r7, #1065	@ 0x429
 800076c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000770:	331c      	adds	r3, #28
 8000772:	4adf      	ldr	r2, [pc, #892]	@ (8000af0 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3e8>)
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff15 	bl	80005a4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA5_S0_Lb1EEEOT_OT0_>
		{'a',".-"}, {'b',"-..."}, {'c',"-.-."}, {'d',"-.."}, {'e',"."}, {'f',"..-."}, {'g',"--."},
 800077a:	2363      	movs	r3, #99	@ 0x63
 800077c:	f887 342a 	strb.w	r3, [r7, #1066]	@ 0x42a
	};
 8000780:	f207 412a 	addw	r1, r7, #1066	@ 0x42a
 8000784:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000788:	3338      	adds	r3, #56	@ 0x38
 800078a:	4ada      	ldr	r2, [pc, #872]	@ (8000af4 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3ec>)
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff09 	bl	80005a4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA5_S0_Lb1EEEOT_OT0_>
		{'a',".-"}, {'b',"-..."}, {'c',"-.-."}, {'d',"-.."}, {'e',"."}, {'f',"..-."}, {'g',"--."},
 8000792:	2364      	movs	r3, #100	@ 0x64
 8000794:	f887 342b 	strb.w	r3, [r7, #1067]	@ 0x42b
	};
 8000798:	f207 412b 	addw	r1, r7, #1067	@ 0x42b
 800079c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007a0:	3354      	adds	r3, #84	@ 0x54
 80007a2:	4ad5      	ldr	r2, [pc, #852]	@ (8000af8 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f0>)
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff26 	bl	80005f6 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA4_S0_Lb1EEEOT_OT0_>
		{'a',".-"}, {'b',"-..."}, {'c',"-.-."}, {'d',"-.."}, {'e',"."}, {'f',"..-."}, {'g',"--."},
 80007aa:	2365      	movs	r3, #101	@ 0x65
 80007ac:	f887 342c 	strb.w	r3, [r7, #1068]	@ 0x42c
	};
 80007b0:	f207 412c 	addw	r1, r7, #1068	@ 0x42c
 80007b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007b8:	3370      	adds	r3, #112	@ 0x70
 80007ba:	4ad0      	ldr	r2, [pc, #832]	@ (8000afc <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f4>)
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff43 	bl	8000648 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA2_S0_Lb1EEEOT_OT0_>
		{'a',".-"}, {'b',"-..."}, {'c',"-.-."}, {'d',"-.."}, {'e',"."}, {'f',"..-."}, {'g',"--."},
 80007c2:	2366      	movs	r3, #102	@ 0x66
 80007c4:	f887 342d 	strb.w	r3, [r7, #1069]	@ 0x42d
	};
 80007c8:	f207 412d 	addw	r1, r7, #1069	@ 0x42d
 80007cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007d0:	338c      	adds	r3, #140	@ 0x8c
 80007d2:	4acb      	ldr	r2, [pc, #812]	@ (8000b00 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3f8>)
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fee5 	bl	80005a4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA5_S0_Lb1EEEOT_OT0_>
		{'a',".-"}, {'b',"-..."}, {'c',"-.-."}, {'d',"-.."}, {'e',"."}, {'f',"..-."}, {'g',"--."},
 80007da:	2367      	movs	r3, #103	@ 0x67
 80007dc:	f887 342e 	strb.w	r3, [r7, #1070]	@ 0x42e
	};
 80007e0:	f207 412e 	addw	r1, r7, #1070	@ 0x42e
 80007e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007e8:	33a8      	adds	r3, #168	@ 0xa8
 80007ea:	4ac6      	ldr	r2, [pc, #792]	@ (8000b04 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3fc>)
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff02 	bl	80005f6 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA4_S0_Lb1EEEOT_OT0_>
		{'h',"...."}, {'i',".."}, {'j',".---"}, {'k',"-.-"}, {'l',".-.."}, {'m',"--"}, {'n',"-."},
 80007f2:	2368      	movs	r3, #104	@ 0x68
 80007f4:	f887 342f 	strb.w	r3, [r7, #1071]	@ 0x42f
	};
 80007f8:	f207 412f 	addw	r1, r7, #1071	@ 0x42f
 80007fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000800:	33c4      	adds	r3, #196	@ 0xc4
 8000802:	4ac1      	ldr	r2, [pc, #772]	@ (8000b08 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x400>)
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fecd 	bl	80005a4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA5_S0_Lb1EEEOT_OT0_>
		{'h',"...."}, {'i',".."}, {'j',".---"}, {'k',"-.-"}, {'l',".-.."}, {'m',"--"}, {'n',"-."},
 800080a:	2369      	movs	r3, #105	@ 0x69
 800080c:	f887 3430 	strb.w	r3, [r7, #1072]	@ 0x430
	};
 8000810:	f507 6186 	add.w	r1, r7, #1072	@ 0x430
 8000814:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000818:	33e0      	adds	r3, #224	@ 0xe0
 800081a:	4abc      	ldr	r2, [pc, #752]	@ (8000b0c <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x404>)
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fe98 	bl	8000552 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA3_S0_Lb1EEEOT_OT0_>
		{'h',"...."}, {'i',".."}, {'j',".---"}, {'k',"-.-"}, {'l',".-.."}, {'m',"--"}, {'n',"-."},
 8000822:	236a      	movs	r3, #106	@ 0x6a
 8000824:	f887 3431 	strb.w	r3, [r7, #1073]	@ 0x431
	};
 8000828:	f207 4131 	addw	r1, r7, #1073	@ 0x431
 800082c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000830:	33fc      	adds	r3, #252	@ 0xfc
 8000832:	4ab7      	ldr	r2, [pc, #732]	@ (8000b10 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x408>)
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff feb5 	bl	80005a4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA5_S0_Lb1EEEOT_OT0_>
		{'h',"...."}, {'i',".."}, {'j',".---"}, {'k',"-.-"}, {'l',".-.."}, {'m',"--"}, {'n',"-."},
 800083a:	236b      	movs	r3, #107	@ 0x6b
 800083c:	f887 3432 	strb.w	r3, [r7, #1074]	@ 0x432
	};
 8000840:	f207 4132 	addw	r1, r7, #1074	@ 0x432
 8000844:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000848:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800084c:	4ab1      	ldr	r2, [pc, #708]	@ (8000b14 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40c>)
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fed1 	bl	80005f6 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA4_S0_Lb1EEEOT_OT0_>
		{'h',"...."}, {'i',".."}, {'j',".---"}, {'k',"-.-"}, {'l',".-.."}, {'m',"--"}, {'n',"-."},
 8000854:	236c      	movs	r3, #108	@ 0x6c
 8000856:	f887 3433 	strb.w	r3, [r7, #1075]	@ 0x433
	};
 800085a:	f207 4133 	addw	r1, r7, #1075	@ 0x433
 800085e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000862:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8000866:	4aac      	ldr	r2, [pc, #688]	@ (8000b18 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x410>)
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fe9b 	bl	80005a4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA5_S0_Lb1EEEOT_OT0_>
		{'h',"...."}, {'i',".."}, {'j',".---"}, {'k',"-.-"}, {'l',".-.."}, {'m',"--"}, {'n',"-."},
 800086e:	236d      	movs	r3, #109	@ 0x6d
 8000870:	f887 3434 	strb.w	r3, [r7, #1076]	@ 0x434
	};
 8000874:	f207 4134 	addw	r1, r7, #1076	@ 0x434
 8000878:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800087c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000880:	4aa6      	ldr	r2, [pc, #664]	@ (8000b1c <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x414>)
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fe65 	bl	8000552 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA3_S0_Lb1EEEOT_OT0_>
		{'h',"...."}, {'i',".."}, {'j',".---"}, {'k',"-.-"}, {'l',".-.."}, {'m',"--"}, {'n',"-."},
 8000888:	236e      	movs	r3, #110	@ 0x6e
 800088a:	f887 3435 	strb.w	r3, [r7, #1077]	@ 0x435
	};
 800088e:	f207 4135 	addw	r1, r7, #1077	@ 0x435
 8000892:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000896:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800089a:	4aa1      	ldr	r2, [pc, #644]	@ (8000b20 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x418>)
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe58 	bl	8000552 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA3_S0_Lb1EEEOT_OT0_>
		{'o',"---"}, {'p',".--."}, {'q',"--.-"}, {'r',".-."}, {'s',"..."}, {'t',"-"},
 80008a2:	236f      	movs	r3, #111	@ 0x6f
 80008a4:	f887 3436 	strb.w	r3, [r7, #1078]	@ 0x436
	};
 80008a8:	f207 4136 	addw	r1, r7, #1078	@ 0x436
 80008ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008b0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80008b4:	4a9b      	ldr	r2, [pc, #620]	@ (8000b24 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x41c>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe9d 	bl	80005f6 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA4_S0_Lb1EEEOT_OT0_>
		{'o',"---"}, {'p',".--."}, {'q',"--.-"}, {'r',".-."}, {'s',"..."}, {'t',"-"},
 80008bc:	2370      	movs	r3, #112	@ 0x70
 80008be:	f887 3437 	strb.w	r3, [r7, #1079]	@ 0x437
	};
 80008c2:	f207 4137 	addw	r1, r7, #1079	@ 0x437
 80008c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008ca:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 80008ce:	4a96      	ldr	r2, [pc, #600]	@ (8000b28 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x420>)
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe67 	bl	80005a4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA5_S0_Lb1EEEOT_OT0_>
		{'o',"---"}, {'p',".--."}, {'q',"--.-"}, {'r',".-."}, {'s',"..."}, {'t',"-"},
 80008d6:	2371      	movs	r3, #113	@ 0x71
 80008d8:	f887 3438 	strb.w	r3, [r7, #1080]	@ 0x438
	};
 80008dc:	f507 6187 	add.w	r1, r7, #1080	@ 0x438
 80008e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008e4:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 80008e8:	4a90      	ldr	r2, [pc, #576]	@ (8000b2c <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x424>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe5a 	bl	80005a4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA5_S0_Lb1EEEOT_OT0_>
		{'o',"---"}, {'p',".--."}, {'q',"--.-"}, {'r',".-."}, {'s',"..."}, {'t',"-"},
 80008f0:	2372      	movs	r3, #114	@ 0x72
 80008f2:	f887 3439 	strb.w	r3, [r7, #1081]	@ 0x439
	};
 80008f6:	f207 4139 	addw	r1, r7, #1081	@ 0x439
 80008fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008fe:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8000902:	4a8b      	ldr	r2, [pc, #556]	@ (8000b30 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x428>)
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fe76 	bl	80005f6 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA4_S0_Lb1EEEOT_OT0_>
		{'o',"---"}, {'p',".--."}, {'q',"--.-"}, {'r',".-."}, {'s',"..."}, {'t',"-"},
 800090a:	2373      	movs	r3, #115	@ 0x73
 800090c:	f887 343a 	strb.w	r3, [r7, #1082]	@ 0x43a
	};
 8000910:	f207 413a 	addw	r1, r7, #1082	@ 0x43a
 8000914:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000918:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800091c:	4a85      	ldr	r2, [pc, #532]	@ (8000b34 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42c>)
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fe69 	bl	80005f6 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA4_S0_Lb1EEEOT_OT0_>
		{'o',"---"}, {'p',".--."}, {'q',"--.-"}, {'r',".-."}, {'s',"..."}, {'t',"-"},
 8000924:	2374      	movs	r3, #116	@ 0x74
 8000926:	f887 343b 	strb.w	r3, [r7, #1083]	@ 0x43b
	};
 800092a:	f207 413b 	addw	r1, r7, #1083	@ 0x43b
 800092e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000932:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8000936:	4a80      	ldr	r2, [pc, #512]	@ (8000b38 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x430>)
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fe85 	bl	8000648 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA2_S0_Lb1EEEOT_OT0_>
		{'u',"..-"}, {'v',"...-"}, {'w',".--"}, {'x',"-..-"}, {'y',"-.--"}, {'z',"--.."},													// W - Z
 800093e:	2375      	movs	r3, #117	@ 0x75
 8000940:	f887 343c 	strb.w	r3, [r7, #1084]	@ 0x43c
	};
 8000944:	f207 413c 	addw	r1, r7, #1084	@ 0x43c
 8000948:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800094c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8000950:	4a7a      	ldr	r2, [pc, #488]	@ (8000b3c <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x434>)
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fe4f 	bl	80005f6 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA4_S0_Lb1EEEOT_OT0_>
		{'u',"..-"}, {'v',"...-"}, {'w',".--"}, {'x',"-..-"}, {'y',"-.--"}, {'z',"--.."},													// W - Z
 8000958:	2376      	movs	r3, #118	@ 0x76
 800095a:	f887 343d 	strb.w	r3, [r7, #1085]	@ 0x43d
	};
 800095e:	f207 413d 	addw	r1, r7, #1085	@ 0x43d
 8000962:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000966:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800096a:	4a75      	ldr	r2, [pc, #468]	@ (8000b40 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x438>)
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fe19 	bl	80005a4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA5_S0_Lb1EEEOT_OT0_>
		{'u',"..-"}, {'v',"...-"}, {'w',".--"}, {'x',"-..-"}, {'y',"-.--"}, {'z',"--.."},													// W - Z
 8000972:	2377      	movs	r3, #119	@ 0x77
 8000974:	f887 343e 	strb.w	r3, [r7, #1086]	@ 0x43e
	};
 8000978:	f207 413e 	addw	r1, r7, #1086	@ 0x43e
 800097c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000980:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8000984:	4a6f      	ldr	r2, [pc, #444]	@ (8000b44 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x43c>)
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fe35 	bl	80005f6 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA4_S0_Lb1EEEOT_OT0_>
		{'u',"..-"}, {'v',"...-"}, {'w',".--"}, {'x',"-..-"}, {'y',"-.--"}, {'z',"--.."},													// W - Z
 800098c:	2378      	movs	r3, #120	@ 0x78
 800098e:	f887 343f 	strb.w	r3, [r7, #1087]	@ 0x43f
	};
 8000992:	f207 413f 	addw	r1, r7, #1087	@ 0x43f
 8000996:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800099a:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800099e:	4a6a      	ldr	r2, [pc, #424]	@ (8000b48 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x440>)
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fdff 	bl	80005a4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA5_S0_Lb1EEEOT_OT0_>
		{'u',"..-"}, {'v',"...-"}, {'w',".--"}, {'x',"-..-"}, {'y',"-.--"}, {'z',"--.."},													// W - Z
 80009a6:	2379      	movs	r3, #121	@ 0x79
 80009a8:	f887 3440 	strb.w	r3, [r7, #1088]	@ 0x440
	};
 80009ac:	f507 6188 	add.w	r1, r7, #1088	@ 0x440
 80009b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009b4:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80009b8:	4a64      	ldr	r2, [pc, #400]	@ (8000b4c <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x444>)
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fdf2 	bl	80005a4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA5_S0_Lb1EEEOT_OT0_>
		{'u',"..-"}, {'v',"...-"}, {'w',".--"}, {'x',"-..-"}, {'y',"-.--"}, {'z',"--.."},													// W - Z
 80009c0:	237a      	movs	r3, #122	@ 0x7a
 80009c2:	f887 3441 	strb.w	r3, [r7, #1089]	@ 0x441
	};
 80009c6:	f207 4141 	addw	r1, r7, #1089	@ 0x441
 80009ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009ce:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80009d2:	4a5f      	ldr	r2, [pc, #380]	@ (8000b50 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x448>)
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fde5 	bl	80005a4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA5_S0_Lb1EEEOT_OT0_>
		{'0',"-----"}, {'1',".----"}, {'2',"..---"}, {'3',"...--"}, {'4',"....-"}, 													// numbers
 80009da:	2330      	movs	r3, #48	@ 0x30
 80009dc:	f887 3442 	strb.w	r3, [r7, #1090]	@ 0x442
	};
 80009e0:	f207 4142 	addw	r1, r7, #1090	@ 0x442
 80009e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009e8:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 80009ec:	4a59      	ldr	r2, [pc, #356]	@ (8000b54 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44c>)
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fe53 	bl	800069a <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA6_S0_Lb1EEEOT_OT0_>
		{'0',"-----"}, {'1',".----"}, {'2',"..---"}, {'3',"...--"}, {'4',"....-"}, 													// numbers
 80009f4:	2331      	movs	r3, #49	@ 0x31
 80009f6:	f887 3443 	strb.w	r3, [r7, #1091]	@ 0x443
	};
 80009fa:	f207 4143 	addw	r1, r7, #1091	@ 0x443
 80009fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a02:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8000a06:	4a54      	ldr	r2, [pc, #336]	@ (8000b58 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x450>)
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fe46 	bl	800069a <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA6_S0_Lb1EEEOT_OT0_>
		{'0',"-----"}, {'1',".----"}, {'2',"..---"}, {'3',"...--"}, {'4',"....-"}, 													// numbers
 8000a0e:	2332      	movs	r3, #50	@ 0x32
 8000a10:	f887 3444 	strb.w	r3, [r7, #1092]	@ 0x444
	};
 8000a14:	f207 4144 	addw	r1, r7, #1092	@ 0x444
 8000a18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a1c:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8000a20:	4a4e      	ldr	r2, [pc, #312]	@ (8000b5c <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x454>)
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fe39 	bl	800069a <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA6_S0_Lb1EEEOT_OT0_>
		{'0',"-----"}, {'1',".----"}, {'2',"..---"}, {'3',"...--"}, {'4',"....-"}, 													// numbers
 8000a28:	2333      	movs	r3, #51	@ 0x33
 8000a2a:	f887 3445 	strb.w	r3, [r7, #1093]	@ 0x445
	};
 8000a2e:	f207 4145 	addw	r1, r7, #1093	@ 0x445
 8000a32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a36:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8000a3a:	4a49      	ldr	r2, [pc, #292]	@ (8000b60 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x458>)
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fe2c 	bl	800069a <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA6_S0_Lb1EEEOT_OT0_>
		{'0',"-----"}, {'1',".----"}, {'2',"..---"}, {'3',"...--"}, {'4',"....-"}, 													// numbers
 8000a42:	2334      	movs	r3, #52	@ 0x34
 8000a44:	f887 3446 	strb.w	r3, [r7, #1094]	@ 0x446
	};
 8000a48:	f207 4146 	addw	r1, r7, #1094	@ 0x446
 8000a4c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a50:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8000a54:	4a43      	ldr	r2, [pc, #268]	@ (8000b64 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x45c>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fe1f 	bl	800069a <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA6_S0_Lb1EEEOT_OT0_>
		{'5',"....."}, {'6',"-...."}, {'7',"--..."}, {'8',"---.."}, {'9',"----."}
 8000a5c:	2335      	movs	r3, #53	@ 0x35
 8000a5e:	f887 3447 	strb.w	r3, [r7, #1095]	@ 0x447
	};
 8000a62:	f207 4147 	addw	r1, r7, #1095	@ 0x447
 8000a66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a6a:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 8000a6e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b68 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x460>)
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fe12 	bl	800069a <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA6_S0_Lb1EEEOT_OT0_>
		{'5',"....."}, {'6',"-...."}, {'7',"--..."}, {'8',"---.."}, {'9',"----."}
 8000a76:	2336      	movs	r3, #54	@ 0x36
 8000a78:	f887 3448 	strb.w	r3, [r7, #1096]	@ 0x448
	};
 8000a7c:	f507 6189 	add.w	r1, r7, #1096	@ 0x448
 8000a80:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a84:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8000a88:	4a38      	ldr	r2, [pc, #224]	@ (8000b6c <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x464>)
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fe05 	bl	800069a <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA6_S0_Lb1EEEOT_OT0_>
		{'5',"....."}, {'6',"-...."}, {'7',"--..."}, {'8',"---.."}, {'9',"----."}
 8000a90:	2337      	movs	r3, #55	@ 0x37
 8000a92:	f887 3449 	strb.w	r3, [r7, #1097]	@ 0x449
	};
 8000a96:	f207 4149 	addw	r1, r7, #1097	@ 0x449
 8000a9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a9e:	f503 7367 	add.w	r3, r3, #924	@ 0x39c
 8000aa2:	4a33      	ldr	r2, [pc, #204]	@ (8000b70 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x468>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fdf8 	bl	800069a <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA6_S0_Lb1EEEOT_OT0_>
		{'5',"....."}, {'6',"-...."}, {'7',"--..."}, {'8',"---.."}, {'9',"----."}
 8000aaa:	2338      	movs	r3, #56	@ 0x38
 8000aac:	f887 344a 	strb.w	r3, [r7, #1098]	@ 0x44a
	};
 8000ab0:	f207 414a 	addw	r1, r7, #1098	@ 0x44a
 8000ab4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ab8:	f503 736e 	add.w	r3, r3, #952	@ 0x3b8
 8000abc:	4a2d      	ldr	r2, [pc, #180]	@ (8000b74 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x46c>)
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fdeb 	bl	800069a <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA6_S0_Lb1EEEOT_OT0_>
		{'5',"....."}, {'6',"-...."}, {'7',"--..."}, {'8',"---.."}, {'9',"----."}
 8000ac4:	2339      	movs	r3, #57	@ 0x39
 8000ac6:	f887 344b 	strb.w	r3, [r7, #1099]	@ 0x44b
	};
 8000aca:	f207 414b 	addw	r1, r7, #1099	@ 0x44b
 8000ace:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ad2:	f503 7375 	add.w	r3, r3, #980	@ 0x3d4
 8000ad6:	4a28      	ldr	r2, [pc, #160]	@ (8000b78 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x470>)
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fdde 	bl	800069a <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IcRA6_S0_Lb1EEEOT_OT0_>
 8000ade:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000ae2:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000ae6:	e049      	b.n	8000b7c <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x474>
 8000ae8:	08003e8c 	.word	0x08003e8c
 8000aec:	08003e90 	.word	0x08003e90
 8000af0:	08003e94 	.word	0x08003e94
 8000af4:	08003e9c 	.word	0x08003e9c
 8000af8:	08003ea4 	.word	0x08003ea4
 8000afc:	08003ea8 	.word	0x08003ea8
 8000b00:	08003eac 	.word	0x08003eac
 8000b04:	08003eb4 	.word	0x08003eb4
 8000b08:	08003eb8 	.word	0x08003eb8
 8000b0c:	08003ec0 	.word	0x08003ec0
 8000b10:	08003ec4 	.word	0x08003ec4
 8000b14:	08003ecc 	.word	0x08003ecc
 8000b18:	08003ed0 	.word	0x08003ed0
 8000b1c:	08003ed8 	.word	0x08003ed8
 8000b20:	08003edc 	.word	0x08003edc
 8000b24:	08003ee0 	.word	0x08003ee0
 8000b28:	08003ee4 	.word	0x08003ee4
 8000b2c:	08003eec 	.word	0x08003eec
 8000b30:	08003ef4 	.word	0x08003ef4
 8000b34:	08003ef8 	.word	0x08003ef8
 8000b38:	08003efc 	.word	0x08003efc
 8000b3c:	08003f00 	.word	0x08003f00
 8000b40:	08003f04 	.word	0x08003f04
 8000b44:	08003f0c 	.word	0x08003f0c
 8000b48:	08003f10 	.word	0x08003f10
 8000b4c:	08003f18 	.word	0x08003f18
 8000b50:	08003f20 	.word	0x08003f20
 8000b54:	08003f28 	.word	0x08003f28
 8000b58:	08003f30 	.word	0x08003f30
 8000b5c:	08003f38 	.word	0x08003f38
 8000b60:	08003f40 	.word	0x08003f40
 8000b64:	08003f48 	.word	0x08003f48
 8000b68:	08003f50 	.word	0x08003f50
 8000b6c:	08003f58 	.word	0x08003f58
 8000b70:	08003f60 	.word	0x08003f60
 8000b74:	08003f68 	.word	0x08003f68
 8000b78:	08003f70 	.word	0x08003f70
 8000b7c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000b86:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8000b8a:	2224      	movs	r2, #36	@ 0x24
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fa7c 	bl	8001090 <_ZNSaISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 8000b98:	f207 414c 	addw	r1, r7, #1100	@ 0x44c
 8000b9c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000ba0:	f5a3 6285 	sub.w	r2, r3, #1064	@ 0x428
 8000ba4:	f107 0014 	add.w	r0, r7, #20
 8000ba8:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	ca06      	ldmia	r2, {r1, r2}
 8000bb2:	f000 fa85 	bl	80010c0 <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEEC1ESt16initializer_listISA_ERKS7_RKSB_>
 8000bb6:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fa74 	bl	80010a8 <_ZNSaISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
 8000bc0:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000bc4:	f504 747c 	add.w	r4, r4, #1008	@ 0x3f0
 8000bc8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d004      	beq.n	8000bda <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4d2>
 8000bd0:	3c1c      	subs	r4, #28
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	f7ff fcaf 	bl	8000536 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8000bd8:	e7f6      	b.n	8000bc8 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4c0>

	for (char c : text) {
 8000bda:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000bde:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
 8000be8:	f8d7 0454 	ldr.w	r0, [r7, #1108]	@ 0x454
 8000bec:	f002 fe8a 	bl	8003904 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000bf6:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	f8d7 0454 	ldr.w	r0, [r7, #1108]	@ 0x454
 8000c00:	f002 fe82 	bl	8003908 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8000c04:	4602      	mov	r2, r0
 8000c06:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000c0a:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	e04a      	b.n	8000ca8 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5a0>
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 facb 	bl	80011b2 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	781a      	ldrb	r2, [r3, #0]
 8000c20:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000c24:	f2a3 4345 	subw	r3, r3, #1093	@ 0x445
 8000c28:	701a      	strb	r2, [r3, #0]
		if (isalpha(c) || isdigit(c)) {
 8000c2a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000c2e:	f2a3 4345 	subw	r3, r3, #1093	@ 0x445
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 f835 	bl	8003ca4 <isalpha>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10c      	bne.n	8000c5a <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x552>
 8000c40:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000c44:	f2a3 4345 	subw	r3, r3, #1093	@ 0x445
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	3b30      	subs	r3, #48	@ 0x30
 8000c4c:	2b09      	cmp	r3, #9
 8000c4e:	bf94      	ite	ls
 8000c50:	2301      	movls	r3, #1
 8000c52:	2300      	movhi	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d011      	beq.n	8000c7e <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x576>
			result += morse[c];
 8000c5a:	f107 0213 	add.w	r2, r7, #19
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fab1 	bl	80011cc <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEEixERS9_>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000c70:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8000c74:	4611      	mov	r1, r2
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	f002 fee4 	bl	8003a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8000c7c:	e007      	b.n	8000c8e <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x586>
		} else {
			result += '/';
 8000c7e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000c82:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8000c86:	212f      	movs	r1, #47	@ 0x2f
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	f002 fe9b 	bl	80039c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
		}
		result += ' ';
 8000c8e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000c92:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8000c96:	2120      	movs	r1, #32
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	f002 fe93 	bl	80039c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	for (char c : text) {
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fa75 	bl	8001192 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8000ca8:	f107 0208 	add.w	r2, r7, #8
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fa55 	bl	8001162 <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1a9      	bne.n	8000c12 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50a>
	}

	return result;
 8000cbe:	bf00      	nop
}
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fd11 	bl	80006ec <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEED1Ev>
	return result;
 8000cca:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000cce:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8000cd2:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8000cd6:	f2a2 4254 	subw	r2, r2, #1108	@ 0x454
 8000cda:	6812      	ldr	r2, [r2, #0]
 8000cdc:	601a      	str	r2, [r3, #0]
}
 8000cde:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000ce2:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	f207 475c 	addw	r7, r7, #1116	@ 0x45c
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd90      	pop	{r4, r7, pc}

08000cf0 <_Z8blinkLEDNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 * space between letters = 200 * 3 = 600ms
 * space between words = 200 * 7 = 1400ms
 *
*/

void blinkLED(string code) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	for (char c : code) {
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	6978      	ldr	r0, [r7, #20]
 8000cfe:	f002 fe01 	bl	8003904 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8000d02:	4603      	mov	r3, r0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f002 fdfe 	bl	8003908 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	e056      	b.n	8000dc0 <_Z8blinkLEDNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fa4b 	bl	80011b2 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	74fb      	strb	r3, [r7, #19]
		switch (c) {
 8000d22:	7cfb      	ldrb	r3, [r7, #19]
 8000d24:	3b20      	subs	r3, #32
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	d844      	bhi.n	8000db4 <_Z8blinkLEDNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>
 8000d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d30 <_Z8blinkLEDNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000da3 	.word	0x08000da3
 8000d34:	08000db5 	.word	0x08000db5
 8000d38:	08000db5 	.word	0x08000db5
 8000d3c:	08000db5 	.word	0x08000db5
 8000d40:	08000db5 	.word	0x08000db5
 8000d44:	08000db5 	.word	0x08000db5
 8000d48:	08000db5 	.word	0x08000db5
 8000d4c:	08000db5 	.word	0x08000db5
 8000d50:	08000db5 	.word	0x08000db5
 8000d54:	08000db5 	.word	0x08000db5
 8000d58:	08000db5 	.word	0x08000db5
 8000d5c:	08000db5 	.word	0x08000db5
 8000d60:	08000db5 	.word	0x08000db5
 8000d64:	08000d89 	.word	0x08000d89
 8000d68:	08000d71 	.word	0x08000d71
 8000d6c:	08000dab 	.word	0x08000dab
			case '.':
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d70:	2120      	movs	r1, #32
 8000d72:	481b      	ldr	r0, [pc, #108]	@ (8000de0 <_Z8blinkLEDNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf0>)
 8000d74:	f002 f843 	bl	8002dfe <HAL_GPIO_TogglePin>
				HAL_Delay(200);
 8000d78:	20c8      	movs	r0, #200	@ 0xc8
 8000d7a:	f001 fd81 	bl	8002880 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d7e:	2120      	movs	r1, #32
 8000d80:	4817      	ldr	r0, [pc, #92]	@ (8000de0 <_Z8blinkLEDNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf0>)
 8000d82:	f002 f83c 	bl	8002dfe <HAL_GPIO_TogglePin>
				break;
 8000d86:	e016      	b.n	8000db6 <_Z8blinkLEDNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc6>
			case '-':
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d88:	2120      	movs	r1, #32
 8000d8a:	4815      	ldr	r0, [pc, #84]	@ (8000de0 <_Z8blinkLEDNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf0>)
 8000d8c:	f002 f837 	bl	8002dfe <HAL_GPIO_TogglePin>
				HAL_Delay(600);
 8000d90:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000d94:	f001 fd74 	bl	8002880 <HAL_Delay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000d98:	2120      	movs	r1, #32
 8000d9a:	4811      	ldr	r0, [pc, #68]	@ (8000de0 <_Z8blinkLEDNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xf0>)
 8000d9c:	f002 f82f 	bl	8002dfe <HAL_GPIO_TogglePin>
				break;
 8000da0:	e009      	b.n	8000db6 <_Z8blinkLEDNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc6>
			case ' ': // in-between letters
				HAL_Delay(200);
 8000da2:	20c8      	movs	r0, #200	@ 0xc8
 8000da4:	f001 fd6c 	bl	8002880 <HAL_Delay>
				break;
 8000da8:	e005      	b.n	8000db6 <_Z8blinkLEDNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc6>
			case '/': // in-between words
				HAL_Delay(1400);
 8000daa:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8000dae:	f001 fd67 	bl	8002880 <HAL_Delay>
				break;
 8000db2:	e000      	b.n	8000db6 <_Z8blinkLEDNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc6>
			default:
				break;
 8000db4:	bf00      	nop
	for (char c : code) {
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f9e9 	bl	8001192 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8000dc0:	f107 0208 	add.w	r2, r7, #8
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f9c9 	bl	8001162 <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d19d      	bne.n	8000d12 <_Z8blinkLEDNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22>
		}
	}
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40020000 	.word	0x40020000

08000de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b09a      	sub	sp, #104	@ 0x68
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dea:	f001 fcd7 	bl	800279c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dee:	f000 f84b 	bl	8000e88 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df2:	f000 f8b3 	bl	8000f5c <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */
  string val = "hello world";
 8000df6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 fc51 	bl	80036a2 <_ZNSaIcEC1Ev>
 8000e00:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	491d      	ldr	r1, [pc, #116]	@ (8000e80 <main+0x9c>)
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f002 fe62 	bl	8003ad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000e10:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 fc45 	bl	80036a4 <_ZNSaIcED1Ev>
  string morse = TextToMorseCode(val);
 8000e1a:	f107 021c 	add.w	r2, r7, #28
 8000e1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fe2c 	bl	8003a82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fc68 	bl	8000708 <_Z15TextToMorseCodeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000e38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 fd5b 	bl	80038f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8000e42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e46:	480f      	ldr	r0, [pc, #60]	@ (8000e84 <main+0xa0>)
 8000e48:	f001 ffa8 	bl	8002d9c <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bf0c      	ite	eq
 8000e52:	2301      	moveq	r3, #1
 8000e54:	2300      	movne	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f2      	beq.n	8000e42 <main+0x5e>
		blinkLED(morse);
 8000e5c:	1d3a      	adds	r2, r7, #4
 8000e5e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 fe0c 	bl	8003a82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000e6a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff3e 	bl	8000cf0 <_Z8blinkLEDNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000e74:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fd3d 	bl	80038f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 8000e7e:	e7e0      	b.n	8000e42 <main+0x5e>
 8000e80:	08003f78 	.word	0x08003f78
 8000e84:	40020800 	.word	0x40020800

08000e88 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b094      	sub	sp, #80	@ 0x50
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0320 	add.w	r3, r7, #32
 8000e92:	2230      	movs	r2, #48	@ 0x30
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 ff0c 	bl	8003cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	4b28      	ldr	r3, [pc, #160]	@ (8000f54 <_Z18SystemClock_Configv+0xcc>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb4:	4a27      	ldr	r2, [pc, #156]	@ (8000f54 <_Z18SystemClock_Configv+0xcc>)
 8000eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ebc:	4b25      	ldr	r3, [pc, #148]	@ (8000f54 <_Z18SystemClock_Configv+0xcc>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	4b22      	ldr	r3, [pc, #136]	@ (8000f58 <_Z18SystemClock_Configv+0xd0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ed4:	4a20      	ldr	r2, [pc, #128]	@ (8000f58 <_Z18SystemClock_Configv+0xd0>)
 8000ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f58 <_Z18SystemClock_Configv+0xd0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef8:	f107 0320 	add.w	r3, r7, #32
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 ff99 	bl	8002e34 <HAL_RCC_OscConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	bf14      	ite	ne
 8000f08:	2301      	movne	r3, #1
 8000f0a:	2300      	moveq	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000f12:	f000 f875 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f16:	230f      	movs	r3, #15
 8000f18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 f9f7 	bl	8003324 <HAL_RCC_ClockConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf14      	ite	ne
 8000f3c:	2301      	movne	r3, #1
 8000f3e:	2300      	moveq	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000f46:	f000 f85b 	bl	8001000 <Error_Handler>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3750      	adds	r7, #80	@ 0x50
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40007000 	.word	0x40007000

08000f5c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0x98>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0x98>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0x98>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0x98>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a17      	ldr	r2, [pc, #92]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0x98>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0x98>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2120      	movs	r1, #32
 8000fae:	4812      	ldr	r0, [pc, #72]	@ (8000ff8 <_ZL12MX_GPIO_Initv+0x9c>)
 8000fb0:	f001 ff0c 	bl	8002dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <_ZL12MX_GPIO_Initv+0xa0>)
 8000fca:	f001 fd63 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fce:	2320      	movs	r3, #32
 8000fd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <_ZL12MX_GPIO_Initv+0x9c>)
 8000fe6:	f001 fd55 	bl	8002a94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fea:	bf00      	nop
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	40020800 	.word	0x40020800

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <Error_Handler+0x8>

0800100c <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_ZSt7forwardIRA3_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_ZSt7forwardIRA4_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_ZSt7forwardIRA2_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_ZNSaISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f8f3 	bl	8001284 <_ZNSt15__new_allocatorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_ZNSaISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f8f2 	bl	800129a <_ZNSt15__new_allocatorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEEC1ESt16initializer_listISA_ERKS7_RKSB_>:
      map(initializer_list<value_type> __l,
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	1d38      	adds	r0, r7, #4
 80010ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80010ce:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 80010d0:	68fc      	ldr	r4, [r7, #12]
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f8e9 	bl	80012b0 <_ZNSaISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS8_>
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	461a      	mov	r2, r3
 80010e4:	6839      	ldr	r1, [r7, #0]
 80010e6:	4620      	mov	r0, r4
 80010e8:	f000 f8f0 	bl	80012cc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EEC1ERKSC_RKSD_>
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ffd9 	bl	80010a8 <_ZNSaISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 80010f6:	68fc      	ldr	r4, [r7, #12]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f904 	bl	8001308 <_ZNKSt16initializer_listISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>
 8001100:	4605      	mov	r5, r0
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f90b 	bl	8001320 <_ZNKSt16initializer_listISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE3endEv>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	4629      	mov	r1, r5
 8001110:	4620      	mov	r0, r4
 8001112:	f000 f91a 	bl	800134a <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bdb0      	pop	{r4, r5, r7, pc}

08001120 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f93b 	bl	80013a4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 f95b 	bl	80013fc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_M_beginEv>
 8001146:	4603      	mov	r3, r0
 8001148:	4619      	mov	r1, r3
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f936 	bl	80013bc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ffe4 	bl	8001120 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001162:	b590      	push	{r4, r7, lr}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f951 	bl	8001414 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8001172:	4603      	mov	r3, r0
 8001174:	681c      	ldr	r4, [r3, #0]
 8001176:	6838      	ldr	r0, [r7, #0]
 8001178:	f000 f94c 	bl	8001414 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800117c:	4603      	mov	r3, r0
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	429c      	cmp	r4, r3
 8001182:	bf14      	ite	ne
 8001184:	2301      	movne	r3, #1
 8001186:	2300      	moveq	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}

08001192 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	++_M_current;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	601a      	str	r2, [r3, #0]
	return *this;
 80011a4:	687b      	ldr	r3, [r7, #4]
      }
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEEixERS9_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b08b      	sub	sp, #44	@ 0x2c
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 80011d6:	6839      	ldr	r1, [r7, #0]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f926 	bl	800142a <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEE11lower_boundERS9_>
 80011de:	4603      	mov	r3, r0
 80011e0:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 f930 	bl	8001448 <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEE3endEv>
 80011e8:	4603      	mov	r3, r0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	f107 020c 	add.w	r2, r7, #12
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f933 	bl	8001462 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESB_>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d112      	bne.n	8001228 <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEEixERS9_+0x5c>
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f941 	bl	800148a <_ZNKSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEE8key_compEv>
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	4618      	mov	r0, r3
 800120e:	f000 f949 	bl	80014a4 <_ZNKSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEdeEv>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	6839      	ldr	r1, [r7, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f94f 	bl	80014c0 <_ZNKSt4lessIcEclERKcS2_>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEEixERS9_+0x60>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEEixERS9_+0x62>
 800122c:	2300      	movs	r3, #0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d01b      	beq.n	800126a <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEEixERS9_+0x9e>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8001232:	687c      	ldr	r4, [r7, #4]
 8001234:	f107 0208 	add.w	r2, r7, #8
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f962 	bl	8001508 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSt17_Rb_tree_iteratorIS8_E>
					    std::tuple<const key_type&>(__k),
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f94d 	bl	80014ea <_ZNSt5tupleIJRKcEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8001250:	f107 0218 	add.w	r2, r7, #24
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	4613      	mov	r3, r2
 800125c:	4a08      	ldr	r2, [pc, #32]	@ (8001280 <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEEixERS9_+0xb4>)
 800125e:	6979      	ldr	r1, [r7, #20]
 8001260:	4620      	mov	r0, r4
 8001262:	f000 f961 	bl	8001528 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
 8001266:	4603      	mov	r3, r0
 8001268:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f918 	bl	80014a4 <_ZNKSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEdeEv>
 8001274:	4603      	mov	r3, r0
 8001276:	3304      	adds	r3, #4
      }
 8001278:	4618      	mov	r0, r3
 800127a:	3724      	adds	r7, #36	@ 0x24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd90      	pop	{r4, r7, pc}
 8001280:	08003f84 	.word	0x08003f84

08001284 <_ZNSt15__new_allocatorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <_ZNSt15__new_allocatorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <_ZNSaISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS8_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f979 	bl	80015b4 <_ZNSt15__new_allocatorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS9_>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EEC1ERKSC_RKSD_>:
      _Rb_tree(const _Compare& __comp,
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 80012d8:	68fc      	ldr	r4, [r7, #12]
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f973 	bl	80015cc <_ZNSaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1IS8_EERKSaIT_E>
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	461a      	mov	r2, r3
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	4620      	mov	r0, r4
 80012f0:	f000 f979 	bl	80015e6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE13_Rb_tree_implISC_Lb1EEC1ERKSC_OSaISt13_Rb_tree_nodeIS8_EE>
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f853 	bl	80013a4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4618      	mov	r0, r3
 8001302:	371c      	adds	r7, #28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd90      	pop	{r4, r7, pc}

08001308 <_ZNKSt16initializer_listISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <_ZNKSt16initializer_listISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ffed 	bl	8001308 <_ZNKSt16initializer_listISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE5beginEv>
 800132e:	4604      	mov	r4, r0
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f975 	bl	8001620 <_ZNKSt16initializer_listISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4sizeEv>
 8001336:	4602      	mov	r2, r0
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	1a9b      	subs	r3, r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4423      	add	r3, r4
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bd90      	pop	{r4, r7, pc}

0800134a <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_>:
	using __same_value_type
	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;

      template<typename _InputIterator>
	__enable_if_t<__same_value_type<_InputIterator>::value>
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800134a:	b580      	push	{r7, lr}
 800134c:	b088      	sub	sp, #32
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
	{
	  _Alloc_node __an(*this);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	68f9      	ldr	r1, [r7, #12]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f96b 	bl	8001638 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11_Alloc_nodeC1ERSE_>
	  for (; __first != __last; ++__first)
 8001362:	e016      	b.n	8001392 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x48>
	    _M_insert_unique_(end(), *__first, __an);
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f000 f976 	bl	8001656 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE3endEv>
 800136a:	4603      	mov	r3, r0
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	f107 021c 	add.w	r2, r7, #28
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f8c5 	bl	8001508 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSt17_Rb_tree_iteratorIS8_E>
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	69b9      	ldr	r1, [r7, #24]
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f000 f976 	bl	8001678 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE17_M_insert_unique_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	331c      	adds	r3, #28
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	429a      	cmp	r2, r3
 8001398:	d1e4      	bne.n	8001364 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE22_M_insert_range_uniqueIPKS8_EENSt9enable_ifIXsrSt7is_sameIS8_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESL_SL_+0x1a>
	}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f996 	bl	80016de <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 80013c6:	e011      	b.n	80013ec <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x30>
	{
	  _M_erase(_S_right(__x));
 80013c8:	6838      	ldr	r0, [r7, #0]
 80013ca:	f000 f993 	bl	80016f4 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4619      	mov	r1, r3
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fff2 	bl	80013bc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
	  _Link_type __y = _S_left(__x);
 80013d8:	6838      	ldr	r0, [r7, #0]
 80013da:	f000 f997 	bl	800170c <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 80013de:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80013e0:	6839      	ldr	r1, [r7, #0]
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f99e 	bl	8001724 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	  __x = __y;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1ea      	bne.n	80013c8 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0xc>
	}
    }
 80013f2:	bf00      	nop
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f99e 	bl	8001746 <_ZNKSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE9_M_mbeginEv>
 800140a:	4603      	mov	r3, r0
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEE11lower_boundERS9_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6839      	ldr	r1, [r7, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f990 	bl	800175e <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11lower_boundERS1_>
 800143e:	4603      	mov	r3, r0
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <_ZNSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f8ff 	bl	8001656 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE3endEv>
 8001458:	4603      	mov	r3, r0
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESB_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	bf0c      	ite	eq
 8001478:	2301      	moveq	r3, #1
 800147a:	2300      	movne	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZNKSt3mapIcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIcESaISt4pairIKcS5_EEE8key_compEv>:
      key_comp() const
 800148a:	b590      	push	{r4, r7, lr}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	f000 f979 	bl	800178c <_ZNKSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8key_compEv>
 800149a:	bf00      	nop
 800149c:	4620      	mov	r0, r4
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}

080014a4 <_ZNKSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 f976 	bl	80017a2 <_ZNSt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_ZNKSt4lessIcEclERKcS2_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	bf34      	ite	cc
 80014d8:	2301      	movcc	r3, #1
 80014da:	2300      	movcs	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <_ZNSt5tupleIJRKcEEC1ILb1ELb1EEES1_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6839      	ldr	r1, [r7, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 f960 	bl	80017be <_ZNSt11_Tuple_implILj0EJRKcEEC1ES1_>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKSt17_Rb_tree_iteratorIS8_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b08c      	sub	sp, #48	@ 0x30
 800152c:	af02      	add	r7, sp, #8
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f950 	bl	80017dc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800153c:	4604      	mov	r4, r0
 800153e:	6838      	ldr	r0, [r7, #0]
 8001540:	f000 f957 	bl	80017f2 <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001544:	4605      	mov	r5, r0
 8001546:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001548:	f000 f95e 	bl	8001808 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800154c:	4603      	mov	r3, r0
 800154e:	f107 001c 	add.w	r0, r7, #28
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	462b      	mov	r3, r5
 8001556:	4622      	mov	r2, r4
 8001558:	68f9      	ldr	r1, [r7, #12]
 800155a:	f000 f960 	bl	800181e <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS1_EESK_IJEEEEERSE_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fab6 	bl	8001ad4 <_ZNKSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_Auto_node6_M_keyEv>
 8001568:	4603      	mov	r3, r0
 800156a:	f107 0014 	add.w	r0, r7, #20
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	68f9      	ldr	r1, [r7, #12]
 8001572:	f000 f98c 	bl	800188e <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_>
	if (__res.second)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d009      	beq.n	8001590 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x68>
	  return __z._M_insert(__res);
 800157c:	f107 001c 	add.w	r0, r7, #28
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001588:	f000 fab2 	bl	8001af0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_Auto_node9_M_insertES0_IPSt18_Rb_tree_node_baseSH_E>
 800158c:	4604      	mov	r4, r0
 800158e:	e007      	b.n	80015a0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x78>
	return iterator(__res.first);
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fac2 	bl	8001b22 <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 800159e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f95d 	bl	8001864 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_Auto_nodeD1Ev>
 80015aa:	4623      	mov	r3, r4
 80015ac:	4618      	mov	r0, r3
 80015ae:	3728      	adds	r7, #40	@ 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bdb0      	pop	{r4, r5, r7, pc}

080015b4 <_ZNSt15__new_allocatorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1ERKS9_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <_ZNSaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1IS8_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fab2 	bl	8001b40 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1Ev>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE13_Rb_tree_implISC_Lb1EEC1ERKSC_OSaISt13_Rb_tree_nodeIS8_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 faaf 	bl	8001b56 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEONSt16remove_referenceIT_E4typeEOSE_>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4619      	mov	r1, r3
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 fab5 	bl	8001b6c <_ZNSaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSA_>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fabe 	bl	8001b88 <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3304      	adds	r3, #4
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff6b 	bl	80004ec <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_ZNKSt16initializer_listISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11_Alloc_nodeC1ERSE_>:
	_Alloc_node(_Rb_tree& __t)
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	1d1a      	adds	r2, r3, #4
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fa5a 	bl	8001b22 <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE17_M_insert_unique_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b08a      	sub	sp, #40	@ 0x28
 800167c:	af02      	add	r7, sp, #8
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8001686:	f107 0318 	add.w	r3, r7, #24
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4618      	mov	r0, r3
 800168e:	f000 fa87 	bl	8001ba0 <_ZNKSt10_Select1stISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS8_>
 8001692:	4603      	mov	r3, r0
 8001694:	f107 0010 	add.w	r0, r7, #16
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	68f9      	ldr	r1, [r7, #12]
 800169c:	f000 f8f7 	bl	800188e <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_>
      if (__res.second)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00f      	beq.n	80016c6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE17_M_insert_unique_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 80016a6:	693c      	ldr	r4, [r7, #16]
 80016a8:	697d      	ldr	r5, [r7, #20]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fa84 	bl	8001bb8 <_ZSt7forwardIRKSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISB_E4typeE>
 80016b0:	4602      	mov	r2, r0
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	4613      	mov	r3, r2
 80016b8:	462a      	mov	r2, r5
 80016ba:	4621      	mov	r1, r4
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f000 fa86 	bl	8001bce <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_>
 80016c2:	4603      	mov	r3, r0
			  __node_gen);
 80016c4:	e007      	b.n	80016d6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE17_M_insert_unique_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EOT_RT0_+0x5e>
      return iterator(__res.first);
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fa27 	bl	8001b22 <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 80016d4:	69fb      	ldr	r3, [r7, #28]
    }
 80016d6:	4618      	mov	r0, r3
 80016d8:	3720      	adds	r7, #32
 80016da:	46bd      	mov	sp, r7
 80016dc:	bdb0      	pop	{r4, r5, r7, pc}

080016de <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800172e:	6839      	ldr	r1, [r7, #0]
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fa95 	bl	8001c60 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>
	_M_put_node(__p);
 8001736:	6839      	ldr	r1, [r7, #0]
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 faa6 	bl	8001c8a <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
      }
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_ZNKSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 800175e:	b590      	push	{r4, r7, lr}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff fe47 	bl	80013fc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_M_beginEv>
 800176e:	4604      	mov	r4, r0
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 fa9c 	bl	8001cae <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_M_endEv>
 8001776:	4602      	mov	r2, r0
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	4621      	mov	r1, r4
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 faa2 	bl	8001cc6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS1_>
 8001782:	4603      	mov	r3, r0
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bd90      	pop	{r4, r7, pc}

0800178c <_ZNKSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8key_compEv>:
      key_comp() const
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8001794:	bf00      	nop
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_ZNSt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>:
      _M_valptr()
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3310      	adds	r3, #16
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 faba 	bl	8001d28 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_ZNSt11_Tuple_implILj0EJRKcEEC1ES1_>:
      _Tuple_impl(const _Head& __head)
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6839      	ldr	r1, [r7, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fab7 	bl	8001d40 <_ZNSt10_Head_baseILj0ERKcLb0EEC1ES1_>
      { }
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS1_EESK_IJEEEEERSE_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 800181e:	b5b0      	push	{r4, r5, r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffd2 	bl	80017dc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001838:	4604      	mov	r4, r0
 800183a:	6838      	ldr	r0, [r7, #0]
 800183c:	f7ff ffd9 	bl	80017f2 <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001840:	4605      	mov	r5, r0
 8001842:	6a38      	ldr	r0, [r7, #32]
 8001844:	f7ff ffe0 	bl	8001808 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001848:	4603      	mov	r3, r0
 800184a:	462a      	mov	r2, r5
 800184c:	4621      	mov	r1, r4
 800184e:	68b8      	ldr	r0, [r7, #8]
 8001850:	f000 fa85 	bl	8001d5e <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>
 8001854:	4602      	mov	r2, r0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	605a      	str	r2, [r3, #4]
	  { }
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bdb0      	pop	{r4, r5, r7, pc}

08001864 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d007      	beq.n	8001884 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4619      	mov	r1, r3
 800187e:	4610      	mov	r0, r2
 8001880:	f7ff ff50 	bl	8001724 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	}
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800188e:	b590      	push	{r4, r7, lr}
 8001890:	b08d      	sub	sp, #52	@ 0x34
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fa80 	bl	8001da4 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE13_M_const_castEv>
 80018a4:	4603      	mov	r3, r0
 80018a6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80018a8:	69bc      	ldr	r4, [r7, #24]
 80018aa:	68b8      	ldr	r0, [r7, #8]
 80018ac:	f000 f9ff 	bl	8001cae <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_M_endEv>
 80018b0:	4603      	mov	r3, r0
 80018b2:	429c      	cmp	r4, r3
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d030      	beq.n	8001922 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x94>
	  if (size() > 0
 80018c0:	68b8      	ldr	r0, [r7, #8]
 80018c2:	f000 fa80 	bl	8001dc6 <_ZNKSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE4sizeEv>
 80018c6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x66>
 80018cc:	68bc      	ldr	r4, [r7, #8]
 80018ce:	68b8      	ldr	r0, [r7, #8]
 80018d0:	f000 fa85 	bl	8001dde <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE12_M_rightmostEv>
 80018d4:	4603      	mov	r3, r0
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fa8c 	bl	8001df6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80018de:	4603      	mov	r3, r0
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4620      	mov	r0, r4
 80018e6:	f7ff fdeb 	bl	80014c0 <_ZNKSt4lessIcEclERKcS2_>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x66>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x68>
 80018f4:	2300      	movs	r3, #0
	  if (size() > 0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00c      	beq.n	8001914 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	68b8      	ldr	r0, [r7, #8]
 8001900:	f000 fa6d 	bl	8001dde <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE12_M_rightmostEv>
 8001904:	4602      	mov	r2, r0
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	4619      	mov	r1, r3
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 fa7e 	bl	8001e0e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001912:	e0db      	b.n	8001acc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	4618      	mov	r0, r3
 800191c:	f000 fa8c 	bl	8001e38 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE24_M_get_insert_unique_posERS1_>
 8001920:	e0d4      	b.n	8001acc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001922:	68bc      	ldr	r4, [r7, #8]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fa65 	bl	8001df6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800192c:	4603      	mov	r3, r0
 800192e:	461a      	mov	r2, r3
 8001930:	6839      	ldr	r1, [r7, #0]
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff fdc4 	bl	80014c0 <_ZNKSt4lessIcEclERKcS2_>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d057      	beq.n	80019ee <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x160>
	  iterator __before = __pos;
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8001942:	69bc      	ldr	r4, [r7, #24]
 8001944:	68b8      	ldr	r0, [r7, #8]
 8001946:	f000 fafc 	bl	8001f42 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11_M_leftmostEv>
 800194a:	4603      	mov	r3, r0
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	429c      	cmp	r4, r3
 8001950:	bf0c      	ite	eq
 8001952:	2301      	moveq	r3, #1
 8001954:	2300      	movne	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00d      	beq.n	8001978 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800195c:	68b8      	ldr	r0, [r7, #8]
 800195e:	f000 faf0 	bl	8001f42 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11_M_leftmostEv>
 8001962:	4604      	mov	r4, r0
 8001964:	68b8      	ldr	r0, [r7, #8]
 8001966:	f000 faec 	bl	8001f42 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11_M_leftmostEv>
 800196a:	4603      	mov	r3, r0
 800196c:	461a      	mov	r2, r3
 800196e:	4621      	mov	r1, r4
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 faf2 	bl	8001f5a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001976:	e0a9      	b.n	8001acc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8001978:	68bc      	ldr	r4, [r7, #8]
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fb04 	bl	8001f8c <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>
 8001984:	4603      	mov	r3, r0
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fa34 	bl	8001df6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800198e:	4603      	mov	r3, r0
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	4620      	mov	r0, r4
 8001996:	f7ff fd93 	bl	80014c0 <_ZNKSt4lessIcEclERKcS2_>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01f      	beq.n	80019e0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fea6 	bl	80016f4 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf0c      	ite	eq
 80019ae:	2301      	moveq	r3, #1
 80019b0:	2300      	movne	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00a      	beq.n	80019ce <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x140>
		return _Res(0, __before._M_node);
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
 80019bc:	f107 0214 	add.w	r2, r7, #20
 80019c0:	f107 0320 	add.w	r3, r7, #32
 80019c4:	4619      	mov	r1, r3
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 fa21 	bl	8001e0e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 80019cc:	e07e      	b.n	8001acc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80019ce:	f107 0218 	add.w	r2, r7, #24
 80019d2:	f107 0318 	add.w	r3, r7, #24
 80019d6:	4619      	mov	r1, r3
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 fabe 	bl	8001f5a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80019de:	e075      	b.n	8001acc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fa26 	bl	8001e38 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE24_M_get_insert_unique_posERS1_>
 80019ec:	e06e      	b.n	8001acc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80019ee:	68bc      	ldr	r4, [r7, #8]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f9ff 	bl	8001df6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80019f8:	4603      	mov	r3, r0
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	4620      	mov	r0, r4
 8001a00:	f7ff fd5e 	bl	80014c0 <_ZNKSt4lessIcEclERKcS2_>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d056      	beq.n	8001ab8 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x22a>
	  iterator __after = __pos;
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001a0e:	69bc      	ldr	r4, [r7, #24]
 8001a10:	68b8      	ldr	r0, [r7, #8]
 8001a12:	f000 f9e4 	bl	8001dde <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE12_M_rightmostEv>
 8001a16:	4603      	mov	r3, r0
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	429c      	cmp	r4, r3
 8001a1c:	bf0c      	ite	eq
 8001a1e:	2301      	moveq	r3, #1
 8001a20:	2300      	movne	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00c      	beq.n	8001a42 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a2c:	68b8      	ldr	r0, [r7, #8]
 8001a2e:	f000 f9d6 	bl	8001dde <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE12_M_rightmostEv>
 8001a32:	4602      	mov	r2, r0
 8001a34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f9e7 	bl	8001e0e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001a40:	e044      	b.n	8001acc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8001a42:	68bc      	ldr	r4, [r7, #8]
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fab0 	bl	8001fae <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEppEv>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f9cf 	bl	8001df6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	6839      	ldr	r1, [r7, #0]
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f7ff fd2e 	bl	80014c0 <_ZNKSt4lessIcEclERKcS2_>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01f      	beq.n	8001aaa <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fe41 	bl	80016f4 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00a      	beq.n	8001a98 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8001a82:	2300      	movs	r3, #0
 8001a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a86:	f107 0218 	add.w	r2, r7, #24
 8001a8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 f9bc 	bl	8001e0e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001a96:	e019      	b.n	8001acc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8001a98:	f107 0210 	add.w	r2, r7, #16
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fa59 	bl	8001f5a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001aa8:	e010      	b.n	8001acc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	68b9      	ldr	r1, [r7, #8]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 f9c1 	bl	8001e38 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE24_M_get_insert_unique_posERS1_>
 8001ab6:	e009      	b.n	8001acc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001abc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001ac0:	f107 0318 	add.w	r3, r7, #24
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f9a1 	bl	8001e0e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	3734      	adds	r7, #52	@ 0x34
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}

08001ad4 <_ZNKSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fa75 	bl	8001fd0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_Auto_node9_M_insertES0_IPSt18_Rb_tree_node_baseSH_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f000 fa74 	bl	8001ff6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	605a      	str	r2, [r3, #4]
	  return __it;
 8001b18:	697b      	ldr	r3, [r7, #20]
	}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEONSt16remove_referenceIT_E4typeEOSE_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_ZNSaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSA_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001b76:	6839      	ldr	r1, [r7, #0]
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fa79 	bl	8002070 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSB_>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
      { }
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_ZNKSt10_Select1stISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS8_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_ZSt7forwardIRKSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001bce:	b5b0      	push	{r4, r5, r7, lr}
 8001bd0:	b088      	sub	sp, #32
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d11a      	bne.n	8001c18 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f863 	bl	8001cae <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_M_endEv>
 8001be8:	4602      	mov	r2, r0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8001bf0:	68fc      	ldr	r4, [r7, #12]
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ffd1 	bl	8001ba0 <_ZNKSt10_Select1stISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS8_>
 8001bfe:	4605      	mov	r5, r0
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f8f8 	bl	8001df6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f7ff fc57 	bl	80014c0 <_ZNKSt4lessIcEclERKcS2_>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x4e>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE10_M_insert_IRKS8_NSE_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSM_OT_RT0_+0x50>
 8001c1c:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8001c1e:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8001c20:	6838      	ldr	r0, [r7, #0]
 8001c22:	f7ff ffc9 	bl	8001bb8 <_ZSt7forwardIRKSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c2c:	f000 fa2c 	bl	8002088 <_ZNKSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11_Alloc_nodeclIRKS8_EEPSt13_Rb_tree_nodeIS8_EOT_>
 8001c30:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001c36:	7ff8      	ldrb	r0, [r7, #31]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	69b9      	ldr	r1, [r7, #24]
 8001c3c:	f001 fd8c 	bl	8003758 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	69b9      	ldr	r1, [r7, #24]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff66 	bl	8001b22 <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 8001c56:	697b      	ldr	r3, [r7, #20]
      }
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bdb0      	pop	{r4, r5, r7, pc}

08001c60 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fa20 	bl	80020b0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE21_M_get_Node_allocatorEv>
 8001c70:	4604      	mov	r4, r0
 8001c72:	6838      	ldr	r0, [r7, #0]
 8001c74:	f7ff fd95 	bl	80017a2 <_ZNSt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	f000 fa22 	bl	80020c6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE7destroyIS9_EEvRSB_PT_>
      }
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd90      	pop	{r4, r7, pc}

08001c8a <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fa0b 	bl	80020b0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE21_M_get_Node_allocatorEv>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fa1d 	bl	80020e0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE10deallocateERSB_PSA_j>
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001cc6:	b590      	push	{r4, r7, lr}
 8001cc8:	b087      	sub	sp, #28
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001cd4:	e01a      	b.n	8001d0c <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS1_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001cd6:	68fc      	ldr	r4, [r7, #12]
 8001cd8:	68b8      	ldr	r0, [r7, #8]
 8001cda:	f000 f979 	bl	8001fd0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff fbeb 	bl	80014c0 <_ZNKSt4lessIcEclERKcS2_>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f083 0301 	eor.w	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS1_+0x3e>
	  __y = __x, __x = _S_left(__x);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	68b8      	ldr	r0, [r7, #8]
 8001cfc:	f7ff fd06 	bl	800170c <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001d00:	60b8      	str	r0, [r7, #8]
 8001d02:	e003      	b.n	8001d0c <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS1_+0x46>
	  __x = _S_right(__x);
 8001d04:	68b8      	ldr	r0, [r7, #8]
 8001d06:	f7ff fcf5 	bl	80016f4 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001d0a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1e1      	bne.n	8001cd6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS1_+0x10>
      return iterator(__y);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff02 	bl	8001b22 <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 8001d1e:	697b      	ldr	r3, [r7, #20]
    }
 8001d20:	4618      	mov	r0, r3
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}

08001d28 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f9e4 	bl	80020fe <_ZN9__gnu_cxx16__aligned_membufISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_ZNSt10_Head_baseILj0ERKcLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001d5e:	b5b0      	push	{r4, r5, r7, lr}
 8001d60:	b088      	sub	sp, #32
 8001d62:	af02      	add	r7, sp, #8
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 f9d1 	bl	8002114 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11_M_get_nodeEv>
 8001d72:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8001d74:	68b8      	ldr	r0, [r7, #8]
 8001d76:	f7ff fd31 	bl	80017dc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff fd38 	bl	80017f2 <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001d82:	4605      	mov	r5, r0
 8001d84:	6838      	ldr	r0, [r7, #0]
 8001d86:	f7ff fd3f 	bl	8001808 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	462b      	mov	r3, r5
 8001d90:	4622      	mov	r2, r4
 8001d92:	6979      	ldr	r1, [r7, #20]
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f9ce 	bl	8002136 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>
	  return __tmp;
 8001d9a:	697b      	ldr	r3, [r7, #20]
	}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bdb0      	pop	{r4, r5, r7, pc}

08001da4 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff feb3 	bl	8001b22 <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_ZNKSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3310      	adds	r3, #16
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8e6 	bl	8001fd0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 8001e0e:	b480      	push	{r7}
 8001e10:	b085      	sub	sp, #20
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b08b      	sub	sp, #44	@ 0x2c
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8001e44:	68b8      	ldr	r0, [r7, #8]
 8001e46:	f7ff fad9 	bl	80013fc <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_M_beginEv>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8001e4e:	68b8      	ldr	r0, [r7, #8]
 8001e50:	f7ff ff2d 	bl	8001cae <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_M_endEv>
 8001e54:	4603      	mov	r3, r0
 8001e56:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 8001e5e:	e01f      	b.n	8001ea0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE24_M_get_insert_unique_posERS1_+0x68>
	  __y = __x;
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8001e64:	68bc      	ldr	r4, [r7, #8]
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 f8b1 	bl	8001fd0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4620      	mov	r0, r4
 8001e76:	f7ff fb23 	bl	80014c0 <_ZNKSt4lessIcEclERKcS2_>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001e80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE24_M_get_insert_unique_posERS1_+0x5c>
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fc3e 	bl	800170c <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001e90:	4603      	mov	r3, r0
 8001e92:	e004      	b.n	8001e9e <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE24_M_get_insert_unique_posERS1_+0x66>
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fc2c 	bl	80016f4 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1dc      	bne.n	8001e60 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE24_M_get_insert_unique_posERS1_+0x28>
      iterator __j = iterator(__y);
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fe37 	bl	8001b22 <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8001eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01d      	beq.n	8001ef8 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8001ebc:	68b8      	ldr	r0, [r7, #8]
 8001ebe:	f000 f967 	bl	8002190 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE5beginEv>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	f107 021c 	add.w	r2, r7, #28
 8001eca:	f107 0310 	add.w	r3, r7, #16
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fac6 	bl	8001462 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESB_>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8001edc:	f107 0214 	add.w	r2, r7, #20
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f963 	bl	80021b2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>
 8001eec:	e025      	b.n	8001f3a <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 f84a 	bl	8001f8c <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001ef8:	68bc      	ldr	r4, [r7, #8]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff7a 	bl	8001df6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001f02:	4603      	mov	r3, r0
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4619      	mov	r1, r3
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7ff fad9 	bl	80014c0 <_ZNKSt4lessIcEclERKcS2_>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8001f14:	f107 0214 	add.w	r2, r7, #20
 8001f18:	f107 0318 	add.w	r3, r7, #24
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f947 	bl	80021b2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>
 8001f24:	e009      	b.n	8001f3a <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
 8001f2a:	f107 0220 	add.w	r2, r7, #32
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	4619      	mov	r1, r3
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f7ff ff6a 	bl	8001e0e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	372c      	adds	r7, #44	@ 0x2c
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd90      	pop	{r4, r7, pc}

08001f42 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	330c      	adds	r3, #12
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001f66:	68b8      	ldr	r0, [r7, #8]
 8001f68:	f000 f93c 	bl	80021e4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f935 	bl	80021e4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 fbdb 	bl	8003754 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	601a      	str	r2, [r3, #0]
	return *this;
 8001fa4:	687b      	ldr	r3, [r7, #4]
      }
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f001 fbc8 	bl	8003750 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	601a      	str	r2, [r3, #0]
	return *this;
 8001fc6:	687b      	ldr	r3, [r7, #4]
      }
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>:
      _S_key(_Const_Link_type __x)
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f90e 	bl	80021fa <_ZNKSt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fdda 	bl	8001ba0 <_ZNKSt10_Select1stISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEclERKS8_>
 8001fec:	4603      	mov	r3, r0
      }
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001ff6:	b5b0      	push	{r4, r5, r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d117      	bne.n	800203a <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff fe4f 	bl	8001cae <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_M_endEv>
 8002010:	4602      	mov	r2, r0
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4293      	cmp	r3, r2
 8002016:	d010      	beq.n	800203a <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8002018:	68fc      	ldr	r4, [r7, #12]
 800201a:	6838      	ldr	r0, [r7, #0]
 800201c:	f7ff ffd8 	bl	8001fd0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 8002020:	4605      	mov	r5, r0
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff fee7 	bl	8001df6 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	4629      	mov	r1, r5
 800202e:	4620      	mov	r0, r4
 8002030:	f7ff fa46 	bl	80014c0 <_ZNKSt4lessIcEclERKcS2_>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x48>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x4a>
 800203e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8002040:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8002046:	7df8      	ldrb	r0, [r7, #23]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6839      	ldr	r1, [r7, #0]
 800204c:	f001 fb84 	bl	8003758 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800205a:	f107 0310 	add.w	r3, r7, #16
 800205e:	6839      	ldr	r1, [r7, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fd5e 	bl	8001b22 <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 8002066:	693b      	ldr	r3, [r7, #16]
    }
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bdb0      	pop	{r4, r5, r7, pc}

08002070 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ERKSB_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_ZNKSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11_Alloc_nodeclIRKS8_EEPSt13_Rb_tree_nodeIS8_EOT_>:
	  operator()(_GLIBCXX_FWDREF(_Arg) __arg) const
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681c      	ldr	r4, [r3, #0]
 8002096:	6838      	ldr	r0, [r7, #0]
 8002098:	f7ff fd8e 	bl	8001bb8 <_ZSt7forwardIRKSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800209c:	4603      	mov	r3, r0
 800209e:	4619      	mov	r1, r3
 80020a0:	4620      	mov	r0, r4
 80020a2:	f000 f8b8 	bl	8002216 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_create_nodeIJRKS8_EEEPSt13_Rb_tree_nodeIS8_EDpOT_>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd90      	pop	{r4, r7, pc}

080020b0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE7destroyIS9_EEvRSB_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 80020d0:	6839      	ldr	r1, [r7, #0]
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8b6 	bl	8002244 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7destroyIS9_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE10deallocateERSB_PSA_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 f8b3 	bl	800225c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateEPSA_j>
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_ZN9__gnu_cxx16__aligned_membufISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>:
      _M_addr() noexcept
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11_M_get_nodeEv>:
      _M_get_node()
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ffc7 	bl	80020b0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE21_M_get_Node_allocatorEv>
 8002122:	4603      	mov	r3, r0
 8002124:	2101      	movs	r1, #1
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f8aa 	bl	8002280 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE8allocateERSB_j>
 800212c:	4603      	mov	r3, r0
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8002136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4619      	mov	r1, r3
 800214a:	202c      	movs	r0, #44	@ 0x2c
 800214c:	f7fe f9c2 	bl	80004d4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f7ff ffad 	bl	80020b0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE21_M_get_Node_allocatorEv>
 8002156:	4604      	mov	r4, r0
 8002158:	68b8      	ldr	r0, [r7, #8]
 800215a:	f7ff fb22 	bl	80017a2 <_ZNSt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 800215e:	4605      	mov	r5, r0
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff fb3b 	bl	80017dc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002166:	4606      	mov	r6, r0
 8002168:	6838      	ldr	r0, [r7, #0]
 800216a:	f7ff fb42 	bl	80017f2 <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800216e:	4680      	mov	r8, r0
 8002170:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002172:	f7ff fb49 	bl	8001808 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002176:	4603      	mov	r3, r0
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	4643      	mov	r3, r8
 800217c:	4632      	mov	r2, r6
 800217e:	4629      	mov	r1, r5
 8002180:	4620      	mov	r0, r4
 8002182:	f000 f88c 	bl	800229e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESH_IJEEEEEvRSB_PT_DpOT0_>
	}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002190 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fcbd 	bl	8001b22 <_ZNSt17_Rb_tree_iteratorISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC1EPSt18_Rb_tree_node_base>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80021be:	68b8      	ldr	r0, [r7, #8]
 80021c0:	f000 f88b 	bl	80022da <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISD_E4typeE>
 80021c4:	4603      	mov	r3, r0
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f809 	bl	80021e4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80021d2:	4603      	mov	r3, r0
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <_ZNKSt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>:
      _M_valptr() const
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3310      	adds	r3, #16
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f872 	bl	80022f0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>
 800220c:	4603      	mov	r3, r0
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE14_M_create_nodeIJRKS8_EEEPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff77 	bl	8002114 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE11_M_get_nodeEv>
 8002226:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8002228:	6838      	ldr	r0, [r7, #0]
 800222a:	f7ff fcc5 	bl	8001bb8 <_ZSt7forwardIRKSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	68f9      	ldr	r1, [r7, #12]
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f867 	bl	8002308 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE17_M_construct_nodeIJRKS8_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_>
	  return __tmp;
 800223a:	68fb      	ldr	r3, [r7, #12]
	}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7destroyIS9_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800224e:	6838      	ldr	r0, [r7, #0]
 8002250:	f7fe f971 	bl	8000536 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateEPSA_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	222c      	movs	r2, #44	@ 0x2c
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	4619      	mov	r1, r3
 8002272:	68b8      	ldr	r0, [r7, #8]
 8002274:	f001 fa02 	bl	800367c <_ZdlPvj>
      }
 8002278:	bf00      	nop
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE8allocateERSB_j>:
      allocate(allocator_type& __a, size_type __n)
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800228a:	2200      	movs	r2, #0
 800228c:	6839      	ldr	r1, [r7, #0]
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f85a 	bl	8002348 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv>
 8002294:	4603      	mov	r3, r0
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESH_IJEEEEEvRSB_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800229e:	b5b0      	push	{r4, r5, r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af02      	add	r7, sp, #8
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff fa95 	bl	80017dc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80022b2:	4604      	mov	r4, r0
 80022b4:	6838      	ldr	r0, [r7, #0]
 80022b6:	f7ff fa9c 	bl	80017f2 <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80022ba:	4605      	mov	r5, r0
 80022bc:	6a38      	ldr	r0, [r7, #32]
 80022be:	f7ff faa3 	bl	8001808 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80022c2:	4603      	mov	r3, r0
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	462b      	mov	r3, r5
 80022c8:	4622      	mov	r2, r4
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f879 	bl	80023c4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEvPT_DpOT0_>
	}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bdb0      	pop	{r4, r5, r7, pc}

080022da <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f88b 	bl	8002414 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>
 80022fe:	4603      	mov	r3, r0
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE17_M_construct_nodeIJRKS8_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8002308:	b5b0      	push	{r4, r5, r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4619      	mov	r1, r3
 8002318:	202c      	movs	r0, #44	@ 0x2c
 800231a:	f7fe f8db 	bl	80004d4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f7ff fec6 	bl	80020b0 <_ZNSt8_Rb_treeIcSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stIS8_ESt4lessIcESaIS8_EE21_M_get_Node_allocatorEv>
 8002324:	4604      	mov	r4, r0
 8002326:	68b8      	ldr	r0, [r7, #8]
 8002328:	f7ff fa3b 	bl	80017a2 <_ZNSt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9_M_valptrEv>
 800232c:	4605      	mov	r5, r0
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fc42 	bl	8001bb8 <_ZSt7forwardIRKSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISB_E4typeE>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	4629      	mov	r1, r5
 800233a:	4620      	mov	r0, r4
 800233c:	f000 f875 	bl	800242a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE9constructIS9_JRKS9_EEEvRSB_PT_DpOT0_>
	}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bdb0      	pop	{r4, r5, r7, pc}

08002348 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f87b 	bl	8002450 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv>
 800235a:	4602      	mov	r2, r0
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4293      	cmp	r3, r2
 8002360:	bf8c      	ite	hi
 8002362:	2301      	movhi	r3, #1
 8002364:	2300      	movls	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4a09      	ldr	r2, [pc, #36]	@ (80023a0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv+0x58>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800237e:	f001 fa52 	bl	8003826 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002382:	f001 fa4d 	bl	8003820 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	222c      	movs	r2, #44	@ 0x2c
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	4618      	mov	r0, r3
 8002390:	f001 f976 	bl	8003680 <_Znwj>
 8002394:	4603      	mov	r3, r0
      }
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	05d1745d 	.word	0x05d1745d

080023a4 <_ZNSt5tupleIJRKcEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 f859 	bl	800246c <_ZNSt11_Tuple_implILj0EJRKcEEC1EOS2_>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80023c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4619      	mov	r1, r3
 80023d6:	201c      	movs	r0, #28
 80023d8:	f7fe f87c 	bl	80004d4 <_ZnwjPv>
 80023dc:	4604      	mov	r4, r0
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff f9fc 	bl	80017dc <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80023e4:	6838      	ldr	r0, [r7, #0]
 80023e6:	f7ff fa04 	bl	80017f2 <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80023ea:	4602      	mov	r2, r0
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ffd6 	bl	80023a4 <_ZNSt5tupleIJRKcEEC1EOS2_>
 80023f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023fa:	f7ff fa05 	bl	8001808 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80023fe:	f107 0214 	add.w	r2, r7, #20
 8002402:	4633      	mov	r3, r6
 8002404:	4629      	mov	r1, r5
 8002406:	4620      	mov	r0, r4
 8002408:	f000 f840 	bl	800248c <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>
 800240c:	bf00      	nop
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002414 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv>:
      _M_addr() const noexcept
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE9constructIS9_JRKS9_EEEvRSB_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fbbe 	bl	8001bb8 <_ZSt7forwardIRKSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISB_E4typeE>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f84c 	bl	80024e0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructIS9_JRKS9_EEEvPT_DpOT0_>
	}
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002458:	4b03      	ldr	r3, [pc, #12]	@ (8002468 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	02e8ba2e 	.word	0x02e8ba2e

0800246c <_ZNSt11_Tuple_implILj0EJRKcEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	601a      	str	r2, [r3, #0]
      { }
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 800248c:	b5b0      	push	{r4, r5, r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	7239      	strb	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800249a:	463a      	mov	r2, r7
 800249c:	f88d 4000 	strb.w	r4, [sp]
 80024a0:	462b      	mov	r3, r5
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f833 	bl	8002510 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>
      { }
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bdb0      	pop	{r4, r5, r7, pc}

080024b4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS7_>:
      constexpr pair(const pair&) = default;	///< Copy constructor
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	1d1a      	adds	r2, r3, #4
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	3304      	adds	r3, #4
 80024ce:	4619      	mov	r1, r3
 80024d0:	4610      	mov	r0, r2
 80024d2:	f001 fad6 	bl	8003a82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructIS9_JRKS9_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4619      	mov	r1, r3
 80024f0:	201c      	movs	r0, #28
 80024f2:	f7fd ffef 	bl	80004d4 <_ZnwjPv>
 80024f6:	4604      	mov	r4, r0
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff fb5d 	bl	8001bb8 <_ZSt7forwardIRKSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISB_E4typeE>
 80024fe:	4603      	mov	r3, r0
 8002500:	4619      	mov	r1, r3
 8002502:	4620      	mov	r0, r4
 8002504:	f7ff ffd6 	bl	80024b4 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS7_>
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	bd90      	pop	{r4, r7, pc}

08002510 <_ZNSt4pairIKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800251e:	68b8      	ldr	r0, [r7, #8]
 8002520:	f000 f812 	bl	8002548 <_ZSt3getILj0EJRKcEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8002524:	4603      	mov	r3, r0
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f81b 	bl	8002562 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 800252c:	4603      	mov	r3, r0
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3304      	adds	r3, #4
 8002538:	4618      	mov	r0, r3
 800253a:	f001 f9d6 	bl	80038ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
      { }
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <_ZSt3getILj0EJRKcEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f810 	bl	8002578 <_ZSt12__get_helperILj0ERKcJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8002558:	4603      	mov	r3, r0
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_ZSt12__get_helperILj0ERKcJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f805 	bl	8002590 <_ZNSt11_Tuple_implILj0EJRKcEE7_M_headERS2_>
 8002586:	4603      	mov	r3, r0
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_ZNSt11_Tuple_implILj0EJRKcEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f805 	bl	80025aa <_ZNSt10_Head_baseILj0ERKcLb0EE7_M_headERS2_>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_ZNSt10_Head_baseILj0ERKcLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <HAL_MspInit+0x4c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002610 <HAL_MspInit+0x4c>)
 80025d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025da:	4b0d      	ldr	r3, [pc, #52]	@ (8002610 <HAL_MspInit+0x4c>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <HAL_MspInit+0x4c>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	4a08      	ldr	r2, [pc, #32]	@ (8002610 <HAL_MspInit+0x4c>)
 80025f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f6:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <HAL_MspInit+0x4c>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800

08002614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <NMI_Handler+0x4>

0800261c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <HardFault_Handler+0x4>

08002624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <MemManage_Handler+0x4>

0800262c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <BusFault_Handler+0x4>

08002634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002638:	bf00      	nop
 800263a:	e7fd      	b.n	8002638 <UsageFault_Handler+0x4>

0800263c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800266a:	f000 f8e9 	bl	8002840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}

08002672 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  return 1;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <_kill>:

int _kill(int pid, int sig)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800268c:	f001 fb6e 	bl	8003d6c <__errno>
 8002690:	4603      	mov	r3, r0
 8002692:	2216      	movs	r2, #22
 8002694:	601a      	str	r2, [r3, #0]
  return -1;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_exit>:

void _exit (int status)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026aa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ffe7 	bl	8002682 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <_exit+0x12>

080026b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c0:	4a14      	ldr	r2, [pc, #80]	@ (8002714 <_sbrk+0x5c>)
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <_sbrk+0x60>)
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026cc:	4b13      	ldr	r3, [pc, #76]	@ (800271c <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026d4:	4b11      	ldr	r3, [pc, #68]	@ (800271c <_sbrk+0x64>)
 80026d6:	4a12      	ldr	r2, [pc, #72]	@ (8002720 <_sbrk+0x68>)
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026da:	4b10      	ldr	r3, [pc, #64]	@ (800271c <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d207      	bcs.n	80026f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e8:	f001 fb40 	bl	8003d6c <__errno>
 80026ec:	4603      	mov	r3, r0
 80026ee:	220c      	movs	r2, #12
 80026f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026f6:	e009      	b.n	800270c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f8:	4b08      	ldr	r3, [pc, #32]	@ (800271c <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026fe:	4b07      	ldr	r3, [pc, #28]	@ (800271c <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	4a05      	ldr	r2, [pc, #20]	@ (800271c <_sbrk+0x64>)
 8002708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20018000 	.word	0x20018000
 8002718:	00000400 	.word	0x00000400
 800271c:	20000078 	.word	0x20000078
 8002720:	200001d0 	.word	0x200001d0

08002724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002728:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <SystemInit+0x20>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272e:	4a05      	ldr	r2, [pc, #20]	@ (8002744 <SystemInit+0x20>)
 8002730:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002734:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002748:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002780 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800274c:	f7ff ffea 	bl	8002724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002750:	480c      	ldr	r0, [pc, #48]	@ (8002784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002752:	490d      	ldr	r1, [pc, #52]	@ (8002788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002754:	4a0d      	ldr	r2, [pc, #52]	@ (800278c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002758:	e002      	b.n	8002760 <LoopCopyDataInit>

0800275a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800275a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800275c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800275e:	3304      	adds	r3, #4

08002760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002764:	d3f9      	bcc.n	800275a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002766:	4a0a      	ldr	r2, [pc, #40]	@ (8002790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002768:	4c0a      	ldr	r4, [pc, #40]	@ (8002794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800276c:	e001      	b.n	8002772 <LoopFillZerobss>

0800276e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800276e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002770:	3204      	adds	r2, #4

08002772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002774:	d3fb      	bcc.n	800276e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002776:	f001 faff 	bl	8003d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800277a:	f7fe fb33 	bl	8000de4 <main>
  bx  lr    
 800277e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002780:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002788:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800278c:	08004108 	.word	0x08004108
  ldr r2, =_sbss
 8002790:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002794:	200001cc 	.word	0x200001cc

08002798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002798:	e7fe      	b.n	8002798 <ADC_IRQHandler>
	...

0800279c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027a0:	4b0e      	ldr	r3, [pc, #56]	@ (80027dc <HAL_Init+0x40>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0d      	ldr	r2, [pc, #52]	@ (80027dc <HAL_Init+0x40>)
 80027a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027ac:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <HAL_Init+0x40>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0a      	ldr	r2, [pc, #40]	@ (80027dc <HAL_Init+0x40>)
 80027b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b8:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <HAL_Init+0x40>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a07      	ldr	r2, [pc, #28]	@ (80027dc <HAL_Init+0x40>)
 80027be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c4:	2003      	movs	r0, #3
 80027c6:	f000 f931 	bl	8002a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ca:	200f      	movs	r0, #15
 80027cc:	f000 f808 	bl	80027e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027d0:	f7ff fef8 	bl	80025c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023c00 	.word	0x40023c00

080027e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027e8:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <HAL_InitTick+0x54>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b12      	ldr	r3, [pc, #72]	@ (8002838 <HAL_InitTick+0x58>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4619      	mov	r1, r3
 80027f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f93b 	bl	8002a7a <HAL_SYSTICK_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e00e      	b.n	800282c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b0f      	cmp	r3, #15
 8002812:	d80a      	bhi.n	800282a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002814:	2200      	movs	r2, #0
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800281c:	f000 f911 	bl	8002a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002820:	4a06      	ldr	r2, [pc, #24]	@ (800283c <HAL_InitTick+0x5c>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e000      	b.n	800282c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000000 	.word	0x20000000
 8002838:	20000008 	.word	0x20000008
 800283c:	20000004 	.word	0x20000004

08002840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002844:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <HAL_IncTick+0x20>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <HAL_IncTick+0x24>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4413      	add	r3, r2
 8002850:	4a04      	ldr	r2, [pc, #16]	@ (8002864 <HAL_IncTick+0x24>)
 8002852:	6013      	str	r3, [r2, #0]
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20000008 	.word	0x20000008
 8002864:	2000007c 	.word	0x2000007c

08002868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return uwTick;
 800286c:	4b03      	ldr	r3, [pc, #12]	@ (800287c <HAL_GetTick+0x14>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	2000007c 	.word	0x2000007c

08002880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7ff ffee 	bl	8002868 <HAL_GetTick>
 800288c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002898:	d005      	beq.n	80028a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <HAL_Delay+0x44>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028a6:	bf00      	nop
 80028a8:	f7ff ffde 	bl	8002868 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d8f7      	bhi.n	80028a8 <HAL_Delay+0x28>
  {
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000008 	.word	0x20000008

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	@ (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	2b00      	cmp	r3, #0
 800293e:	db0a      	blt.n	8002956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	490c      	ldr	r1, [pc, #48]	@ (8002978 <__NVIC_SetPriority+0x4c>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	440b      	add	r3, r1
 8002950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002954:	e00a      	b.n	800296c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4908      	ldr	r1, [pc, #32]	@ (800297c <__NVIC_SetPriority+0x50>)
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	3b04      	subs	r3, #4
 8002964:	0112      	lsls	r2, r2, #4
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	440b      	add	r3, r1
 800296a:	761a      	strb	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000e100 	.word	0xe000e100
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	@ 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f1c3 0307 	rsb	r3, r3, #7
 800299a:	2b04      	cmp	r3, #4
 800299c:	bf28      	it	cs
 800299e:	2304      	movcs	r3, #4
 80029a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d902      	bls.n	80029b0 <NVIC_EncodePriority+0x30>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3b03      	subs	r3, #3
 80029ae:	e000      	b.n	80029b2 <NVIC_EncodePriority+0x32>
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	401a      	ands	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	4313      	orrs	r3, r2
         );
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	@ 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029f8:	d301      	bcc.n	80029fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fa:	2301      	movs	r3, #1
 80029fc:	e00f      	b.n	8002a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <SysTick_Config+0x40>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a06:	210f      	movs	r1, #15
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a0c:	f7ff ff8e 	bl	800292c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a10:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <SysTick_Config+0x40>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a16:	4b04      	ldr	r3, [pc, #16]	@ (8002a28 <SysTick_Config+0x40>)
 8002a18:	2207      	movs	r2, #7
 8002a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	e000e010 	.word	0xe000e010

08002a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ff47 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a54:	f7ff ff5c 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	6978      	ldr	r0, [r7, #20]
 8002a60:	f7ff ff8e 	bl	8002980 <NVIC_EncodePriority>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff5d 	bl	800292c <__NVIC_SetPriority>
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffb0 	bl	80029e8 <SysTick_Config>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	@ 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	e159      	b.n	8002d64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	f040 8148 	bne.w	8002d5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d005      	beq.n	8002ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d130      	bne.n	8002b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	2203      	movs	r2, #3
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 0201 	and.w	r2, r3, #1
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d017      	beq.n	8002b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d123      	bne.n	8002bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	08da      	lsrs	r2, r3, #3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3208      	adds	r2, #8
 8002b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	220f      	movs	r2, #15
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	08da      	lsrs	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3208      	adds	r2, #8
 8002bd2:	69b9      	ldr	r1, [r7, #24]
 8002bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	2203      	movs	r2, #3
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0203 	and.w	r2, r3, #3
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80a2 	beq.w	8002d5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	4b57      	ldr	r3, [pc, #348]	@ (8002d7c <HAL_GPIO_Init+0x2e8>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	4a56      	ldr	r2, [pc, #344]	@ (8002d7c <HAL_GPIO_Init+0x2e8>)
 8002c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c2a:	4b54      	ldr	r3, [pc, #336]	@ (8002d7c <HAL_GPIO_Init+0x2e8>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c36:	4a52      	ldr	r2, [pc, #328]	@ (8002d80 <HAL_GPIO_Init+0x2ec>)
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	220f      	movs	r2, #15
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a49      	ldr	r2, [pc, #292]	@ (8002d84 <HAL_GPIO_Init+0x2f0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d019      	beq.n	8002c96 <HAL_GPIO_Init+0x202>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a48      	ldr	r2, [pc, #288]	@ (8002d88 <HAL_GPIO_Init+0x2f4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_GPIO_Init+0x1fe>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a47      	ldr	r2, [pc, #284]	@ (8002d8c <HAL_GPIO_Init+0x2f8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00d      	beq.n	8002c8e <HAL_GPIO_Init+0x1fa>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a46      	ldr	r2, [pc, #280]	@ (8002d90 <HAL_GPIO_Init+0x2fc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d007      	beq.n	8002c8a <HAL_GPIO_Init+0x1f6>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a45      	ldr	r2, [pc, #276]	@ (8002d94 <HAL_GPIO_Init+0x300>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <HAL_GPIO_Init+0x1f2>
 8002c82:	2304      	movs	r3, #4
 8002c84:	e008      	b.n	8002c98 <HAL_GPIO_Init+0x204>
 8002c86:	2307      	movs	r3, #7
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_Init+0x204>
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e004      	b.n	8002c98 <HAL_GPIO_Init+0x204>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e002      	b.n	8002c98 <HAL_GPIO_Init+0x204>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_GPIO_Init+0x204>
 8002c96:	2300      	movs	r3, #0
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	f002 0203 	and.w	r2, r2, #3
 8002c9e:	0092      	lsls	r2, r2, #2
 8002ca0:	4093      	lsls	r3, r2
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca8:	4935      	ldr	r1, [pc, #212]	@ (8002d80 <HAL_GPIO_Init+0x2ec>)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	3302      	adds	r3, #2
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb6:	4b38      	ldr	r3, [pc, #224]	@ (8002d98 <HAL_GPIO_Init+0x304>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cda:	4a2f      	ldr	r2, [pc, #188]	@ (8002d98 <HAL_GPIO_Init+0x304>)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d98 <HAL_GPIO_Init+0x304>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d04:	4a24      	ldr	r2, [pc, #144]	@ (8002d98 <HAL_GPIO_Init+0x304>)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d0a:	4b23      	ldr	r3, [pc, #140]	@ (8002d98 <HAL_GPIO_Init+0x304>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8002d98 <HAL_GPIO_Init+0x304>)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d34:	4b18      	ldr	r3, [pc, #96]	@ (8002d98 <HAL_GPIO_Init+0x304>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d58:	4a0f      	ldr	r2, [pc, #60]	@ (8002d98 <HAL_GPIO_Init+0x304>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	3301      	adds	r3, #1
 8002d62:	61fb      	str	r3, [r7, #28]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b0f      	cmp	r3, #15
 8002d68:	f67f aea2 	bls.w	8002ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	3724      	adds	r7, #36	@ 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40013800 	.word	0x40013800
 8002d84:	40020000 	.word	0x40020000
 8002d88:	40020400 	.word	0x40020400
 8002d8c:	40020800 	.word	0x40020800
 8002d90:	40020c00 	.word	0x40020c00
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40013c00 	.word	0x40013c00

08002d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	887b      	ldrh	r3, [r7, #2]
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e001      	b.n	8002dbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	807b      	strh	r3, [r7, #2]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ddc:	787b      	ldrb	r3, [r7, #1]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002de2:	887a      	ldrh	r2, [r7, #2]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002de8:	e003      	b.n	8002df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dea:	887b      	ldrh	r3, [r7, #2]
 8002dec:	041a      	lsls	r2, r3, #16
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	619a      	str	r2, [r3, #24]
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b085      	sub	sp, #20
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e10:	887a      	ldrh	r2, [r7, #2]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4013      	ands	r3, r2
 8002e16:	041a      	lsls	r2, r3, #16
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	43d9      	mvns	r1, r3
 8002e1c:	887b      	ldrh	r3, [r7, #2]
 8002e1e:	400b      	ands	r3, r1
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	619a      	str	r2, [r3, #24]
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e267      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d075      	beq.n	8002f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e52:	4b88      	ldr	r3, [pc, #544]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d00c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5e:	4b85      	ldr	r3, [pc, #532]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d112      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6a:	4b82      	ldr	r3, [pc, #520]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e76:	d10b      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	4b7e      	ldr	r3, [pc, #504]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d05b      	beq.n	8002f3c <HAL_RCC_OscConfig+0x108>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d157      	bne.n	8002f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e242      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e98:	d106      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x74>
 8002e9a:	4b76      	ldr	r3, [pc, #472]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a75      	ldr	r2, [pc, #468]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e01d      	b.n	8002ee4 <HAL_RCC_OscConfig+0xb0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x98>
 8002eb2:	4b70      	ldr	r3, [pc, #448]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6f      	ldr	r2, [pc, #444]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6c      	ldr	r2, [pc, #432]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0xb0>
 8002ecc:	4b69      	ldr	r3, [pc, #420]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a68      	ldr	r2, [pc, #416]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b66      	ldr	r3, [pc, #408]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a65      	ldr	r2, [pc, #404]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7ff fcbc 	bl	8002868 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7ff fcb8 	bl	8002868 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	@ 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e207      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b5b      	ldr	r3, [pc, #364]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xc0>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7ff fca8 	bl	8002868 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7ff fca4 	bl	8002868 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	@ 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e1f3      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	4b51      	ldr	r3, [pc, #324]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0xe8>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d063      	beq.n	8003012 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f56:	4b47      	ldr	r3, [pc, #284]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d11c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f62:	4b44      	ldr	r3, [pc, #272]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d116      	bne.n	8002f9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	4b41      	ldr	r3, [pc, #260]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x152>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e1c7      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f86:	4b3b      	ldr	r3, [pc, #236]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4937      	ldr	r1, [pc, #220]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	e03a      	b.n	8003012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa4:	4b34      	ldr	r3, [pc, #208]	@ (8003078 <HAL_RCC_OscConfig+0x244>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7ff fc5d 	bl	8002868 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb2:	f7ff fc59 	bl	8002868 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1a8      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd0:	4b28      	ldr	r3, [pc, #160]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4925      	ldr	r1, [pc, #148]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
 8002fe4:	e015      	b.n	8003012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe6:	4b24      	ldr	r3, [pc, #144]	@ (8003078 <HAL_RCC_OscConfig+0x244>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7ff fc3c 	bl	8002868 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7ff fc38 	bl	8002868 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e187      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d036      	beq.n	800308c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003026:	4b15      	ldr	r3, [pc, #84]	@ (800307c <HAL_RCC_OscConfig+0x248>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7ff fc1c 	bl	8002868 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003034:	f7ff fc18 	bl	8002868 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e167      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8003048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x200>
 8003052:	e01b      	b.n	800308c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003054:	4b09      	ldr	r3, [pc, #36]	@ (800307c <HAL_RCC_OscConfig+0x248>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305a:	f7ff fc05 	bl	8002868 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	e00e      	b.n	8003080 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003062:	f7ff fc01 	bl	8002868 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d907      	bls.n	8003080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e150      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
 8003074:	40023800 	.word	0x40023800
 8003078:	42470000 	.word	0x42470000
 800307c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	4b88      	ldr	r3, [pc, #544]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ea      	bne.n	8003062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8097 	beq.w	80031c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b81      	ldr	r3, [pc, #516]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	4b7d      	ldr	r3, [pc, #500]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	4a7c      	ldr	r2, [pc, #496]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ba:	4b7a      	ldr	r3, [pc, #488]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b77      	ldr	r3, [pc, #476]	@ (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d118      	bne.n	8003108 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d6:	4b74      	ldr	r3, [pc, #464]	@ (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a73      	ldr	r2, [pc, #460]	@ (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e2:	f7ff fbc1 	bl	8002868 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ea:	f7ff fbbd 	bl	8002868 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e10c      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	4b6a      	ldr	r3, [pc, #424]	@ (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x2ea>
 8003110:	4b64      	ldr	r3, [pc, #400]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003114:	4a63      	ldr	r2, [pc, #396]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6713      	str	r3, [r2, #112]	@ 0x70
 800311c:	e01c      	b.n	8003158 <HAL_RCC_OscConfig+0x324>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b05      	cmp	r3, #5
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x30c>
 8003126:	4b5f      	ldr	r3, [pc, #380]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312a:	4a5e      	ldr	r2, [pc, #376]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 800312c:	f043 0304 	orr.w	r3, r3, #4
 8003130:	6713      	str	r3, [r2, #112]	@ 0x70
 8003132:	4b5c      	ldr	r3, [pc, #368]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003136:	4a5b      	ldr	r2, [pc, #364]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6713      	str	r3, [r2, #112]	@ 0x70
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0x324>
 8003140:	4b58      	ldr	r3, [pc, #352]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003144:	4a57      	ldr	r2, [pc, #348]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	@ 0x70
 800314c:	4b55      	ldr	r3, [pc, #340]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003150:	4a54      	ldr	r2, [pc, #336]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003152:	f023 0304 	bic.w	r3, r3, #4
 8003156:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d015      	beq.n	800318c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7ff fb82 	bl	8002868 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	e00a      	b.n	800317e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003168:	f7ff fb7e 	bl	8002868 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e0cb      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317e:	4b49      	ldr	r3, [pc, #292]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0ee      	beq.n	8003168 <HAL_RCC_OscConfig+0x334>
 800318a:	e014      	b.n	80031b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318c:	f7ff fb6c 	bl	8002868 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003192:	e00a      	b.n	80031aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7ff fb68 	bl	8002868 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0b5      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031aa:	4b3e      	ldr	r3, [pc, #248]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1ee      	bne.n	8003194 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d105      	bne.n	80031c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031bc:	4b39      	ldr	r3, [pc, #228]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	4a38      	ldr	r2, [pc, #224]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a1 	beq.w	8003314 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031d2:	4b34      	ldr	r3, [pc, #208]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d05c      	beq.n	8003298 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d141      	bne.n	800326a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e6:	4b31      	ldr	r3, [pc, #196]	@ (80032ac <HAL_RCC_OscConfig+0x478>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7ff fb3c 	bl	8002868 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7ff fb38 	bl	8002868 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e087      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	4b27      	ldr	r3, [pc, #156]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	3b01      	subs	r3, #1
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	061b      	lsls	r3, r3, #24
 8003236:	491b      	ldr	r1, [pc, #108]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800323c:	4b1b      	ldr	r3, [pc, #108]	@ (80032ac <HAL_RCC_OscConfig+0x478>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003242:	f7ff fb11 	bl	8002868 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324a:	f7ff fb0d 	bl	8002868 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e05c      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325c:	4b11      	ldr	r3, [pc, #68]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x416>
 8003268:	e054      	b.n	8003314 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <HAL_RCC_OscConfig+0x478>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7ff fafa 	bl	8002868 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003278:	f7ff faf6 	bl	8002868 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e045      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x444>
 8003296:	e03d      	b.n	8003314 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e038      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40007000 	.word	0x40007000
 80032ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <HAL_RCC_OscConfig+0x4ec>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d028      	beq.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d121      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d11a      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032e0:	4013      	ands	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d111      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	3b01      	subs	r3, #1
 80032fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d107      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800

08003324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0cc      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003338:	4b68      	ldr	r3, [pc, #416]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d90c      	bls.n	8003360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b65      	ldr	r3, [pc, #404]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b63      	ldr	r3, [pc, #396]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0b8      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003378:	4b59      	ldr	r3, [pc, #356]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a58      	ldr	r2, [pc, #352]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003382:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003390:	4b53      	ldr	r3, [pc, #332]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a52      	ldr	r2, [pc, #328]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800339a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339c:	4b50      	ldr	r3, [pc, #320]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	494d      	ldr	r1, [pc, #308]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d044      	beq.n	8003444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b47      	ldr	r3, [pc, #284]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d119      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e07f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e2:	4b3f      	ldr	r3, [pc, #252]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e06f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f2:	4b3b      	ldr	r3, [pc, #236]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e067      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003402:	4b37      	ldr	r3, [pc, #220]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f023 0203 	bic.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4934      	ldr	r1, [pc, #208]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003414:	f7ff fa28 	bl	8002868 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	e00a      	b.n	8003432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800341c:	f7ff fa24 	bl	8002868 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e04f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	4b2b      	ldr	r3, [pc, #172]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 020c 	and.w	r2, r3, #12
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	429a      	cmp	r2, r3
 8003442:	d1eb      	bne.n	800341c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003444:	4b25      	ldr	r3, [pc, #148]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d20c      	bcs.n	800346c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b22      	ldr	r3, [pc, #136]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b20      	ldr	r3, [pc, #128]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e032      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003478:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4916      	ldr	r1, [pc, #88]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003496:	4b12      	ldr	r3, [pc, #72]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	490e      	ldr	r1, [pc, #56]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034aa:	f000 f821 	bl	80034f0 <HAL_RCC_GetSysClockFreq>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	490a      	ldr	r1, [pc, #40]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	5ccb      	ldrb	r3, [r1, r3]
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	4a09      	ldr	r2, [pc, #36]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034c6:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff f988 	bl	80027e0 <HAL_InitTick>

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023c00 	.word	0x40023c00
 80034e0:	40023800 	.word	0x40023800
 80034e4:	08003f88 	.word	0x08003f88
 80034e8:	20000000 	.word	0x20000000
 80034ec:	20000004 	.word	0x20000004

080034f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f4:	b090      	sub	sp, #64	@ 0x40
 80034f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003508:	4b59      	ldr	r3, [pc, #356]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x180>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b08      	cmp	r3, #8
 8003512:	d00d      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x40>
 8003514:	2b08      	cmp	r3, #8
 8003516:	f200 80a1 	bhi.w	800365c <HAL_RCC_GetSysClockFreq+0x16c>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x34>
 800351e:	2b04      	cmp	r3, #4
 8003520:	d003      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x3a>
 8003522:	e09b      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003524:	4b53      	ldr	r3, [pc, #332]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x184>)
 8003526:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003528:	e09b      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800352a:	4b53      	ldr	r3, [pc, #332]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x188>)
 800352c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800352e:	e098      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003530:	4b4f      	ldr	r3, [pc, #316]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x180>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003538:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800353a:	4b4d      	ldr	r3, [pc, #308]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x180>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d028      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003546:	4b4a      	ldr	r3, [pc, #296]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x180>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	2200      	movs	r2, #0
 800354e:	623b      	str	r3, [r7, #32]
 8003550:	627a      	str	r2, [r7, #36]	@ 0x24
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003558:	2100      	movs	r1, #0
 800355a:	4b47      	ldr	r3, [pc, #284]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x188>)
 800355c:	fb03 f201 	mul.w	r2, r3, r1
 8003560:	2300      	movs	r3, #0
 8003562:	fb00 f303 	mul.w	r3, r0, r3
 8003566:	4413      	add	r3, r2
 8003568:	4a43      	ldr	r2, [pc, #268]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x188>)
 800356a:	fba0 1202 	umull	r1, r2, r0, r2
 800356e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003570:	460a      	mov	r2, r1
 8003572:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003576:	4413      	add	r3, r2
 8003578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800357a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357c:	2200      	movs	r2, #0
 800357e:	61bb      	str	r3, [r7, #24]
 8003580:	61fa      	str	r2, [r7, #28]
 8003582:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003586:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800358a:	f7fc fe2b 	bl	80001e4 <__aeabi_uldivmod>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4613      	mov	r3, r2
 8003594:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003596:	e053      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003598:	4b35      	ldr	r3, [pc, #212]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x180>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	2200      	movs	r2, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	617a      	str	r2, [r7, #20]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035aa:	f04f 0b00 	mov.w	fp, #0
 80035ae:	4652      	mov	r2, sl
 80035b0:	465b      	mov	r3, fp
 80035b2:	f04f 0000 	mov.w	r0, #0
 80035b6:	f04f 0100 	mov.w	r1, #0
 80035ba:	0159      	lsls	r1, r3, #5
 80035bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c0:	0150      	lsls	r0, r2, #5
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	ebb2 080a 	subs.w	r8, r2, sl
 80035ca:	eb63 090b 	sbc.w	r9, r3, fp
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035e2:	ebb2 0408 	subs.w	r4, r2, r8
 80035e6:	eb63 0509 	sbc.w	r5, r3, r9
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	00eb      	lsls	r3, r5, #3
 80035f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035f8:	00e2      	lsls	r2, r4, #3
 80035fa:	4614      	mov	r4, r2
 80035fc:	461d      	mov	r5, r3
 80035fe:	eb14 030a 	adds.w	r3, r4, sl
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	eb45 030b 	adc.w	r3, r5, fp
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003616:	4629      	mov	r1, r5
 8003618:	028b      	lsls	r3, r1, #10
 800361a:	4621      	mov	r1, r4
 800361c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003620:	4621      	mov	r1, r4
 8003622:	028a      	lsls	r2, r1, #10
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800362a:	2200      	movs	r2, #0
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	60fa      	str	r2, [r7, #12]
 8003630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003634:	f7fc fdd6 	bl	80001e4 <__aeabi_uldivmod>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4613      	mov	r3, r2
 800363e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003640:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x180>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	3301      	adds	r3, #1
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003650:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800365a:	e002      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800365c:	4b05      	ldr	r3, [pc, #20]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x184>)
 800365e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003664:	4618      	mov	r0, r3
 8003666:	3740      	adds	r7, #64	@ 0x40
 8003668:	46bd      	mov	sp, r7
 800366a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
 8003674:	00f42400 	.word	0x00f42400
 8003678:	017d7840 	.word	0x017d7840

0800367c <_ZdlPvj>:
 800367c:	f000 ba42 	b.w	8003b04 <_ZdlPv>

08003680 <_Znwj>:
 8003680:	2801      	cmp	r0, #1
 8003682:	bf38      	it	cc
 8003684:	2001      	movcc	r0, #1
 8003686:	b510      	push	{r4, lr}
 8003688:	4604      	mov	r4, r0
 800368a:	4620      	mov	r0, r4
 800368c:	f000 fa4c 	bl	8003b28 <malloc>
 8003690:	b100      	cbz	r0, 8003694 <_Znwj+0x14>
 8003692:	bd10      	pop	{r4, pc}
 8003694:	f000 fa38 	bl	8003b08 <_ZSt15get_new_handlerv>
 8003698:	b908      	cbnz	r0, 800369e <_Znwj+0x1e>
 800369a:	f000 fa3d 	bl	8003b18 <abort>
 800369e:	4780      	blx	r0
 80036a0:	e7f3      	b.n	800368a <_Znwj+0xa>

080036a2 <_ZNSaIcEC1Ev>:
 80036a2:	4770      	bx	lr

080036a4 <_ZNSaIcED1Ev>:
 80036a4:	4770      	bx	lr

080036a6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80036a6:	68c3      	ldr	r3, [r0, #12]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	60c2      	str	r2, [r0, #12]
 80036ac:	b510      	push	{r4, lr}
 80036ae:	b102      	cbz	r2, 80036b2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 80036b0:	6050      	str	r0, [r2, #4]
 80036b2:	6842      	ldr	r2, [r0, #4]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	680c      	ldr	r4, [r1, #0]
 80036b8:	4284      	cmp	r4, r0
 80036ba:	d103      	bne.n	80036c4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 80036bc:	600b      	str	r3, [r1, #0]
 80036be:	6098      	str	r0, [r3, #8]
 80036c0:	6043      	str	r3, [r0, #4]
 80036c2:	bd10      	pop	{r4, pc}
 80036c4:	6891      	ldr	r1, [r2, #8]
 80036c6:	4281      	cmp	r1, r0
 80036c8:	bf0c      	ite	eq
 80036ca:	6093      	streq	r3, [r2, #8]
 80036cc:	60d3      	strne	r3, [r2, #12]
 80036ce:	e7f6      	b.n	80036be <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080036d0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80036d0:	6883      	ldr	r3, [r0, #8]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	6082      	str	r2, [r0, #8]
 80036d6:	b510      	push	{r4, lr}
 80036d8:	b102      	cbz	r2, 80036dc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80036da:	6050      	str	r0, [r2, #4]
 80036dc:	6842      	ldr	r2, [r0, #4]
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	680c      	ldr	r4, [r1, #0]
 80036e2:	4284      	cmp	r4, r0
 80036e4:	d103      	bne.n	80036ee <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 80036e6:	600b      	str	r3, [r1, #0]
 80036e8:	60d8      	str	r0, [r3, #12]
 80036ea:	6043      	str	r3, [r0, #4]
 80036ec:	bd10      	pop	{r4, pc}
 80036ee:	68d1      	ldr	r1, [r2, #12]
 80036f0:	4281      	cmp	r1, r0
 80036f2:	bf0c      	ite	eq
 80036f4:	60d3      	streq	r3, [r2, #12]
 80036f6:	6093      	strne	r3, [r2, #8]
 80036f8:	e7f6      	b.n	80036e8 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

080036fa <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80036fa:	68c3      	ldr	r3, [r0, #12]
 80036fc:	b123      	cbz	r3, 8003708 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 80036fe:	4618      	mov	r0, r3
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1fb      	bne.n	80036fe <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8003706:	4770      	bx	lr
 8003708:	6843      	ldr	r3, [r0, #4]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	4282      	cmp	r2, r0
 800370e:	d004      	beq.n	800371a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8003710:	68c2      	ldr	r2, [r0, #12]
 8003712:	4293      	cmp	r3, r2
 8003714:	bf18      	it	ne
 8003716:	4618      	movne	r0, r3
 8003718:	4770      	bx	lr
 800371a:	4618      	mov	r0, r3
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	e7f4      	b.n	800370a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08003720 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8003720:	7802      	ldrb	r2, [r0, #0]
 8003722:	4603      	mov	r3, r0
 8003724:	b92a      	cbnz	r2, 8003732 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8003726:	6842      	ldr	r2, [r0, #4]
 8003728:	6852      	ldr	r2, [r2, #4]
 800372a:	4282      	cmp	r2, r0
 800372c:	d101      	bne.n	8003732 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 800372e:	68d0      	ldr	r0, [r2, #12]
 8003730:	4770      	bx	lr
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	b122      	cbz	r2, 8003740 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8003736:	4610      	mov	r0, r2
 8003738:	68d2      	ldr	r2, [r2, #12]
 800373a:	2a00      	cmp	r2, #0
 800373c:	d1fb      	bne.n	8003736 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 800373e:	4770      	bx	lr
 8003740:	6858      	ldr	r0, [r3, #4]
 8003742:	6882      	ldr	r2, [r0, #8]
 8003744:	429a      	cmp	r2, r3
 8003746:	d000      	beq.n	800374a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8003748:	4770      	bx	lr
 800374a:	4603      	mov	r3, r0
 800374c:	6840      	ldr	r0, [r0, #4]
 800374e:	e7f8      	b.n	8003742 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08003750 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8003750:	f7ff bfd3 	b.w	80036fa <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08003754 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8003754:	f7ff bfe4 	b.w	8003720 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08003758 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8003758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800375c:	461d      	mov	r5, r3
 800375e:	1d1f      	adds	r7, r3, #4
 8003760:	2300      	movs	r3, #0
 8003762:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8003766:	460c      	mov	r4, r1
 8003768:	604a      	str	r2, [r1, #4]
 800376a:	700b      	strb	r3, [r1, #0]
 800376c:	b1a0      	cbz	r0, 8003798 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 800376e:	4295      	cmp	r5, r2
 8003770:	6091      	str	r1, [r2, #8]
 8003772:	d102      	bne.n	800377a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8003774:	6069      	str	r1, [r5, #4]
 8003776:	60ec      	str	r4, [r5, #12]
 8003778:	e003      	b.n	8003782 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 800377a:	68ab      	ldr	r3, [r5, #8]
 800377c:	4293      	cmp	r3, r2
 800377e:	bf08      	it	eq
 8003780:	60a9      	streq	r1, [r5, #8]
 8003782:	f04f 0900 	mov.w	r9, #0
 8003786:	f04f 0801 	mov.w	r8, #1
 800378a:	686b      	ldr	r3, [r5, #4]
 800378c:	42a3      	cmp	r3, r4
 800378e:	d132      	bne.n	80037f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 8003790:	2201      	movs	r2, #1
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003798:	60d1      	str	r1, [r2, #12]
 800379a:	68eb      	ldr	r3, [r5, #12]
 800379c:	4293      	cmp	r3, r2
 800379e:	d1f0      	bne.n	8003782 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 80037a0:	e7e9      	b.n	8003776 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 80037a2:	68c3      	ldr	r3, [r0, #12]
 80037a4:	42a3      	cmp	r3, r4
 80037a6:	d103      	bne.n	80037b0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 80037a8:	4639      	mov	r1, r7
 80037aa:	f7ff ff7c 	bl	80036a6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80037ae:	4604      	mov	r4, r0
 80037b0:	6863      	ldr	r3, [r4, #4]
 80037b2:	4639      	mov	r1, r7
 80037b4:	f883 8000 	strb.w	r8, [r3]
 80037b8:	4630      	mov	r0, r6
 80037ba:	f886 9000 	strb.w	r9, [r6]
 80037be:	f7ff ff87 	bl	80036d0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80037c2:	e7e2      	b.n	800378a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 80037c4:	b133      	cbz	r3, 80037d4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 80037c6:	781a      	ldrb	r2, [r3, #0]
 80037c8:	b922      	cbnz	r2, 80037d4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 80037ca:	f880 8000 	strb.w	r8, [r0]
 80037ce:	f883 8000 	strb.w	r8, [r3]
 80037d2:	e021      	b.n	8003818 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 80037d4:	6883      	ldr	r3, [r0, #8]
 80037d6:	42a3      	cmp	r3, r4
 80037d8:	d103      	bne.n	80037e2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 80037da:	4639      	mov	r1, r7
 80037dc:	f7ff ff78 	bl	80036d0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80037e0:	4604      	mov	r4, r0
 80037e2:	6863      	ldr	r3, [r4, #4]
 80037e4:	4639      	mov	r1, r7
 80037e6:	f883 8000 	strb.w	r8, [r3]
 80037ea:	4630      	mov	r0, r6
 80037ec:	f886 9000 	strb.w	r9, [r6]
 80037f0:	f7ff ff59 	bl	80036a6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80037f4:	e7c9      	b.n	800378a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 80037f6:	6860      	ldr	r0, [r4, #4]
 80037f8:	7802      	ldrb	r2, [r0, #0]
 80037fa:	2a00      	cmp	r2, #0
 80037fc:	d1c8      	bne.n	8003790 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 80037fe:	6846      	ldr	r6, [r0, #4]
 8003800:	68b3      	ldr	r3, [r6, #8]
 8003802:	4283      	cmp	r3, r0
 8003804:	d1de      	bne.n	80037c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8003806:	68f2      	ldr	r2, [r6, #12]
 8003808:	2a00      	cmp	r2, #0
 800380a:	d0ca      	beq.n	80037a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 800380c:	7811      	ldrb	r1, [r2, #0]
 800380e:	2900      	cmp	r1, #0
 8003810:	d1c7      	bne.n	80037a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8003812:	2101      	movs	r1, #1
 8003814:	7019      	strb	r1, [r3, #0]
 8003816:	7011      	strb	r1, [r2, #0]
 8003818:	f886 9000 	strb.w	r9, [r6]
 800381c:	4634      	mov	r4, r6
 800381e:	e7b4      	b.n	800378a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08003820 <_ZSt17__throw_bad_allocv>:
 8003820:	b508      	push	{r3, lr}
 8003822:	f000 f979 	bl	8003b18 <abort>

08003826 <_ZSt28__throw_bad_array_new_lengthv>:
 8003826:	b508      	push	{r3, lr}
 8003828:	f000 f976 	bl	8003b18 <abort>

0800382c <_ZSt19__throw_logic_errorPKc>:
 800382c:	b508      	push	{r3, lr}
 800382e:	f000 f973 	bl	8003b18 <abort>

08003832 <_ZSt20__throw_length_errorPKc>:
 8003832:	b508      	push	{r3, lr}
 8003834:	f000 f970 	bl	8003b18 <abort>

08003838 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8003838:	b10a      	cbz	r2, 800383e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800383a:	f000 bac3 	b.w	8003dc4 <memcpy>
 800383e:	4770      	bx	lr

08003840 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8003840:	f850 3b08 	ldr.w	r3, [r0], #8
 8003844:	1a1b      	subs	r3, r3, r0
 8003846:	4258      	negs	r0, r3
 8003848:	4158      	adcs	r0, r3
 800384a:	4770      	bx	lr

0800384c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800384c:	b508      	push	{r3, lr}
 800384e:	680b      	ldr	r3, [r1, #0]
 8003850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003854:	d302      	bcc.n	800385c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8003856:	480d      	ldr	r0, [pc, #52]	@ (800388c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8003858:	f7ff ffeb 	bl	8003832 <_ZSt20__throw_length_errorPKc>
 800385c:	4293      	cmp	r3, r2
 800385e:	d90b      	bls.n	8003878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8003860:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8003864:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8003868:	d206      	bcs.n	8003878 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800386a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800386e:	bf2a      	itet	cs
 8003870:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8003874:	6008      	strcc	r0, [r1, #0]
 8003876:	600b      	strcs	r3, [r1, #0]
 8003878:	6808      	ldr	r0, [r1, #0]
 800387a:	3001      	adds	r0, #1
 800387c:	d501      	bpl.n	8003882 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800387e:	f7ff ffcf 	bl	8003820 <_ZSt17__throw_bad_allocv>
 8003882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003886:	f7ff befb 	b.w	8003680 <_Znwj>
 800388a:	bf00      	nop
 800388c:	08003f98 	.word	0x08003f98

08003890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8003890:	b510      	push	{r4, lr}
 8003892:	4604      	mov	r4, r0
 8003894:	f7ff ffd4 	bl	8003840 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8003898:	b920      	cbnz	r0, 80038a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 800389a:	6820      	ldr	r0, [r4, #0]
 800389c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038a0:	f000 b930 	b.w	8003b04 <_ZdlPv>
 80038a4:	bd10      	pop	{r4, pc}

080038a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80038a6:	6840      	ldr	r0, [r0, #4]
 80038a8:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80038ac:	3901      	subs	r1, #1
 80038ae:	1a09      	subs	r1, r1, r0
 80038b0:	4291      	cmp	r1, r2
 80038b2:	b508      	push	{r3, lr}
 80038b4:	d202      	bcs.n	80038bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff ffbb 	bl	8003832 <_ZSt20__throw_length_errorPKc>
 80038bc:	bd08      	pop	{r3, pc}

080038be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80038be:	2a01      	cmp	r2, #1
 80038c0:	b410      	push	{r4}
 80038c2:	d104      	bne.n	80038ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80038c4:	780a      	ldrb	r2, [r1, #0]
 80038c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038ca:	7002      	strb	r2, [r0, #0]
 80038cc:	4770      	bx	lr
 80038ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038d2:	f7ff bfb1 	b.w	8003838 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080038d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80038d6:	b508      	push	{r3, lr}
 80038d8:	1a52      	subs	r2, r2, r1
 80038da:	f7ff fff0 	bl	80038be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80038de:	bd08      	pop	{r3, pc}

080038e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80038e0:	b508      	push	{r3, lr}
 80038e2:	1a52      	subs	r2, r2, r1
 80038e4:	f7ff ffeb 	bl	80038be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80038e8:	bd08      	pop	{r3, pc}

080038ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80038ea:	f100 0208 	add.w	r2, r0, #8
 80038ee:	6002      	str	r2, [r0, #0]
 80038f0:	2200      	movs	r2, #0
 80038f2:	6042      	str	r2, [r0, #4]
 80038f4:	7202      	strb	r2, [r0, #8]
 80038f6:	4770      	bx	lr

080038f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80038f8:	b510      	push	{r4, lr}
 80038fa:	4604      	mov	r4, r0
 80038fc:	f7ff ffc8 	bl	8003890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003900:	4620      	mov	r0, r4
 8003902:	bd10      	pop	{r4, pc}

08003904 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8003904:	6800      	ldr	r0, [r0, #0]
 8003906:	4770      	bx	lr

08003908 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 8003908:	e9d0 2000 	ldrd	r2, r0, [r0]
 800390c:	4410      	add	r0, r2
 800390e:	4770      	bx	lr

08003910 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8003910:	b510      	push	{r4, lr}
 8003912:	4604      	mov	r4, r0
 8003914:	f7ff ff94 	bl	8003840 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8003918:	b908      	cbnz	r0, 800391e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 800391a:	68a0      	ldr	r0, [r4, #8]
 800391c:	bd10      	pop	{r4, pc}
 800391e:	200f      	movs	r0, #15
 8003920:	e7fc      	b.n	800391c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08003922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8003922:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003926:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8003928:	461f      	mov	r7, r3
 800392a:	6843      	ldr	r3, [r0, #4]
 800392c:	eb01 0802 	add.w	r8, r1, r2
 8003930:	1ab2      	subs	r2, r6, r2
 8003932:	441a      	add	r2, r3
 8003934:	4604      	mov	r4, r0
 8003936:	460d      	mov	r5, r1
 8003938:	eba3 0908 	sub.w	r9, r3, r8
 800393c:	9201      	str	r2, [sp, #4]
 800393e:	f7ff ffe7 	bl	8003910 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8003942:	a901      	add	r1, sp, #4
 8003944:	4602      	mov	r2, r0
 8003946:	4620      	mov	r0, r4
 8003948:	f7ff ff80 	bl	800384c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800394c:	4682      	mov	sl, r0
 800394e:	b11d      	cbz	r5, 8003958 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8003950:	6821      	ldr	r1, [r4, #0]
 8003952:	462a      	mov	r2, r5
 8003954:	f7ff ffb3 	bl	80038be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003958:	b137      	cbz	r7, 8003968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800395a:	b12e      	cbz	r6, 8003968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800395c:	4632      	mov	r2, r6
 800395e:	4639      	mov	r1, r7
 8003960:	eb0a 0005 	add.w	r0, sl, r5
 8003964:	f7ff ffab 	bl	80038be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003968:	f1b9 0f00 	cmp.w	r9, #0
 800396c:	d007      	beq.n	800397e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 800396e:	6821      	ldr	r1, [r4, #0]
 8003970:	4435      	add	r5, r6
 8003972:	464a      	mov	r2, r9
 8003974:	4441      	add	r1, r8
 8003976:	eb0a 0005 	add.w	r0, sl, r5
 800397a:	f7ff ffa0 	bl	80038be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800397e:	4620      	mov	r0, r4
 8003980:	f7ff ff86 	bl	8003890 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003984:	9b01      	ldr	r3, [sp, #4]
 8003986:	f8c4 a000 	str.w	sl, [r4]
 800398a:	60a3      	str	r3, [r4, #8]
 800398c:	b002      	add	sp, #8
 800398e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8003992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003994:	6846      	ldr	r6, [r0, #4]
 8003996:	4604      	mov	r4, r0
 8003998:	460f      	mov	r7, r1
 800399a:	f7ff ffb9 	bl	8003910 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800399e:	1c75      	adds	r5, r6, #1
 80039a0:	4285      	cmp	r5, r0
 80039a2:	d907      	bls.n	80039b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x22>
 80039a4:	2301      	movs	r3, #1
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	2300      	movs	r3, #0
 80039aa:	461a      	mov	r2, r3
 80039ac:	4631      	mov	r1, r6
 80039ae:	4620      	mov	r0, r4
 80039b0:	f7ff ffb7 	bl	8003922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	559f      	strb	r7, [r3, r6]
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	6065      	str	r5, [r4, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	555a      	strb	r2, [r3, r5]
 80039c0:	b003      	add	sp, #12
 80039c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 80039c4:	b510      	push	{r4, lr}
 80039c6:	4604      	mov	r4, r0
 80039c8:	f7ff ffe3 	bl	8003992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 80039cc:	4620      	mov	r0, r4
 80039ce:	bd10      	pop	{r4, pc}

080039d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80039d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80039d4:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80039d8:	4604      	mov	r4, r0
 80039da:	eb02 0708 	add.w	r7, r2, r8
 80039de:	460e      	mov	r6, r1
 80039e0:	4615      	mov	r5, r2
 80039e2:	f7ff ff95 	bl	8003910 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80039e6:	42b8      	cmp	r0, r7
 80039e8:	d30e      	bcc.n	8003a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 80039ea:	b12d      	cbz	r5, 80039f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 80039ec:	6820      	ldr	r0, [r4, #0]
 80039ee:	462a      	mov	r2, r5
 80039f0:	4631      	mov	r1, r6
 80039f2:	4440      	add	r0, r8
 80039f4:	f7ff ff63 	bl	80038be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	6067      	str	r7, [r4, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	4620      	mov	r0, r4
 8003a00:	55da      	strb	r2, [r3, r7]
 8003a02:	b002      	add	sp, #8
 8003a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a08:	9500      	str	r5, [sp, #0]
 8003a0a:	4633      	mov	r3, r6
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4641      	mov	r1, r8
 8003a10:	4620      	mov	r0, r4
 8003a12:	f7ff ff86 	bl	8003922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8003a16:	e7ef      	b.n	80039f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>

08003a18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	460d      	mov	r5, r1
 8003a20:	4616      	mov	r6, r2
 8003a22:	2100      	movs	r1, #0
 8003a24:	f7ff ff3f 	bl	80038a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8003a28:	4632      	mov	r2, r6
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f7ff ffcf 	bl	80039d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8003a32:	bd70      	pop	{r4, r5, r6, pc}
 8003a34:	08003fb0 	.word	0x08003fb0

08003a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8003a38:	b508      	push	{r3, lr}
 8003a3a:	e9d1 1200 	ldrd	r1, r2, [r1]
 8003a3e:	f7ff ffeb 	bl	8003a18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
 8003a42:	bd08      	pop	{r3, pc}

08003a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 8003a44:	b508      	push	{r3, lr}
 8003a46:	f7ff fff7 	bl	8003a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8003a4a:	bd08      	pop	{r3, pc}

08003a4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8003a4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a4e:	1a53      	subs	r3, r2, r1
 8003a50:	2b0f      	cmp	r3, #15
 8003a52:	4604      	mov	r4, r0
 8003a54:	460d      	mov	r5, r1
 8003a56:	4616      	mov	r6, r2
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	d906      	bls.n	8003a6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	a901      	add	r1, sp, #4
 8003a60:	f7ff fef4 	bl	800384c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003a64:	9b01      	ldr	r3, [sp, #4]
 8003a66:	6020      	str	r0, [r4, #0]
 8003a68:	60a3      	str	r3, [r4, #8]
 8003a6a:	4632      	mov	r2, r6
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	6820      	ldr	r0, [r4, #0]
 8003a70:	f7ff ff31 	bl	80038d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8003a74:	9b01      	ldr	r3, [sp, #4]
 8003a76:	6822      	ldr	r2, [r4, #0]
 8003a78:	6063      	str	r3, [r4, #4]
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	54d1      	strb	r1, [r2, r3]
 8003a7e:	b002      	add	sp, #8
 8003a80:	bd70      	pop	{r4, r5, r6, pc}

08003a82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8003a82:	f100 0208 	add.w	r2, r0, #8
 8003a86:	b510      	push	{r4, lr}
 8003a88:	6002      	str	r2, [r0, #0]
 8003a8a:	e9d1 1200 	ldrd	r1, r2, [r1]
 8003a8e:	4604      	mov	r4, r0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	440a      	add	r2, r1
 8003a96:	f7ff ffd9 	bl	8003a4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	bd10      	pop	{r4, pc}

08003a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8003a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003aa0:	1a53      	subs	r3, r2, r1
 8003aa2:	2b0f      	cmp	r3, #15
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	460d      	mov	r5, r1
 8003aa8:	4616      	mov	r6, r2
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	d906      	bls.n	8003abc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 8003aae:	2200      	movs	r2, #0
 8003ab0:	a901      	add	r1, sp, #4
 8003ab2:	f7ff fecb 	bl	800384c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003ab6:	9b01      	ldr	r3, [sp, #4]
 8003ab8:	6020      	str	r0, [r4, #0]
 8003aba:	60a3      	str	r3, [r4, #8]
 8003abc:	4632      	mov	r2, r6
 8003abe:	4629      	mov	r1, r5
 8003ac0:	6820      	ldr	r0, [r4, #0]
 8003ac2:	f7ff ff0d 	bl	80038e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8003ac6:	9b01      	ldr	r3, [sp, #4]
 8003ac8:	6822      	ldr	r2, [r4, #0]
 8003aca:	6063      	str	r3, [r4, #4]
 8003acc:	2100      	movs	r1, #0
 8003ace:	54d1      	strb	r1, [r2, r3]
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}

08003ad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	f100 0308 	add.w	r3, r0, #8
 8003ada:	4604      	mov	r4, r0
 8003adc:	6003      	str	r3, [r0, #0]
 8003ade:	460d      	mov	r5, r1
 8003ae0:	b911      	cbnz	r1, 8003ae8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 8003ae2:	4807      	ldr	r0, [pc, #28]	@ (8003b00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 8003ae4:	f7ff fea2 	bl	800382c <_ZSt19__throw_logic_errorPKc>
 8003ae8:	4608      	mov	r0, r1
 8003aea:	f7fc fb73 	bl	80001d4 <strlen>
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	182a      	adds	r2, r5, r0
 8003af4:	4629      	mov	r1, r5
 8003af6:	4620      	mov	r0, r4
 8003af8:	f7ff ffd1 	bl	8003a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8003afc:	4620      	mov	r0, r4
 8003afe:	bd38      	pop	{r3, r4, r5, pc}
 8003b00:	08003fc5 	.word	0x08003fc5

08003b04 <_ZdlPv>:
 8003b04:	f000 b818 	b.w	8003b38 <free>

08003b08 <_ZSt15get_new_handlerv>:
 8003b08:	4b02      	ldr	r3, [pc, #8]	@ (8003b14 <_ZSt15get_new_handlerv+0xc>)
 8003b0a:	6818      	ldr	r0, [r3, #0]
 8003b0c:	f3bf 8f5b 	dmb	ish
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000080 	.word	0x20000080

08003b18 <abort>:
 8003b18:	b508      	push	{r3, lr}
 8003b1a:	2006      	movs	r0, #6
 8003b1c:	f000 f8fa 	bl	8003d14 <raise>
 8003b20:	2001      	movs	r0, #1
 8003b22:	f7fe fdbe 	bl	80026a2 <_exit>
	...

08003b28 <malloc>:
 8003b28:	4b02      	ldr	r3, [pc, #8]	@ (8003b34 <malloc+0xc>)
 8003b2a:	4601      	mov	r1, r0
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	f000 b82d 	b.w	8003b8c <_malloc_r>
 8003b32:	bf00      	nop
 8003b34:	2000000c 	.word	0x2000000c

08003b38 <free>:
 8003b38:	4b02      	ldr	r3, [pc, #8]	@ (8003b44 <free+0xc>)
 8003b3a:	4601      	mov	r1, r0
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	f000 b94f 	b.w	8003de0 <_free_r>
 8003b42:	bf00      	nop
 8003b44:	2000000c 	.word	0x2000000c

08003b48 <sbrk_aligned>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	4e0f      	ldr	r6, [pc, #60]	@ (8003b88 <sbrk_aligned+0x40>)
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	6831      	ldr	r1, [r6, #0]
 8003b50:	4605      	mov	r5, r0
 8003b52:	b911      	cbnz	r1, 8003b5a <sbrk_aligned+0x12>
 8003b54:	f000 f8fa 	bl	8003d4c <_sbrk_r>
 8003b58:	6030      	str	r0, [r6, #0]
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f000 f8f5 	bl	8003d4c <_sbrk_r>
 8003b62:	1c43      	adds	r3, r0, #1
 8003b64:	d103      	bne.n	8003b6e <sbrk_aligned+0x26>
 8003b66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
 8003b6e:	1cc4      	adds	r4, r0, #3
 8003b70:	f024 0403 	bic.w	r4, r4, #3
 8003b74:	42a0      	cmp	r0, r4
 8003b76:	d0f8      	beq.n	8003b6a <sbrk_aligned+0x22>
 8003b78:	1a21      	subs	r1, r4, r0
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f000 f8e6 	bl	8003d4c <_sbrk_r>
 8003b80:	3001      	adds	r0, #1
 8003b82:	d1f2      	bne.n	8003b6a <sbrk_aligned+0x22>
 8003b84:	e7ef      	b.n	8003b66 <sbrk_aligned+0x1e>
 8003b86:	bf00      	nop
 8003b88:	20000084 	.word	0x20000084

08003b8c <_malloc_r>:
 8003b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b90:	1ccd      	adds	r5, r1, #3
 8003b92:	f025 0503 	bic.w	r5, r5, #3
 8003b96:	3508      	adds	r5, #8
 8003b98:	2d0c      	cmp	r5, #12
 8003b9a:	bf38      	it	cc
 8003b9c:	250c      	movcc	r5, #12
 8003b9e:	2d00      	cmp	r5, #0
 8003ba0:	4606      	mov	r6, r0
 8003ba2:	db01      	blt.n	8003ba8 <_malloc_r+0x1c>
 8003ba4:	42a9      	cmp	r1, r5
 8003ba6:	d904      	bls.n	8003bb2 <_malloc_r+0x26>
 8003ba8:	230c      	movs	r3, #12
 8003baa:	6033      	str	r3, [r6, #0]
 8003bac:	2000      	movs	r0, #0
 8003bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c88 <_malloc_r+0xfc>
 8003bb6:	f000 f869 	bl	8003c8c <__malloc_lock>
 8003bba:	f8d8 3000 	ldr.w	r3, [r8]
 8003bbe:	461c      	mov	r4, r3
 8003bc0:	bb44      	cbnz	r4, 8003c14 <_malloc_r+0x88>
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	f7ff ffbf 	bl	8003b48 <sbrk_aligned>
 8003bca:	1c43      	adds	r3, r0, #1
 8003bcc:	4604      	mov	r4, r0
 8003bce:	d158      	bne.n	8003c82 <_malloc_r+0xf6>
 8003bd0:	f8d8 4000 	ldr.w	r4, [r8]
 8003bd4:	4627      	mov	r7, r4
 8003bd6:	2f00      	cmp	r7, #0
 8003bd8:	d143      	bne.n	8003c62 <_malloc_r+0xd6>
 8003bda:	2c00      	cmp	r4, #0
 8003bdc:	d04b      	beq.n	8003c76 <_malloc_r+0xea>
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	4639      	mov	r1, r7
 8003be2:	4630      	mov	r0, r6
 8003be4:	eb04 0903 	add.w	r9, r4, r3
 8003be8:	f000 f8b0 	bl	8003d4c <_sbrk_r>
 8003bec:	4581      	cmp	r9, r0
 8003bee:	d142      	bne.n	8003c76 <_malloc_r+0xea>
 8003bf0:	6821      	ldr	r1, [r4, #0]
 8003bf2:	1a6d      	subs	r5, r5, r1
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f7ff ffa6 	bl	8003b48 <sbrk_aligned>
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d03a      	beq.n	8003c76 <_malloc_r+0xea>
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	442b      	add	r3, r5
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	f8d8 3000 	ldr.w	r3, [r8]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	bb62      	cbnz	r2, 8003c68 <_malloc_r+0xdc>
 8003c0e:	f8c8 7000 	str.w	r7, [r8]
 8003c12:	e00f      	b.n	8003c34 <_malloc_r+0xa8>
 8003c14:	6822      	ldr	r2, [r4, #0]
 8003c16:	1b52      	subs	r2, r2, r5
 8003c18:	d420      	bmi.n	8003c5c <_malloc_r+0xd0>
 8003c1a:	2a0b      	cmp	r2, #11
 8003c1c:	d917      	bls.n	8003c4e <_malloc_r+0xc2>
 8003c1e:	1961      	adds	r1, r4, r5
 8003c20:	42a3      	cmp	r3, r4
 8003c22:	6025      	str	r5, [r4, #0]
 8003c24:	bf18      	it	ne
 8003c26:	6059      	strne	r1, [r3, #4]
 8003c28:	6863      	ldr	r3, [r4, #4]
 8003c2a:	bf08      	it	eq
 8003c2c:	f8c8 1000 	streq.w	r1, [r8]
 8003c30:	5162      	str	r2, [r4, r5]
 8003c32:	604b      	str	r3, [r1, #4]
 8003c34:	4630      	mov	r0, r6
 8003c36:	f000 f82f 	bl	8003c98 <__malloc_unlock>
 8003c3a:	f104 000b 	add.w	r0, r4, #11
 8003c3e:	1d23      	adds	r3, r4, #4
 8003c40:	f020 0007 	bic.w	r0, r0, #7
 8003c44:	1ac2      	subs	r2, r0, r3
 8003c46:	bf1c      	itt	ne
 8003c48:	1a1b      	subne	r3, r3, r0
 8003c4a:	50a3      	strne	r3, [r4, r2]
 8003c4c:	e7af      	b.n	8003bae <_malloc_r+0x22>
 8003c4e:	6862      	ldr	r2, [r4, #4]
 8003c50:	42a3      	cmp	r3, r4
 8003c52:	bf0c      	ite	eq
 8003c54:	f8c8 2000 	streq.w	r2, [r8]
 8003c58:	605a      	strne	r2, [r3, #4]
 8003c5a:	e7eb      	b.n	8003c34 <_malloc_r+0xa8>
 8003c5c:	4623      	mov	r3, r4
 8003c5e:	6864      	ldr	r4, [r4, #4]
 8003c60:	e7ae      	b.n	8003bc0 <_malloc_r+0x34>
 8003c62:	463c      	mov	r4, r7
 8003c64:	687f      	ldr	r7, [r7, #4]
 8003c66:	e7b6      	b.n	8003bd6 <_malloc_r+0x4a>
 8003c68:	461a      	mov	r2, r3
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	42a3      	cmp	r3, r4
 8003c6e:	d1fb      	bne.n	8003c68 <_malloc_r+0xdc>
 8003c70:	2300      	movs	r3, #0
 8003c72:	6053      	str	r3, [r2, #4]
 8003c74:	e7de      	b.n	8003c34 <_malloc_r+0xa8>
 8003c76:	230c      	movs	r3, #12
 8003c78:	6033      	str	r3, [r6, #0]
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f000 f80c 	bl	8003c98 <__malloc_unlock>
 8003c80:	e794      	b.n	8003bac <_malloc_r+0x20>
 8003c82:	6005      	str	r5, [r0, #0]
 8003c84:	e7d6      	b.n	8003c34 <_malloc_r+0xa8>
 8003c86:	bf00      	nop
 8003c88:	20000088 	.word	0x20000088

08003c8c <__malloc_lock>:
 8003c8c:	4801      	ldr	r0, [pc, #4]	@ (8003c94 <__malloc_lock+0x8>)
 8003c8e:	f000 b897 	b.w	8003dc0 <__retarget_lock_acquire_recursive>
 8003c92:	bf00      	nop
 8003c94:	200001c8 	.word	0x200001c8

08003c98 <__malloc_unlock>:
 8003c98:	4801      	ldr	r0, [pc, #4]	@ (8003ca0 <__malloc_unlock+0x8>)
 8003c9a:	f000 b892 	b.w	8003dc2 <__retarget_lock_release_recursive>
 8003c9e:	bf00      	nop
 8003ca0:	200001c8 	.word	0x200001c8

08003ca4 <isalpha>:
 8003ca4:	4b02      	ldr	r3, [pc, #8]	@ (8003cb0 <isalpha+0xc>)
 8003ca6:	4403      	add	r3, r0
 8003ca8:	7858      	ldrb	r0, [r3, #1]
 8003caa:	f000 0003 	and.w	r0, r0, #3
 8003cae:	4770      	bx	lr
 8003cb0:	08003ff7 	.word	0x08003ff7

08003cb4 <memset>:
 8003cb4:	4402      	add	r2, r0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d100      	bne.n	8003cbe <memset+0xa>
 8003cbc:	4770      	bx	lr
 8003cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003cc2:	e7f9      	b.n	8003cb8 <memset+0x4>

08003cc4 <_raise_r>:
 8003cc4:	291f      	cmp	r1, #31
 8003cc6:	b538      	push	{r3, r4, r5, lr}
 8003cc8:	4605      	mov	r5, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	d904      	bls.n	8003cd8 <_raise_r+0x14>
 8003cce:	2316      	movs	r3, #22
 8003cd0:	6003      	str	r3, [r0, #0]
 8003cd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cd6:	bd38      	pop	{r3, r4, r5, pc}
 8003cd8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003cda:	b112      	cbz	r2, 8003ce2 <_raise_r+0x1e>
 8003cdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003ce0:	b94b      	cbnz	r3, 8003cf6 <_raise_r+0x32>
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	f000 f830 	bl	8003d48 <_getpid_r>
 8003ce8:	4622      	mov	r2, r4
 8003cea:	4601      	mov	r1, r0
 8003cec:	4628      	mov	r0, r5
 8003cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cf2:	f000 b817 	b.w	8003d24 <_kill_r>
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d00a      	beq.n	8003d10 <_raise_r+0x4c>
 8003cfa:	1c59      	adds	r1, r3, #1
 8003cfc:	d103      	bne.n	8003d06 <_raise_r+0x42>
 8003cfe:	2316      	movs	r3, #22
 8003d00:	6003      	str	r3, [r0, #0]
 8003d02:	2001      	movs	r0, #1
 8003d04:	e7e7      	b.n	8003cd6 <_raise_r+0x12>
 8003d06:	2100      	movs	r1, #0
 8003d08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	4798      	blx	r3
 8003d10:	2000      	movs	r0, #0
 8003d12:	e7e0      	b.n	8003cd6 <_raise_r+0x12>

08003d14 <raise>:
 8003d14:	4b02      	ldr	r3, [pc, #8]	@ (8003d20 <raise+0xc>)
 8003d16:	4601      	mov	r1, r0
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	f7ff bfd3 	b.w	8003cc4 <_raise_r>
 8003d1e:	bf00      	nop
 8003d20:	2000000c 	.word	0x2000000c

08003d24 <_kill_r>:
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	4d07      	ldr	r5, [pc, #28]	@ (8003d44 <_kill_r+0x20>)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	602b      	str	r3, [r5, #0]
 8003d32:	f7fe fca6 	bl	8002682 <_kill>
 8003d36:	1c43      	adds	r3, r0, #1
 8003d38:	d102      	bne.n	8003d40 <_kill_r+0x1c>
 8003d3a:	682b      	ldr	r3, [r5, #0]
 8003d3c:	b103      	cbz	r3, 8003d40 <_kill_r+0x1c>
 8003d3e:	6023      	str	r3, [r4, #0]
 8003d40:	bd38      	pop	{r3, r4, r5, pc}
 8003d42:	bf00      	nop
 8003d44:	200001c4 	.word	0x200001c4

08003d48 <_getpid_r>:
 8003d48:	f7fe bc93 	b.w	8002672 <_getpid>

08003d4c <_sbrk_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4d06      	ldr	r5, [pc, #24]	@ (8003d68 <_sbrk_r+0x1c>)
 8003d50:	2300      	movs	r3, #0
 8003d52:	4604      	mov	r4, r0
 8003d54:	4608      	mov	r0, r1
 8003d56:	602b      	str	r3, [r5, #0]
 8003d58:	f7fe fcae 	bl	80026b8 <_sbrk>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	d102      	bne.n	8003d66 <_sbrk_r+0x1a>
 8003d60:	682b      	ldr	r3, [r5, #0]
 8003d62:	b103      	cbz	r3, 8003d66 <_sbrk_r+0x1a>
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
 8003d68:	200001c4 	.word	0x200001c4

08003d6c <__errno>:
 8003d6c:	4b01      	ldr	r3, [pc, #4]	@ (8003d74 <__errno+0x8>)
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	2000000c 	.word	0x2000000c

08003d78 <__libc_init_array>:
 8003d78:	b570      	push	{r4, r5, r6, lr}
 8003d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8003db0 <__libc_init_array+0x38>)
 8003d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8003db4 <__libc_init_array+0x3c>)
 8003d7e:	1b64      	subs	r4, r4, r5
 8003d80:	10a4      	asrs	r4, r4, #2
 8003d82:	2600      	movs	r6, #0
 8003d84:	42a6      	cmp	r6, r4
 8003d86:	d109      	bne.n	8003d9c <__libc_init_array+0x24>
 8003d88:	4d0b      	ldr	r5, [pc, #44]	@ (8003db8 <__libc_init_array+0x40>)
 8003d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8003dbc <__libc_init_array+0x44>)
 8003d8c:	f000 f872 	bl	8003e74 <_init>
 8003d90:	1b64      	subs	r4, r4, r5
 8003d92:	10a4      	asrs	r4, r4, #2
 8003d94:	2600      	movs	r6, #0
 8003d96:	42a6      	cmp	r6, r4
 8003d98:	d105      	bne.n	8003da6 <__libc_init_array+0x2e>
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
 8003d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da0:	4798      	blx	r3
 8003da2:	3601      	adds	r6, #1
 8003da4:	e7ee      	b.n	8003d84 <__libc_init_array+0xc>
 8003da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003daa:	4798      	blx	r3
 8003dac:	3601      	adds	r6, #1
 8003dae:	e7f2      	b.n	8003d96 <__libc_init_array+0x1e>
 8003db0:	08004100 	.word	0x08004100
 8003db4:	08004100 	.word	0x08004100
 8003db8:	08004100 	.word	0x08004100
 8003dbc:	08004104 	.word	0x08004104

08003dc0 <__retarget_lock_acquire_recursive>:
 8003dc0:	4770      	bx	lr

08003dc2 <__retarget_lock_release_recursive>:
 8003dc2:	4770      	bx	lr

08003dc4 <memcpy>:
 8003dc4:	440a      	add	r2, r1
 8003dc6:	4291      	cmp	r1, r2
 8003dc8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003dcc:	d100      	bne.n	8003dd0 <memcpy+0xc>
 8003dce:	4770      	bx	lr
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dda:	4291      	cmp	r1, r2
 8003ddc:	d1f9      	bne.n	8003dd2 <memcpy+0xe>
 8003dde:	bd10      	pop	{r4, pc}

08003de0 <_free_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4605      	mov	r5, r0
 8003de4:	2900      	cmp	r1, #0
 8003de6:	d041      	beq.n	8003e6c <_free_r+0x8c>
 8003de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dec:	1f0c      	subs	r4, r1, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bfb8      	it	lt
 8003df2:	18e4      	addlt	r4, r4, r3
 8003df4:	f7ff ff4a 	bl	8003c8c <__malloc_lock>
 8003df8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e70 <_free_r+0x90>)
 8003dfa:	6813      	ldr	r3, [r2, #0]
 8003dfc:	b933      	cbnz	r3, 8003e0c <_free_r+0x2c>
 8003dfe:	6063      	str	r3, [r4, #4]
 8003e00:	6014      	str	r4, [r2, #0]
 8003e02:	4628      	mov	r0, r5
 8003e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e08:	f7ff bf46 	b.w	8003c98 <__malloc_unlock>
 8003e0c:	42a3      	cmp	r3, r4
 8003e0e:	d908      	bls.n	8003e22 <_free_r+0x42>
 8003e10:	6820      	ldr	r0, [r4, #0]
 8003e12:	1821      	adds	r1, r4, r0
 8003e14:	428b      	cmp	r3, r1
 8003e16:	bf01      	itttt	eq
 8003e18:	6819      	ldreq	r1, [r3, #0]
 8003e1a:	685b      	ldreq	r3, [r3, #4]
 8003e1c:	1809      	addeq	r1, r1, r0
 8003e1e:	6021      	streq	r1, [r4, #0]
 8003e20:	e7ed      	b.n	8003dfe <_free_r+0x1e>
 8003e22:	461a      	mov	r2, r3
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	b10b      	cbz	r3, 8003e2c <_free_r+0x4c>
 8003e28:	42a3      	cmp	r3, r4
 8003e2a:	d9fa      	bls.n	8003e22 <_free_r+0x42>
 8003e2c:	6811      	ldr	r1, [r2, #0]
 8003e2e:	1850      	adds	r0, r2, r1
 8003e30:	42a0      	cmp	r0, r4
 8003e32:	d10b      	bne.n	8003e4c <_free_r+0x6c>
 8003e34:	6820      	ldr	r0, [r4, #0]
 8003e36:	4401      	add	r1, r0
 8003e38:	1850      	adds	r0, r2, r1
 8003e3a:	4283      	cmp	r3, r0
 8003e3c:	6011      	str	r1, [r2, #0]
 8003e3e:	d1e0      	bne.n	8003e02 <_free_r+0x22>
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	6053      	str	r3, [r2, #4]
 8003e46:	4408      	add	r0, r1
 8003e48:	6010      	str	r0, [r2, #0]
 8003e4a:	e7da      	b.n	8003e02 <_free_r+0x22>
 8003e4c:	d902      	bls.n	8003e54 <_free_r+0x74>
 8003e4e:	230c      	movs	r3, #12
 8003e50:	602b      	str	r3, [r5, #0]
 8003e52:	e7d6      	b.n	8003e02 <_free_r+0x22>
 8003e54:	6820      	ldr	r0, [r4, #0]
 8003e56:	1821      	adds	r1, r4, r0
 8003e58:	428b      	cmp	r3, r1
 8003e5a:	bf04      	itt	eq
 8003e5c:	6819      	ldreq	r1, [r3, #0]
 8003e5e:	685b      	ldreq	r3, [r3, #4]
 8003e60:	6063      	str	r3, [r4, #4]
 8003e62:	bf04      	itt	eq
 8003e64:	1809      	addeq	r1, r1, r0
 8003e66:	6021      	streq	r1, [r4, #0]
 8003e68:	6054      	str	r4, [r2, #4]
 8003e6a:	e7ca      	b.n	8003e02 <_free_r+0x22>
 8003e6c:	bd38      	pop	{r3, r4, r5, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000088 	.word	0x20000088

08003e74 <_init>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	bf00      	nop
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr

08003e80 <_fini>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	bf00      	nop
 8003e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e86:	bc08      	pop	{r3}
 8003e88:	469e      	mov	lr, r3
 8003e8a:	4770      	bx	lr
